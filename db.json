{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/img/alipay-reward.jpg","path":"img/alipay-reward.jpg","modified":1,"renderable":0},{"_id":"source/img/avatar.jpg","path":"img/avatar.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/404.html","path":"404.html","modified":1,"renderable":1},{"_id":"source/img/wechat-reward.jpg","path":"img/wechat-reward.jpg","modified":1,"renderable":0},{"_id":"source/img/2017-07-20/2017_07_20_1.png","path":"img/2017-07-20/2017_07_20_1.png","modified":1,"renderable":0},{"_id":"source/img/2017-07-20/2017_07_20_10.png","path":"img/2017-07-20/2017_07_20_10.png","modified":1,"renderable":0},{"_id":"source/img/2017-07-20/2017_07_20_11.png","path":"img/2017-07-20/2017_07_20_11.png","modified":1,"renderable":0},{"_id":"source/img/2017-07-20/2017_07_20_12.png","path":"img/2017-07-20/2017_07_20_12.png","modified":1,"renderable":0},{"_id":"source/img/2017-07-20/2017_07_20_13.png","path":"img/2017-07-20/2017_07_20_13.png","modified":1,"renderable":0},{"_id":"source/img/2017-07-20/2017_07_20_3.png","path":"img/2017-07-20/2017_07_20_3.png","modified":1,"renderable":0},{"_id":"source/img/2017-07-20/2017_07_20_4.png","path":"img/2017-07-20/2017_07_20_4.png","modified":1,"renderable":0},{"_id":"source/img/2017-07-20/2017_07_20_5.png","path":"img/2017-07-20/2017_07_20_5.png","modified":1,"renderable":0},{"_id":"source/img/2017-07-20/2017_07_20_6.png","path":"img/2017-07-20/2017_07_20_6.png","modified":1,"renderable":0},{"_id":"source/img/2017-07-20/2017_07_20_7.png","path":"img/2017-07-20/2017_07_20_7.png","modified":1,"renderable":0},{"_id":"source/img/2017-07-20/2017_07_20_9.png","path":"img/2017-07-20/2017_07_20_9.png","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon.ico","path":"images/favicon.ico","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon_.ico","path":"images/favicon_.ico","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/alipay-reward.jpg","path":"images/alipay-reward.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/wechat-reward.jpg","path":"images/wechat-reward.jpg","modified":1,"renderable":1},{"_id":"source/img/2017-07-20/2017_07_20_2.png","path":"img/2017-07-20/2017_07_20_2.png","modified":1,"renderable":0},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"source/img/2017-07-20/2017_07_20_8.png","path":"img/2017-07-20/2017_07_20_8.png","modified":1,"renderable":0},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1501212382138},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1501212382137},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1501212382139},{"_id":"themes/next/.gitignore","hash":"de5b9b9e5b313b4a86e805b02f334d35c87bfe56","modified":1501212382140},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1501212382141},{"_id":"themes/next/.javascript_ignore","hash":"74b54cf920cbbf4038a68e54b7138af8b8f45588","modified":1501212382141},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1501212382141},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1501212382142},{"_id":"themes/next/.travis.yml","hash":"360f38044910e74bf628b0799e19db90718b2cbe","modified":1501212382142},{"_id":"themes/next/README.en.md","hash":"953873fe2ee79bfc567b16dcdf8f91c1410444f8","modified":1501212382142},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1501212382143},{"_id":"themes/next/_config.yml","hash":"a778717b2f7468b7778654bdd47a4bd56dfaa25e","modified":1501836386741},{"_id":"themes/next/bower.json","hash":"bd70cf5988bbfc8cbcf13adae659151a55466524","modified":1501212382144},{"_id":"themes/next/gulpfile.coffee","hash":"79dcff7f65f262755f99122fca27986b52db098f","modified":1501212382144},{"_id":"themes/next/package.json","hash":"a5c189d4c4e946e936d3b5e29e2d81ddaf03ff96","modified":1501212382178},{"_id":"source/_posts/AddGitmentToNext.md","hash":"dde675269880edc6169980d7c135de7a273f238e","modified":1502076951907},{"_id":"source/_posts/First-Blood.md","hash":"049fed0eca13d8264479c634bbf8ea85fd1808e0","modified":1501211899079},{"_id":"source/_posts/LeetCode-BestTimetoBuyandSellStock.md","hash":"6ae9456f1e49894a01f6f0cb2aae113ff09dff93","modified":1511416937859},{"_id":"source/_posts/LeetCode-BestTimetoBuyandSellStockII.md","hash":"107e4b10f9c9859dee0d7137300accc7b1a81dad","modified":1511232235204},{"_id":"source/_posts/LeetCode-DegreeofanArray.md","hash":"11a93b2c05df78219f39fba1c106c17f76667d5b","modified":1511148697610},{"_id":"source/_posts/LeetCode-IslandPerimeter.md","hash":"f1bbf6be490940ed93fa755d37d9c3839bbad761","modified":1511148697611},{"_id":"source/_posts/LeetCode-MajorityElement.md","hash":"0e12cbe5477194ff51d6e3b124441eaeca23bc11","modified":1511516414024},{"_id":"source/_posts/LeetCode-MaxAreaofIsland.md","hash":"fa0a3ae525db136fe41a2b665bea94376f3bf0ff","modified":1511148697611},{"_id":"source/_posts/LeetCode-NumberofIslands.md","hash":"e8ee7b7a0c28b04af9b1ca00b75403c01ce58c64","modified":1511148697612},{"_id":"source/_posts/UseHexoToBuildBlog.md","hash":"64723a34ec7c85163d3ba5e7709cdbc2e6c2b5c2","modified":1510736494780},{"_id":"source/_posts/UseQiniudnToStorePic.md","hash":"799668dd4e2d6b77357eac2b0774dee9307ccbd6","modified":1501820371911},{"_id":"source/categories/index.md","hash":"0b0357b56c132c72129ebb4d81b3cc1347f81646","modified":1501211899080},{"_id":"source/tags/index.md","hash":"c7ac8f338cb264651d065c84cf8d2b497ea1ab92","modified":1501211899128},{"_id":"source/img/alipay-reward.jpg","hash":"8b1544eb402931ccbf870a76fc13b6b40e99adb4","modified":1501211899125},{"_id":"source/img/avatar.jpg","hash":"f6897b9e0895bd00e861900e6e42a7cca2bd604f","modified":1501211899126},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"4312fb37fa2b8663006be3c4fe01125ec01171c1","modified":1501212382139},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"2692e36cc35b1594530981e7727771f601720a43","modified":1501212382140},{"_id":"themes/next/.git/COMMIT_EDITMSG","hash":"03e3b88fe86a0306da22c297b6cf12cf1f77ee62","modified":1501838584832},{"_id":"themes/next/.git/FETCH_HEAD","hash":"5e03520cf924106a528b1e54d0660269625f250b","modified":1502100092565},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1501212382121},{"_id":"themes/next/.git/ORIG_HEAD","hash":"c27a3c52b97e8af9916f73b4a30f4d99b2d0ce6d","modified":1502100092600},{"_id":"themes/next/.git/config","hash":"891ac8c29a62963f973eeac7b0a90d8626fc74b9","modified":1501212382128},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1501212314665},{"_id":"themes/next/.git/index","hash":"cc34774d4e16b6f55c8bf86d3f5e3dcef46f98b5","modified":1501838584832},{"_id":"themes/next/.git/packed-refs","hash":"8bbea961c6491ab0ff645d24fa5f945836910805","modified":1501212382114},{"_id":"themes/next/languages/de.yml","hash":"db6a9d669f4b6282cda6c0a2d4e03d3e308a4846","modified":1501212382145},{"_id":"themes/next/languages/default.yml","hash":"e6aed24f060300a0ea31099a7d7186ec03b6cb0d","modified":1501212382145},{"_id":"themes/next/languages/en.yml","hash":"e6aed24f060300a0ea31099a7d7186ec03b6cb0d","modified":1501212382145},{"_id":"themes/next/languages/fr-FR.yml","hash":"e86e563d7ac8e763a1e6afdebcfa10c66c207c9c","modified":1501212382146},{"_id":"themes/next/languages/id.yml","hash":"d8b9dc017da0be7f71fda1cacd8064cbc38963b9","modified":1501212382146},{"_id":"themes/next/languages/ja.yml","hash":"bc89436a2a015ef72f43f265e56e37d94e73c0cd","modified":1501212382147},{"_id":"themes/next/languages/pt-BR.yml","hash":"4b91f96b07e05705b28964df7460466c9b522e2c","modified":1501212382147},{"_id":"themes/next/languages/ko.yml","hash":"c59676f2af80c3c594c34c4a0fcbf65fd8864ff3","modified":1501212382147},{"_id":"themes/next/languages/pt.yml","hash":"f364905121a816c9797acce07c0a4f248965b29a","modified":1501212382148},{"_id":"themes/next/languages/ru.yml","hash":"e71189d203feaeae515c79a46f0462f99aadc941","modified":1501212382148},{"_id":"themes/next/languages/zh-Hans.yml","hash":"5b69ab4ab097d37948c4f51ccddffd312ce031c1","modified":1501212382149},{"_id":"themes/next/languages/zh-hk.yml","hash":"abd889d418c1c25b5e8f837bbbaedb9389e935eb","modified":1501212382149},{"_id":"themes/next/languages/zh-tw.yml","hash":"dff76bee4ffa4b70b8ece2785bcd4b0f930bbcc5","modified":1501212382149},{"_id":"themes/next/layout/_layout.swig","hash":"54366831bac735c5916610c252a6b12550412be2","modified":1501212382152},{"_id":"themes/next/layout/archive.swig","hash":"b867a08f6b43de8b5d700c84b943df55917407ae","modified":1501212382175},{"_id":"themes/next/layout/category.swig","hash":"58cf08388901f7549b1fca95548b2c79173aa840","modified":1501212382176},{"_id":"themes/next/layout/index.swig","hash":"fec0e6e8748b8d3381565dcfae5c4c8644a50247","modified":1501212382176},{"_id":"themes/next/layout/page.swig","hash":"2a13804aa186f6062738d136e430870c53789bf4","modified":1501212382176},{"_id":"themes/next/layout/post.swig","hash":"b8334c479840b7724638eec71971cbd8512ae58d","modified":1501212382177},{"_id":"themes/next/layout/schedule.swig","hash":"595013860078799d455af4965b3a7c5c4fd3923c","modified":1501212382177},{"_id":"themes/next/layout/tag.swig","hash":"6f764ea3ab11eeb7c530df45528d449b14f5dc62","modified":1501212382177},{"_id":"themes/next/scripts/merge-configs.js","hash":"3ce1be32bb77ee19da25e8dae7dc04e2afc46ca1","modified":1501212382178},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1501212382179},{"_id":"themes/next/source/404.html","hash":"9eb955271b03c72a4bb23a06b60e4ecb4070a880","modified":1501212382182},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1501212382378},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1501212382378},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1501212382378},{"_id":"source/img/wechat-reward.jpg","hash":"11fda7c5af06333b7f5d7b2d02da5a47c0243571","modified":1501211899127},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501212382244},{"_id":"source/img/2017-07-20/2017_07_20_1.png","hash":"1bf5871d270bd41c2ebb5696a4c198520901fee8","modified":1501211899081},{"_id":"source/img/2017-07-20/2017_07_20_10.png","hash":"4f6ef9fff7ca002938cd87d3fabc2b1b7c779169","modified":1501211899082},{"_id":"source/img/2017-07-20/2017_07_20_11.png","hash":"fe5e1e83391ead41a383adf9ecf1e27ed23e9724","modified":1501211899116},{"_id":"source/img/2017-07-20/2017_07_20_12.png","hash":"08ac990568d035691c95dabb51e7b881e7c67a1a","modified":1501211899116},{"_id":"source/img/2017-07-20/2017_07_20_13.png","hash":"804b126e63f1499132218ecd065dbc8dbe286061","modified":1501211899117},{"_id":"source/img/2017-07-20/2017_07_20_3.png","hash":"8d0360364d63859d159d01576da72ad03996dc6f","modified":1501211899119},{"_id":"source/img/2017-07-20/2017_07_20_4.png","hash":"e1c4c8aca9dc164ee1cff089dd016906543251da","modified":1501211899119},{"_id":"source/img/2017-07-20/2017_07_20_5.png","hash":"47a26415292e0b5f45e9c13bb05bd970d1acdb32","modified":1501211899120},{"_id":"source/img/2017-07-20/2017_07_20_6.png","hash":"fe3f7f9f5367d0a57462696a2e5f4451428e4421","modified":1501211899120},{"_id":"source/img/2017-07-20/2017_07_20_7.png","hash":"8d7eec9fc64123d616c2c20e228fe8e1c8fd7bf8","modified":1501211899121},{"_id":"source/img/2017-07-20/2017_07_20_9.png","hash":"389df1a7e3e5b57712552400404ab446bcdcb6fc","modified":1501211899124},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1501212314665},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1501212314666},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1501212314688},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1501212314689},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1501212314689},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1501212314689},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1501212314690},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1501212314690},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1501212314691},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1501212314690},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1501212314691},{"_id":"themes/next/.git/logs/HEAD","hash":"58e86ecbf943f4be19b2ea5e3945b97e613bac69","modified":1501838584847},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1501212382151},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1501212382152},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"6d40652784585d263c37b8a3723e43e04b926ca7","modified":1501212382152},{"_id":"themes/next/layout/_macro/passage-end-tag.swig","hash":"bc181a7724eef32bc7dffe3acc2eafb30c7627a3","modified":1501214735542},{"_id":"themes/next/layout/_macro/post.swig","hash":"d52dc7a122d0d2cedf2c4ccdafafcd5ab48d27bd","modified":1501220899773},{"_id":"themes/next/layout/_macro/reward.swig","hash":"b6cb171f0ed227b82b8f7601814af2df93f3a09a","modified":1501212382153},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"e7f58154ac734088372888742e0029ce7c690511","modified":1501212382154},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"c5cc0070ca7c9a8dbd4b09e0398db536c3cdbe8a","modified":1501212382154},{"_id":"themes/next/layout/_partials/comments.swig","hash":"87ebc3026c039bd6c10502858daa67fb87d0ba48","modified":1501836748531},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1501212382155},{"_id":"themes/next/layout/_partials/footer.swig","hash":"683616f4a80796051e2346d80acf838a589450b0","modified":1501212382156},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1501212382158},{"_id":"themes/next/layout/_partials/head.swig","hash":"376adb0c482242ef8bcad31b93b99cc5c35e92fa","modified":1501212382156},{"_id":"themes/next/layout/_partials/header.swig","hash":"d6bf1d1554d91eaf1bfc40ba8905ae81673e5f45","modified":1501212382158},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1501212382158},{"_id":"themes/next/layout/_partials/search.swig","hash":"109b3d3403c72ac09926e35a1d00c6d36cc4f7fa","modified":1501212382159},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1501212382162},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1501212382163},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1501212382163},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"e9beddda9758d8739c41fc8c67b2e72fc29c1244","modified":1501212382175},{"_id":"themes/next/scripts/tags/button.js","hash":"aaf71be6b483fca7a65cd6296c2cf1c2271c26a6","modified":1501212382180},{"_id":"themes/next/scripts/tags/exturl.js","hash":"4de8b315a58095b39659b515387ea8091a67a9a4","modified":1501212382180},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1501212382181},{"_id":"themes/next/scripts/tags/note.js","hash":"7dc14db08f2c74f8f1952534b424f220f5c000c6","modified":1501212382182},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1501212382181},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1501212382180},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1501212382243},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1501212382245},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1501212382246},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1501212382248},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1501212382249},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1501212382249},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1501212382250},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1501212382250},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1501212382251},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1501212382250},{"_id":"themes/next/source/images/favicon.ico","hash":"f33bf7660cc8fba43ccb56e1081601ebf9c01db9","modified":1501212382251},{"_id":"themes/next/source/images/favicon_.ico","hash":"78df90b0c464ea7a4a37e02b4f49aff3b8772ee9","modified":1501212382252},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1501212382252},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1501212382252},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1501212382253},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1501212382253},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1501212382253},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501212382165},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501212382165},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501212382210},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501212382240},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501212382242},{"_id":"themes/next/source/images/alipay-reward.jpg","hash":"128e3a7e641549bd35f97929afd6297a9df1cc17","modified":1501212382246},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501212382210},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501212382211},{"_id":"themes/next/source/images/wechat-reward.jpg","hash":"11fda7c5af06333b7f5d7b2d02da5a47c0243571","modified":1501212382254},{"_id":"source/img/2017-07-20/2017_07_20_2.png","hash":"f862cd79f57e69192e69db73d0c6cbc4d26b12f2","modified":1501211899118},{"_id":"themes/next/.git/objects/04/20527af1edbbe4323ad3d0aa19eeb72ef080f2","hash":"ccaa2a450a97cd8685669310598218ea7fc5dc37","modified":1501222773810},{"_id":"themes/next/.git/objects/0c/0ebf4673d863c4505ff64a1ef0c0b7b20c5a12","hash":"e55eef83d3957a1a00ad5ab7c99c2041ad4c05c4","modified":1501838584832},{"_id":"themes/next/.git/objects/0f/53caea3764bfd4128a117bd302376937efe036","hash":"baf68bc1044a71b2cbdf33f291f46e6af217c7ed","modified":1501838561606},{"_id":"themes/next/.git/objects/32/8fcd697aa90ce528f18fbc19b6b1c163d163fe","hash":"70dd2f59458029a8cf9a35e8e28ee207e4e0621c","modified":1501827038393},{"_id":"themes/next/.git/objects/3f/6b76de37eb590cd51182d5cb6de9e3fcb0fff6","hash":"5492575fc714ea34c142add723c200c7ff0e8274","modified":1501222773810},{"_id":"themes/next/.git/objects/33/a114e359a4e6942519d748e8ffb5f040638b3a","hash":"160e63425e56a6336e0205a6489e756c117b7973","modified":1501222773826},{"_id":"themes/next/.git/objects/4a/9f33d46bb31bff117fa6b6965b11ca20388c2f","hash":"5baf142629ea9b625668aec19cabb34caca92bfb","modified":1501838584832},{"_id":"themes/next/.git/objects/5f/2ce788f3cc928fb6cca4569771d4472eab3982","hash":"a813503bbf1dc04707e251b4a70c644aa14ca631","modified":1501838584832},{"_id":"themes/next/.git/objects/70/6121009e6d9ba840f6d1f48614b38019269d11","hash":"3dc3ea922925fbdff4fc523a9b8d13aa78718f73","modified":1501222773810},{"_id":"themes/next/.git/objects/6e/b6f7a8fe1ee408ffc5c0023e4dd4c9b2ac3d4a","hash":"48f223b2c4f02bce710f614c78a9ebaf37ce36bf","modified":1501222773810},{"_id":"themes/next/.git/objects/73/28d511d37190ec2758c64648e4eb8104c0c63a","hash":"d49f9fddabeddd1933d1b56d5c8caf1c8e381ee0","modified":1501222808735},{"_id":"themes/next/.git/objects/74/8d1729e965a0edd5d12894f5b81f5361017492","hash":"f8cd06eb7b33159c2a642b6a88ea6468405b45d5","modified":1501222808732},{"_id":"themes/next/.git/objects/7c/9cd7875e869f8f4fb63d82ee5fb0a9c9d734ed","hash":"fce17e99ed9a66f62e67d0ca79624733ea5426d6","modified":1501827066983},{"_id":"themes/next/.git/objects/8b/e867f4d526b7333bd81bd051ddd907d34c25a6","hash":"bc3b30c08abcb3c75996cdcd81c8f11e438eea8b","modified":1501222808740},{"_id":"themes/next/.git/objects/8d/e3824ec114c067fdf5e0a228f45c8b85e20fd8","hash":"0888aa2ac5616b7af4e10b7c1a4e7e866daf52d8","modified":1501222808730},{"_id":"themes/next/.git/objects/90/d286e2ca87629471835eb15aaec2754ab60a68","hash":"a53f32c9aa29fec6e516142b196b27f0e7455788","modified":1501222773810},{"_id":"themes/next/.git/objects/94/184d5879ba9c2df2fdce7792a11e38adf4a65d","hash":"eb83540e84e4dc78b1e8d4d1bae2fc75f073b310","modified":1501222808734},{"_id":"themes/next/.git/objects/b6/f5855afb34f677e6ddca557b48cf56d78deb9a","hash":"9f6f110cd588f94075f372d0d0f7403d3283fa2f","modified":1501838584832},{"_id":"themes/next/.git/objects/ba/4008b3ba93435b23802d3763e7c71a58b5db86","hash":"3111144be6f59524ace714e532f467d95ce9c12e","modified":1501222808736},{"_id":"themes/next/.git/objects/b4/dcd0c2f8c25ba82473e4af15412a0c8bf78b9e","hash":"6576d09f486f6e1bda467a468f80dc8cada04b37","modified":1501222808741},{"_id":"themes/next/.git/objects/bf/ee93ab54285ef718edefc3137dd97085dd843c","hash":"8d6bf81bd5b91134f1f0fdc18edfb52578805986","modified":1501838561606},{"_id":"themes/next/.git/objects/ca/73f734c0980f671943ee5446eff198b7fed65e","hash":"3d83a0a05ee577f7d5282aba2d3b8480fa3bcf52","modified":1501838584832},{"_id":"themes/next/.git/objects/df/7671dd8e14154202d9fcec5e213af682856f7c","hash":"e061136f26d79348351b29179ab486ca8e57c2f8","modified":1501838584832},{"_id":"themes/next/.git/objects/e0/b92111e3bca82a07d04b002f9fcd7e5dc6284f","hash":"e9a23e5e04d7ca988c145f605d17bba4e548a4df","modified":1501222773810},{"_id":"themes/next/.git/objects/e3/58e8479611e4e33dbab2840148b83d5ee2acfb","hash":"f1a984425b89b82ae51cdd9ccd437536aff04dfd","modified":1501838584832},{"_id":"themes/next/.git/objects/e9/52adad544dd7de01c452e34ff3633cc2eabc56","hash":"790d1e7981fafb5f6438eee9ae6ba3d71d16f8cd","modified":1501838561606},{"_id":"themes/next/.git/objects/ea/e4e6726207fad18d5a0144b35537bf5dc9bc7a","hash":"a0e11c9db3e4bd6b2f397a145e39fe3caf37e14f","modified":1501222808739},{"_id":"themes/next/.git/objects/eb/56a0638a3c0f336f8b5d3453bf986e16ca034e","hash":"6949739ebf330b7f363e7489ee819d82a62389ed","modified":1501222808737},{"_id":"themes/next/.git/objects/ec/57b0f60979d1c669ae37cee3f1d0ecaff183b3","hash":"f468cae223a03488f726d5091e55e9ab4523c87b","modified":1501838584847},{"_id":"themes/next/.git/objects/f0/9cd13387f0acee798dc0e5af7e2151e30f7434","hash":"24083b0119ef715debbfdccc92d6362cbbf7acfc","modified":1501222808733},{"_id":"themes/next/.git/objects/f2/6b05456630f4c633fe38ec6d7aaa5e06122045","hash":"208d168081afee124a441ceafb4ec8de273c1b01","modified":1501222808745},{"_id":"themes/next/.git/objects/fa/a22cf6930b81b9e87d542fc74a6da3080290a5","hash":"cb5078f8f285ac53b1b2773f9753307656b57232","modified":1501838561606},{"_id":"themes/next/.git/objects/ff/0b05175b96208e1c9ea3dd7ee0802ca68eae68","hash":"ff1792ac8631d33a41cdbe378eac6b504b58278e","modified":1501827066999},{"_id":"themes/next/.git/refs/heads/master","hash":"c27a3c52b97e8af9916f73b4a30f4d99b2d0ce6d","modified":1501838584847},{"_id":"themes/next/layout/_components/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1501212382150},{"_id":"themes/next/layout/_components/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1501212382151},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1501212382157},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1501212382157},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b6e4754498b5eeb470e11fd596227552d9070605","modified":1501212382159},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1501212382160},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1501212382160},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1501212382160},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1501212382161},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1501212382162},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1501212382161},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1501212382165},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1501212382164},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"8b34af99cb673853fd948c02d07eb11eb3fb41b4","modified":1501212382166},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"03d259066399c1eb4a436ea4e5e7a4802426d72c","modified":1501212382170},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"e495aed8fb36bf8015ddbd64366270a7debad2b0","modified":1501212382173},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"4a10634dba16ddf2a3cbd4908dfbc97e9aa45469","modified":1501212382174},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1501212382174},{"_id":"themes/next/layout/_scripts/third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1501212382174},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1501212382175},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1501212382210},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"531934ea21ef4dc9f0978512050f54834f0a6cff","modified":1501212382211},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"43339773eac5a78966176ea8b6125bdc2c7d1a3c","modified":1501220781775},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1501212382240},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"09534b68bd1a708729b3cfffe17737e3af457757","modified":1501212382241},{"_id":"themes/next/source/css/_variables/base.styl","hash":"bd667e7c648607497d03263f373677c5f6792417","modified":1501219775604},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1501212382255},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1501212382256},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0ec035e20d1f26bf553a79877180ba312bea885c","modified":1501212382256},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1501212382256},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1501212382298},{"_id":"themes/next/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1501212382300},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13d5396d2c5803cdd9732c727f5f2308b47368c","modified":1501212382302},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1501212382306},{"_id":"themes/next/source/js/src/utils.js","hash":"988f29f78e68fa184c4412b722f5895fa78a4783","modified":1501212382308},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1501212382311},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1501212382323},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1501212382324},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1501212382325},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1501212382343},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1501212382344},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1501212382345},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1501212382346},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1501212382367},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1501212382369},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1501212382369},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1501212382369},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1501212382370},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1501212382371},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1501212382371},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1501212382373},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1501212382373},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1501212382377},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1501212382376},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1501212382377},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1501212382349},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1501212382350},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1501212382351},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1501212382352},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1501212382352},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1501212382368},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"58e86ecbf943f4be19b2ea5e3945b97e613bac69","modified":1501838584847},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1501212382119},{"_id":"themes/next/.git/refs/remotes/origin/master","hash":"c27a3c52b97e8af9916f73b4a30f4d99b2d0ce6d","modified":1501838599397},{"_id":"themes/next/layout/_scripts/third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1501212382166},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1501212382167},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"24105e62d7f26946907fa14cd02589f899bf8122","modified":1501212382167},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1501212382168},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"a79e7e0d809fcf407593dd7ed9e023db21c3cbd6","modified":1501212382168},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1501212382168},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-mta.swig","hash":"e9a0590dafde1046356620dd2b81e83b6b3b0936","modified":1501212382169},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1501212382169},{"_id":"themes/next/layout/_scripts/third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1501212382170},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"e4a13e8cd19762ef3aea0e59dfae8b3c1f251f11","modified":1501212382171},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1501212382171},{"_id":"themes/next/layout/_scripts/third-party/comments/gentie.swig","hash":"0f38f053841ef77cdce56a84cfbb4dd4c3329486","modified":1501212382171},{"_id":"themes/next/layout/_scripts/third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1501212382172},{"_id":"themes/next/layout/_scripts/third-party/comments/livere.swig","hash":"5830a52c2a555d3a1f19b67d7bf3d072376cdea9","modified":1501212382172},{"_id":"themes/next/layout/_scripts/third-party/comments/youyan.swig","hash":"de95ec8920d1660680078451008f8bd69f14d082","modified":1501212382173},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4ba6f2a615693b9b5afc266d9c833697016085fd","modified":1501212382183},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"1dc2ed435e41ca041f43bd9633d5d95139afbb42","modified":1501212382184},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1501212382184},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1501212382185},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"96df3da77f217445b8b7e3b66025d41ca42b8398","modified":1501832707534},{"_id":"themes/next/source/css/_common/components/gitment.styl","hash":"854c4002af8a1fab99754ba9f552acc7cd7c4772","modified":1501832676793},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1501212382192},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1501212382200},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"4998bedff9c84a09a294b8ef36ede2e3644d3528","modified":1501212382207},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1501212382207},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1501212382208},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1501212382208},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1501212382209},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1501212382207},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1501212382212},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1501212382213},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1501212382212},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"ce272226a1570f5f7c70243b751a5b0fe1671a88","modified":1501212382214},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1501212382213},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1501212382214},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1501212382214},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1501212382216},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1501212382216},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"f23ac53ab901c48859dd29eee6e386b60ff956ba","modified":1501212382217},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1501212382235},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1501212382235},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1501212382236},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"fd8674eca737f4bb3b1ca66a3137f65922e2150a","modified":1501212382237},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1501212382237},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1501212382239},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"c48d4a561d047b3705924949b3ab7b57bee94ecd","modified":1501212382239},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1501212382239},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"c4358416f0a116d7f4037542fa3b385947e80908","modified":1501212382304},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1501212382326},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1501212382327},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1501212382328},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1501212382330},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1501212382331},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1501212382331},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1501212382339},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1501212382340},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1501212382341},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1501212382347},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1501212382348},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1501212382372},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1501212382372},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1501212382353},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1501212382354},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1501212382354},{"_id":"themes/next/.git/objects/pack/pack-5769433d92448aa4f6118fafdbc2eff2ec9f6c67.idx","hash":"94e8942b94e459b2d26a99c623c053c1a4fea257","modified":1501212381933},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1501212382375},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1501212382366},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1501212382367},{"_id":"source/img/2017-07-20/2017_07_20_8.png","hash":"85ebd0ba0e1b42a691eb228c49d68efeaff598c2","modified":1501211899123},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"cade32b29fd54b0f0b1eae6e3d34673131188195","modified":1501212382119},{"_id":"themes/next/.git/logs/refs/remotes/origin/master","hash":"6c11b016d7aec6fdd056c0b18c7d6d4f47db88d3","modified":1501838599397},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1501212382185},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1501212382186},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1501212382187},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1501212382187},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1501212382187},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1501212382188},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"d406a09af606be82f716c15e4ad597b7fdcf0728","modified":1501212382188},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1501212382189},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1501212382186},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1501212382190},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1501212382190},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1501212382190},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1501212382191},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1501212382191},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"4783f85872bc7e218c1522a5c1c68cd27a5922db","modified":1501212382192},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1501212382193},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a45f5fce643eec4e1b927165229d560364bcace1","modified":1501212382192},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"085fdd442eb5cefbe2622d005e51de05adbdf658","modified":1501219703971},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1501212382194},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"61ec8a8481e8b76f2943235256c6d4f89c751c1c","modified":1501212382194},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1501212382194},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1501212382195},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"8355b0e9375b3245508efda0e18acd069c2aa767","modified":1501212382195},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1501212382195},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1501212382196},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1501212382197},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1501212382197},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"8a50c98160b10f108e15984dbc76f601986f3c4e","modified":1501215250561},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"821991c0890966a512b43e8b1cf9537e738a09a0","modified":1501212382198},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1501212382198},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1501212382198},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"394888efec32749b353292a59ec7f1b609d6325e","modified":1501212382199},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"c9f76d4f6806ef70fa2160c97afa0a0e0ae5373e","modified":1501212382199},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"702be9e57dd6ff5fa99642a1f6e3df26215b8805","modified":1501212382199},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1501212382200},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1501212382201},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1501212382201},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"3159b55f35c40bd08e55b00148c523760a708c51","modified":1501212382201},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1501212382202},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"8420b4be386469337243336aee694297875bd439","modified":1501212382202},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"38c0db81a7361b947aeb8a4cc2919ffd9b33503e","modified":1501212382203},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1501212382203},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1501212382204},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1501212382204},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1501212382205},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1501212382205},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"6516b70ee9e44f1cf9443412cc31bcccb6cdb684","modified":1501212382206},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"cd526e814f9323a79fe835085d64867d34b3715d","modified":1501212382205},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"dc944a01dd59f5ed2d44bb22fdb21fc3f455948f","modified":1501212382206},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1501212382215},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1501212382215},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1501212382236},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1501212382333},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1501212382333},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1501212382336},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1501212382336},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1501212382338},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1501212382337},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1501212382357},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1501212382365},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1501212382359},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1501212382322},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1501212382363},{"_id":"themes/next/.git/objects/pack/pack-5769433d92448aa4f6118fafdbc2eff2ec9f6c67.pack","hash":"0c87e16d903a5cab8d2163ae22cc1e78b3399ffe","modified":1501212381977}],"Category":[{"name":"Others","_id":"cjadpus9f0004coxd47w0bx79"},{"name":"LeetCode","_id":"cjadpus9q0009coxdeya29tco"}],"Data":[],"Page":[{"title":"Categories","date":"2017-07-25T04:14:58.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: Categories\ndate: 2017-07-25 12:14:58\ntype: \"categories\"\ncomments: false\n---\n","updated":"2017-07-28T03:18:19.080Z","path":"categories/index.html","layout":"page","_id":"cjadpus9a0001coxdgm7zwsx5","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"All tags","date":"2017-07-24T03:08:42.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: All tags\ndate: 2017-07-24 11:08:42\ntype: \"tags\"\n---\n","updated":"2017-07-28T03:18:19.128Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjadpus9d0003coxd1k1u68r9","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"给Hexo添加Gitment评论插件","date":"2017-08-04T09:32:52.000Z","_content":"\n## 前言\n---\n\n今年六一略显不同，多说正式关闭服务, 蓝后，7月6号网易云跟帖也关了。在这个多事之秋。国内的评论系统纷纷倒闭。\n{% qnimg 2017-08-04/2017_08_04_1.png %}\n一直想给博客加个靠谱的评论系统，只能求助于谷歌，搜索一番之后，不经意间看到了，imsun实现的一款基于 GitHub Issues 的评论系统Gitment。\n`Gitment`是作者imsun实现的一款基于`GitHub Issues`的评论系统。 支持在前端直接引入, 不需要任何后端代码。 可以在页面进行登录、查看、评论、点赞等操作。同时有完整的 `Markdown / GFM` 和代码高亮支持，尤为适合各种基于 `GitHub Pages` 的静态博客或项目页面。\n本篇文章仅介绍在`hexo-NexT`中添加`Gitment`评论插件, 并且增加一个点开显示评论的按钮, 对于 Gitment 的使用请参考[imsun的博客][1]。\n\n## 一、注册github OAuth Application\n---\n\nGitment是使用的GitHub Issues作为评论系统，在接入Gitment前，需要获得GitHub的授权，获得相应的客户端id和客户端私钥，以备站点使用。具体步骤如下图所示：\n[OAuth application注册接入][2]： 在github主页头像->setting下面，填入相关信息如下\n{% qnimg 2017-08-04/2017_08_04_2.png %}\n注册完毕，得到owner、client_id、client_secret。\n{% qnimg 2017-08-04/2017_08_04_3.png %}\n\n\n## 二、添加 Gitment 插件\n---\n\n打开`/next/layout/_partials/comments.swig`文件, 在最后一个 elseif 代码块下面添加`Gitment`相关的内容。\n```\n{% elseif theme.changyan.appid and theme.changyan.appkey %}\n   <div id=\"SOHUCS\"></div>\n{% elseif theme.gitment.enable %}\n    <div onclick=\"showGitment()\" id=\"gitment_title\" class=\"gitment_title\">显示 Gitment 评论</div>\n    <div id=\"container\" style=\"display:none\"></div>\n    <link rel=\"stylesheet\" href=\"https://imsun.github.io/gitment/style/default.css\">\n    <script src=\"https://imsun.github.io/gitment/dist/gitment.browser.js\"></script>\n    <script>\n    const myTheme = {\n      render(state, instance) {\n        const container = document.createElement('div');\n        container.lang = \"en-US\";\n        container.className = 'gitment-container gitment-root-container';\n        container.appendChild(instance.renderHeader(state, instance));\n        container.appendChild(instance.renderEditor(state, instance));\n        container.appendChild(instance.renderComments(state, instance));\n        container.appendChild(instance.renderFooter(state, instance));\n        return container;\n      }\n    }\n\n    function showGitment() {\n      $(\"#gitment_title\").attr(\"style\", \"display:none\");\n      $(\"#container\").attr(\"style\", \"\").addClass(\"gitment_container\");\n      var gitment = new Gitment({\n        id: window.location.pathname,\n        theme: myTheme,\n        owner: '{{ theme.gitment.owner }}',\n        repo: '{{ theme.gitment.repo }}',\n        oauth: {\n          client_id: '{{ theme.gitment.client_id }}',\n          client_secret: '{{ theme.gitment.client_secret }}'\n        }\n      });\n      gitment.render('container');\n    }\n    </script>\n{% endif %}\n```\n然后打开`NexT`主题的`_config.yml`文件, 在评论区域添加以下代码：\n```\n# Gitment comments\ngitment:\n  enable: true\n  owner: xxxx #your github ID\n  repo: xxxx #the name of repo to store comments()\n  client_id: xxxx #your client ID\n  client_secret: xxxx #your client\n```\n我的配置信息如下：\n{% qnimg 2017-08-04/2017_08_04_4.png %}\n\n\n## 三、“显示 Gitment 评论” 的按钮样式\n---\n\n在 next/source/css/_common/components 目录中新建一个 gitment.styl 的 css 样式文件, 复制以下代码\n```\n.gitment_title:hover {\n    color: #fff;\n    background: #0a9caf;\n    background-image: initial;\n    background-position-x: initial;\n    background-position-y: initial;\n    background-size: initial;\n    background-repeat-x: initial;\n    background-repeat-y: initial;\n    background-attachment: initial;\n    background-origin: initial;\n    background-clip: initial;\n    background-color: rgb(10, 156, 175);\n}\n.gitment_title {\n    border: 1px solid #0a9caf;\n    border-top-color: rgb(10, 156, 175);\n    border-top-style: solid;\n    border-top-width: 1px;\n    border-right-color: rgb(10, 156, 175);\n    border-right-style: solid;\n    border-right-width: 1px;\n    border-bottom-color: rgb(10, 156, 175);\n    border-bottom-style: solid;\n    border-bottom-width: 1px;\n    border-left-color: rgb(10, 156, 175);\n    border-left-style: solid;\n    border-left-width: 1px;\n    border-image-source: initial;\n    border-image-slice: initial;\n    border-image-width: initial;\n    border-image-outset: initial;\n    border-image-repeat: initial;\n    border-radius: 4px;\n    border-top-left-radius: 4px;\n    border-top-right-radius: 4px;\n    border-bottom-right-radius: 4px;\n    border-bottom-left-radius: 4px;\n}\n.gitment_title {\n    display: inline-block;\n    padding: 0 15px;\n    padding-top: 0px;\n    padding-right: 15px;\n    padding-bottom: 0px;\n    padding-left: 15px;\n    color: #0a9caf;\n    cursor: pointer;\n    font-size: 14px;\n}\n```\n然后打开同目录中的 components.styl 文件, 找个顺眼的位置添加一句 \n```\n@import \"gitment\";\n```\n\n\n## 四、为每篇博文初始化评论系统\n---\n\n由于gitment的原理是为每一遍博文以其URL作为标识创建一个`github issue`，对该篇博客的评论就是对这个issue的评论。因此，我们需要为每篇博文初始化一下评论系统， 初始化后，你可以在你的github上会创建相对应的issue。\n前面的步骤完成，重新部署网站后，你就可以在你的博文页下面看到一个评论框，还有看到以下错误`Error: Comments Not Initialized`，提示该篇博文的评论系统还没初始化。\n- 点击**Login with GitHub**后，使用自己的github账号登录后， 就可以在上面错误信息处看到一个**Initialize Comments**的按钮。\n\t(注意: 由于要求回调URL和当前地址一样，故第2步不能在本地调试， 需把代码先上传部署到服务器以后再调试，即`hexo s`是看不到效果的，只有`hexo g && hexo d`才行)。\n- 点击**Initialize Comments**按钮后，就可以开始对该篇博文开始评论了， 同时也可以在对应的github仓库看到相应的issue。\n\t{% qnimg 2017-08-04/2017_08_04_5.png %}\n\n\n## 五、安装中遇到问题\n---\n\n- 获取对应数据ID\n\t在配置owner的时候，可以在浏览器中输入：`https://api.github.com/users/GitHub用户名`，来获取对应数据id。\n- 配置主题文件_config.yml时，格式错误，比如gitment前有空格也会造成代码生成问题。\n- `Error: Not Found`问题，repo库填写问题，详见[gitment issues 18][3]。\n\tNot Found问题，基本上是因为`NexT`主题的`_config.yml`文件里，配置信息不对。一般是Github ID填错，或者repo填错(git评论仓库的名称，不是git仓库地址)。\n- 其他问题，参见[作者项目的Issue][4]。\n\n\n## 四、后记\n---\n\n以下是自己搭建过程中查找的相关链接和信息，希望对大家有帮助。\n1. https://github.com/imsun/gitment\n2. https://imsun.net/posts/gitment-introduction/\n3. https://meesong.github.io/StaticBlog/2017/NexT+Gitment/\n4. https://zonghongyan.github.io/2017/06/29/201706292034/\n\n\n[1]: https://imsun.net/posts/gitment-introduction/\n[2]: https://github.com/settings/applications/new\n[3]: https://github.com/imsun/gitment/issues/18\n[4]: https://github.com/imsun/gitment/issues\n","source":"_posts/AddGitmentToNext.md","raw":"---\ntitle: 给Hexo添加Gitment评论插件\ndate: 2017-08-04 17:32:52\ncategories: Others\ntags:\n - Next\n - Hexo\n - Gitment\n---\n\n## 前言\n---\n\n今年六一略显不同，多说正式关闭服务, 蓝后，7月6号网易云跟帖也关了。在这个多事之秋。国内的评论系统纷纷倒闭。\n{% qnimg 2017-08-04/2017_08_04_1.png %}\n一直想给博客加个靠谱的评论系统，只能求助于谷歌，搜索一番之后，不经意间看到了，imsun实现的一款基于 GitHub Issues 的评论系统Gitment。\n`Gitment`是作者imsun实现的一款基于`GitHub Issues`的评论系统。 支持在前端直接引入, 不需要任何后端代码。 可以在页面进行登录、查看、评论、点赞等操作。同时有完整的 `Markdown / GFM` 和代码高亮支持，尤为适合各种基于 `GitHub Pages` 的静态博客或项目页面。\n本篇文章仅介绍在`hexo-NexT`中添加`Gitment`评论插件, 并且增加一个点开显示评论的按钮, 对于 Gitment 的使用请参考[imsun的博客][1]。\n\n## 一、注册github OAuth Application\n---\n\nGitment是使用的GitHub Issues作为评论系统，在接入Gitment前，需要获得GitHub的授权，获得相应的客户端id和客户端私钥，以备站点使用。具体步骤如下图所示：\n[OAuth application注册接入][2]： 在github主页头像->setting下面，填入相关信息如下\n{% qnimg 2017-08-04/2017_08_04_2.png %}\n注册完毕，得到owner、client_id、client_secret。\n{% qnimg 2017-08-04/2017_08_04_3.png %}\n\n\n## 二、添加 Gitment 插件\n---\n\n打开`/next/layout/_partials/comments.swig`文件, 在最后一个 elseif 代码块下面添加`Gitment`相关的内容。\n```\n{% elseif theme.changyan.appid and theme.changyan.appkey %}\n   <div id=\"SOHUCS\"></div>\n{% elseif theme.gitment.enable %}\n    <div onclick=\"showGitment()\" id=\"gitment_title\" class=\"gitment_title\">显示 Gitment 评论</div>\n    <div id=\"container\" style=\"display:none\"></div>\n    <link rel=\"stylesheet\" href=\"https://imsun.github.io/gitment/style/default.css\">\n    <script src=\"https://imsun.github.io/gitment/dist/gitment.browser.js\"></script>\n    <script>\n    const myTheme = {\n      render(state, instance) {\n        const container = document.createElement('div');\n        container.lang = \"en-US\";\n        container.className = 'gitment-container gitment-root-container';\n        container.appendChild(instance.renderHeader(state, instance));\n        container.appendChild(instance.renderEditor(state, instance));\n        container.appendChild(instance.renderComments(state, instance));\n        container.appendChild(instance.renderFooter(state, instance));\n        return container;\n      }\n    }\n\n    function showGitment() {\n      $(\"#gitment_title\").attr(\"style\", \"display:none\");\n      $(\"#container\").attr(\"style\", \"\").addClass(\"gitment_container\");\n      var gitment = new Gitment({\n        id: window.location.pathname,\n        theme: myTheme,\n        owner: '{{ theme.gitment.owner }}',\n        repo: '{{ theme.gitment.repo }}',\n        oauth: {\n          client_id: '{{ theme.gitment.client_id }}',\n          client_secret: '{{ theme.gitment.client_secret }}'\n        }\n      });\n      gitment.render('container');\n    }\n    </script>\n{% endif %}\n```\n然后打开`NexT`主题的`_config.yml`文件, 在评论区域添加以下代码：\n```\n# Gitment comments\ngitment:\n  enable: true\n  owner: xxxx #your github ID\n  repo: xxxx #the name of repo to store comments()\n  client_id: xxxx #your client ID\n  client_secret: xxxx #your client\n```\n我的配置信息如下：\n{% qnimg 2017-08-04/2017_08_04_4.png %}\n\n\n## 三、“显示 Gitment 评论” 的按钮样式\n---\n\n在 next/source/css/_common/components 目录中新建一个 gitment.styl 的 css 样式文件, 复制以下代码\n```\n.gitment_title:hover {\n    color: #fff;\n    background: #0a9caf;\n    background-image: initial;\n    background-position-x: initial;\n    background-position-y: initial;\n    background-size: initial;\n    background-repeat-x: initial;\n    background-repeat-y: initial;\n    background-attachment: initial;\n    background-origin: initial;\n    background-clip: initial;\n    background-color: rgb(10, 156, 175);\n}\n.gitment_title {\n    border: 1px solid #0a9caf;\n    border-top-color: rgb(10, 156, 175);\n    border-top-style: solid;\n    border-top-width: 1px;\n    border-right-color: rgb(10, 156, 175);\n    border-right-style: solid;\n    border-right-width: 1px;\n    border-bottom-color: rgb(10, 156, 175);\n    border-bottom-style: solid;\n    border-bottom-width: 1px;\n    border-left-color: rgb(10, 156, 175);\n    border-left-style: solid;\n    border-left-width: 1px;\n    border-image-source: initial;\n    border-image-slice: initial;\n    border-image-width: initial;\n    border-image-outset: initial;\n    border-image-repeat: initial;\n    border-radius: 4px;\n    border-top-left-radius: 4px;\n    border-top-right-radius: 4px;\n    border-bottom-right-radius: 4px;\n    border-bottom-left-radius: 4px;\n}\n.gitment_title {\n    display: inline-block;\n    padding: 0 15px;\n    padding-top: 0px;\n    padding-right: 15px;\n    padding-bottom: 0px;\n    padding-left: 15px;\n    color: #0a9caf;\n    cursor: pointer;\n    font-size: 14px;\n}\n```\n然后打开同目录中的 components.styl 文件, 找个顺眼的位置添加一句 \n```\n@import \"gitment\";\n```\n\n\n## 四、为每篇博文初始化评论系统\n---\n\n由于gitment的原理是为每一遍博文以其URL作为标识创建一个`github issue`，对该篇博客的评论就是对这个issue的评论。因此，我们需要为每篇博文初始化一下评论系统， 初始化后，你可以在你的github上会创建相对应的issue。\n前面的步骤完成，重新部署网站后，你就可以在你的博文页下面看到一个评论框，还有看到以下错误`Error: Comments Not Initialized`，提示该篇博文的评论系统还没初始化。\n- 点击**Login with GitHub**后，使用自己的github账号登录后， 就可以在上面错误信息处看到一个**Initialize Comments**的按钮。\n\t(注意: 由于要求回调URL和当前地址一样，故第2步不能在本地调试， 需把代码先上传部署到服务器以后再调试，即`hexo s`是看不到效果的，只有`hexo g && hexo d`才行)。\n- 点击**Initialize Comments**按钮后，就可以开始对该篇博文开始评论了， 同时也可以在对应的github仓库看到相应的issue。\n\t{% qnimg 2017-08-04/2017_08_04_5.png %}\n\n\n## 五、安装中遇到问题\n---\n\n- 获取对应数据ID\n\t在配置owner的时候，可以在浏览器中输入：`https://api.github.com/users/GitHub用户名`，来获取对应数据id。\n- 配置主题文件_config.yml时，格式错误，比如gitment前有空格也会造成代码生成问题。\n- `Error: Not Found`问题，repo库填写问题，详见[gitment issues 18][3]。\n\tNot Found问题，基本上是因为`NexT`主题的`_config.yml`文件里，配置信息不对。一般是Github ID填错，或者repo填错(git评论仓库的名称，不是git仓库地址)。\n- 其他问题，参见[作者项目的Issue][4]。\n\n\n## 四、后记\n---\n\n以下是自己搭建过程中查找的相关链接和信息，希望对大家有帮助。\n1. https://github.com/imsun/gitment\n2. https://imsun.net/posts/gitment-introduction/\n3. https://meesong.github.io/StaticBlog/2017/NexT+Gitment/\n4. https://zonghongyan.github.io/2017/06/29/201706292034/\n\n\n[1]: https://imsun.net/posts/gitment-introduction/\n[2]: https://github.com/settings/applications/new\n[3]: https://github.com/imsun/gitment/issues/18\n[4]: https://github.com/imsun/gitment/issues\n","slug":"AddGitmentToNext","published":1,"updated":"2017-08-07T03:35:51.907Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjadpus8y0000coxd2furoc11","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><hr>\n<p>今年六一略显不同，多说正式关闭服务, 蓝后，7月6号网易云跟帖也关了。在这个多事之秋。国内的评论系统纷纷倒闭。<br><img src=\"http://otqlqfy9h.bkt.clouddn.com/images/2017-08-04/2017_08_04_1.png\"><br>一直想给博客加个靠谱的评论系统，只能求助于谷歌，搜索一番之后，不经意间看到了，imsun实现的一款基于 GitHub Issues 的评论系统Gitment。<br><code>Gitment</code>是作者imsun实现的一款基于<code>GitHub Issues</code>的评论系统。 支持在前端直接引入, 不需要任何后端代码。 可以在页面进行登录、查看、评论、点赞等操作。同时有完整的 <code>Markdown / GFM</code> 和代码高亮支持，尤为适合各种基于 <code>GitHub Pages</code> 的静态博客或项目页面。<br>本篇文章仅介绍在<code>hexo-NexT</code>中添加<code>Gitment</code>评论插件, 并且增加一个点开显示评论的按钮, 对于 Gitment 的使用请参考<a href=\"https://imsun.net/posts/gitment-introduction/\" target=\"_blank\" rel=\"external\">imsun的博客</a>。</p>\n<h2 id=\"一、注册github-OAuth-Application\"><a href=\"#一、注册github-OAuth-Application\" class=\"headerlink\" title=\"一、注册github OAuth Application\"></a>一、注册github OAuth Application</h2><hr>\n<p>Gitment是使用的GitHub Issues作为评论系统，在接入Gitment前，需要获得GitHub的授权，获得相应的客户端id和客户端私钥，以备站点使用。具体步骤如下图所示：<br><a href=\"https://github.com/settings/applications/new\" target=\"_blank\" rel=\"external\">OAuth application注册接入</a>： 在github主页头像-&gt;setting下面，填入相关信息如下<br><img src=\"http://otqlqfy9h.bkt.clouddn.com/images/2017-08-04/2017_08_04_2.png\"><br>注册完毕，得到owner、client_id、client_secret。<br><img src=\"http://otqlqfy9h.bkt.clouddn.com/images/2017-08-04/2017_08_04_3.png\"></p>\n<h2 id=\"二、添加-Gitment-插件\"><a href=\"#二、添加-Gitment-插件\" class=\"headerlink\" title=\"二、添加 Gitment 插件\"></a>二、添加 Gitment 插件</h2><hr>\n<p>打开<code>/next/layout/_partials/comments.swig</code>文件, 在最后一个 elseif 代码块下面添加<code>Gitment</code>相关的内容。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;% elseif theme.changyan.appid and theme.changyan.appkey %&#125;</div><div class=\"line\">   &lt;div id=&quot;SOHUCS&quot;&gt;&lt;/div&gt;</div><div class=\"line\">&#123;% elseif theme.gitment.enable %&#125;</div><div class=\"line\">    &lt;div onclick=&quot;showGitment()&quot; id=&quot;gitment_title&quot; class=&quot;gitment_title&quot;&gt;显示 Gitment 评论&lt;/div&gt;</div><div class=\"line\">    &lt;div id=&quot;container&quot; style=&quot;display:none&quot;&gt;&lt;/div&gt;</div><div class=\"line\">    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://imsun.github.io/gitment/style/default.css&quot;&gt;</div><div class=\"line\">    &lt;script src=&quot;https://imsun.github.io/gitment/dist/gitment.browser.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script&gt;</div><div class=\"line\">    const myTheme = &#123;</div><div class=\"line\">      render(state, instance) &#123;</div><div class=\"line\">        const container = document.createElement(&apos;div&apos;);</div><div class=\"line\">        container.lang = &quot;en-US&quot;;</div><div class=\"line\">        container.className = &apos;gitment-container gitment-root-container&apos;;</div><div class=\"line\">        container.appendChild(instance.renderHeader(state, instance));</div><div class=\"line\">        container.appendChild(instance.renderEditor(state, instance));</div><div class=\"line\">        container.appendChild(instance.renderComments(state, instance));</div><div class=\"line\">        container.appendChild(instance.renderFooter(state, instance));</div><div class=\"line\">        return container;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    function showGitment() &#123;</div><div class=\"line\">      $(&quot;#gitment_title&quot;).attr(&quot;style&quot;, &quot;display:none&quot;);</div><div class=\"line\">      $(&quot;#container&quot;).attr(&quot;style&quot;, &quot;&quot;).addClass(&quot;gitment_container&quot;);</div><div class=\"line\">      var gitment = new Gitment(&#123;</div><div class=\"line\">        id: window.location.pathname,</div><div class=\"line\">        theme: myTheme,</div><div class=\"line\">        owner: &apos;&#123;&#123; theme.gitment.owner &#125;&#125;&apos;,</div><div class=\"line\">        repo: &apos;&#123;&#123; theme.gitment.repo &#125;&#125;&apos;,</div><div class=\"line\">        oauth: &#123;</div><div class=\"line\">          client_id: &apos;&#123;&#123; theme.gitment.client_id &#125;&#125;&apos;,</div><div class=\"line\">          client_secret: &apos;&#123;&#123; theme.gitment.client_secret &#125;&#125;&apos;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;);</div><div class=\"line\">      gitment.render(&apos;container&apos;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    &lt;/script&gt;</div><div class=\"line\">&#123;% endif %&#125;</div></pre></td></tr></table></figure></p>\n<p>然后打开<code>NexT</code>主题的<code>_config.yml</code>文件, 在评论区域添加以下代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Gitment comments</div><div class=\"line\">gitment:</div><div class=\"line\">  enable: true</div><div class=\"line\">  owner: xxxx #your github ID</div><div class=\"line\">  repo: xxxx #the name of repo to store comments()</div><div class=\"line\">  client_id: xxxx #your client ID</div><div class=\"line\">  client_secret: xxxx #your client</div></pre></td></tr></table></figure></p>\n<p>我的配置信息如下：<br><img src=\"http://otqlqfy9h.bkt.clouddn.com/images/2017-08-04/2017_08_04_4.png\"></p>\n<h2 id=\"三、“显示-Gitment-评论”-的按钮样式\"><a href=\"#三、“显示-Gitment-评论”-的按钮样式\" class=\"headerlink\" title=\"三、“显示 Gitment 评论” 的按钮样式\"></a>三、“显示 Gitment 评论” 的按钮样式</h2><hr>\n<p>在 next/source/css/_common/components 目录中新建一个 gitment.styl 的 css 样式文件, 复制以下代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\">.gitment_title:hover &#123;</div><div class=\"line\">    color: #fff;</div><div class=\"line\">    background: #0a9caf;</div><div class=\"line\">    background-image: initial;</div><div class=\"line\">    background-position-x: initial;</div><div class=\"line\">    background-position-y: initial;</div><div class=\"line\">    background-size: initial;</div><div class=\"line\">    background-repeat-x: initial;</div><div class=\"line\">    background-repeat-y: initial;</div><div class=\"line\">    background-attachment: initial;</div><div class=\"line\">    background-origin: initial;</div><div class=\"line\">    background-clip: initial;</div><div class=\"line\">    background-color: rgb(10, 156, 175);</div><div class=\"line\">&#125;</div><div class=\"line\">.gitment_title &#123;</div><div class=\"line\">    border: 1px solid #0a9caf;</div><div class=\"line\">    border-top-color: rgb(10, 156, 175);</div><div class=\"line\">    border-top-style: solid;</div><div class=\"line\">    border-top-width: 1px;</div><div class=\"line\">    border-right-color: rgb(10, 156, 175);</div><div class=\"line\">    border-right-style: solid;</div><div class=\"line\">    border-right-width: 1px;</div><div class=\"line\">    border-bottom-color: rgb(10, 156, 175);</div><div class=\"line\">    border-bottom-style: solid;</div><div class=\"line\">    border-bottom-width: 1px;</div><div class=\"line\">    border-left-color: rgb(10, 156, 175);</div><div class=\"line\">    border-left-style: solid;</div><div class=\"line\">    border-left-width: 1px;</div><div class=\"line\">    border-image-source: initial;</div><div class=\"line\">    border-image-slice: initial;</div><div class=\"line\">    border-image-width: initial;</div><div class=\"line\">    border-image-outset: initial;</div><div class=\"line\">    border-image-repeat: initial;</div><div class=\"line\">    border-radius: 4px;</div><div class=\"line\">    border-top-left-radius: 4px;</div><div class=\"line\">    border-top-right-radius: 4px;</div><div class=\"line\">    border-bottom-right-radius: 4px;</div><div class=\"line\">    border-bottom-left-radius: 4px;</div><div class=\"line\">&#125;</div><div class=\"line\">.gitment_title &#123;</div><div class=\"line\">    display: inline-block;</div><div class=\"line\">    padding: 0 15px;</div><div class=\"line\">    padding-top: 0px;</div><div class=\"line\">    padding-right: 15px;</div><div class=\"line\">    padding-bottom: 0px;</div><div class=\"line\">    padding-left: 15px;</div><div class=\"line\">    color: #0a9caf;</div><div class=\"line\">    cursor: pointer;</div><div class=\"line\">    font-size: 14px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>然后打开同目录中的 components.styl 文件, 找个顺眼的位置添加一句<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">@import &quot;gitment&quot;;</div></pre></td></tr></table></figure></p>\n<h2 id=\"四、为每篇博文初始化评论系统\"><a href=\"#四、为每篇博文初始化评论系统\" class=\"headerlink\" title=\"四、为每篇博文初始化评论系统\"></a>四、为每篇博文初始化评论系统</h2><hr>\n<p>由于gitment的原理是为每一遍博文以其URL作为标识创建一个<code>github issue</code>，对该篇博客的评论就是对这个issue的评论。因此，我们需要为每篇博文初始化一下评论系统， 初始化后，你可以在你的github上会创建相对应的issue。<br>前面的步骤完成，重新部署网站后，你就可以在你的博文页下面看到一个评论框，还有看到以下错误<code>Error: Comments Not Initialized</code>，提示该篇博文的评论系统还没初始化。</p>\n<ul>\n<li>点击<strong>Login with GitHub</strong>后，使用自己的github账号登录后， 就可以在上面错误信息处看到一个<strong>Initialize Comments</strong>的按钮。<br>  (注意: 由于要求回调URL和当前地址一样，故第2步不能在本地调试， 需把代码先上传部署到服务器以后再调试，即<code>hexo s</code>是看不到效果的，只有<code>hexo g &amp;&amp; hexo d</code>才行)。</li>\n<li>点击<strong>Initialize Comments</strong>按钮后，就可以开始对该篇博文开始评论了， 同时也可以在对应的github仓库看到相应的issue。  <img src=\"http://otqlqfy9h.bkt.clouddn.com/images/2017-08-04/2017_08_04_5.png\">\n</li>\n</ul>\n<h2 id=\"五、安装中遇到问题\"><a href=\"#五、安装中遇到问题\" class=\"headerlink\" title=\"五、安装中遇到问题\"></a>五、安装中遇到问题</h2><hr>\n<ul>\n<li>获取对应数据ID<br>  在配置owner的时候，可以在浏览器中输入：<code>https://api.github.com/users/GitHub用户名</code>，来获取对应数据id。</li>\n<li>配置主题文件_config.yml时，格式错误，比如gitment前有空格也会造成代码生成问题。</li>\n<li><code>Error: Not Found</code>问题，repo库填写问题，详见<a href=\"https://github.com/imsun/gitment/issues/18\" target=\"_blank\" rel=\"external\">gitment issues 18</a>。<br>  Not Found问题，基本上是因为<code>NexT</code>主题的<code>_config.yml</code>文件里，配置信息不对。一般是Github ID填错，或者repo填错(git评论仓库的名称，不是git仓库地址)。</li>\n<li>其他问题，参见<a href=\"https://github.com/imsun/gitment/issues\" target=\"_blank\" rel=\"external\">作者项目的Issue</a>。</li>\n</ul>\n<h2 id=\"四、后记\"><a href=\"#四、后记\" class=\"headerlink\" title=\"四、后记\"></a>四、后记</h2><hr>\n<p>以下是自己搭建过程中查找的相关链接和信息，希望对大家有帮助。</p>\n<ol>\n<li><a href=\"https://github.com/imsun/gitment\" target=\"_blank\" rel=\"external\">https://github.com/imsun/gitment</a></li>\n<li><a href=\"https://imsun.net/posts/gitment-introduction/\" target=\"_blank\" rel=\"external\">https://imsun.net/posts/gitment-introduction/</a></li>\n<li><a href=\"https://meesong.github.io/StaticBlog/2017/NexT+Gitment/\" target=\"_blank\" rel=\"external\">https://meesong.github.io/StaticBlog/2017/NexT+Gitment/</a></li>\n<li><a href=\"https://zonghongyan.github.io/2017/06/29/201706292034/\" target=\"_blank\" rel=\"external\">https://zonghongyan.github.io/2017/06/29/201706292034/</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><hr>\n<p>今年六一略显不同，多说正式关闭服务, 蓝后，7月6号网易云跟帖也关了。在这个多事之秋。国内的评论系统纷纷倒闭。<br><img src=\"http://otqlqfy9h.bkt.clouddn.com/images/2017-08-04/2017_08_04_1.png\"><br>一直想给博客加个靠谱的评论系统，只能求助于谷歌，搜索一番之后，不经意间看到了，imsun实现的一款基于 GitHub Issues 的评论系统Gitment。<br><code>Gitment</code>是作者imsun实现的一款基于<code>GitHub Issues</code>的评论系统。 支持在前端直接引入, 不需要任何后端代码。 可以在页面进行登录、查看、评论、点赞等操作。同时有完整的 <code>Markdown / GFM</code> 和代码高亮支持，尤为适合各种基于 <code>GitHub Pages</code> 的静态博客或项目页面。<br>本篇文章仅介绍在<code>hexo-NexT</code>中添加<code>Gitment</code>评论插件, 并且增加一个点开显示评论的按钮, 对于 Gitment 的使用请参考<a href=\"https://imsun.net/posts/gitment-introduction/\" target=\"_blank\" rel=\"external\">imsun的博客</a>。</p>\n<h2 id=\"一、注册github-OAuth-Application\"><a href=\"#一、注册github-OAuth-Application\" class=\"headerlink\" title=\"一、注册github OAuth Application\"></a>一、注册github OAuth Application</h2><hr>\n<p>Gitment是使用的GitHub Issues作为评论系统，在接入Gitment前，需要获得GitHub的授权，获得相应的客户端id和客户端私钥，以备站点使用。具体步骤如下图所示：<br><a href=\"https://github.com/settings/applications/new\" target=\"_blank\" rel=\"external\">OAuth application注册接入</a>： 在github主页头像-&gt;setting下面，填入相关信息如下<br><img src=\"http://otqlqfy9h.bkt.clouddn.com/images/2017-08-04/2017_08_04_2.png\"><br>注册完毕，得到owner、client_id、client_secret。<br><img src=\"http://otqlqfy9h.bkt.clouddn.com/images/2017-08-04/2017_08_04_3.png\"></p>\n<h2 id=\"二、添加-Gitment-插件\"><a href=\"#二、添加-Gitment-插件\" class=\"headerlink\" title=\"二、添加 Gitment 插件\"></a>二、添加 Gitment 插件</h2><hr>\n<p>打开<code>/next/layout/_partials/comments.swig</code>文件, 在最后一个 elseif 代码块下面添加<code>Gitment</code>相关的内容。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;% elseif theme.changyan.appid and theme.changyan.appkey %&#125;</div><div class=\"line\">   &lt;div id=&quot;SOHUCS&quot;&gt;&lt;/div&gt;</div><div class=\"line\">&#123;% elseif theme.gitment.enable %&#125;</div><div class=\"line\">    &lt;div onclick=&quot;showGitment()&quot; id=&quot;gitment_title&quot; class=&quot;gitment_title&quot;&gt;显示 Gitment 评论&lt;/div&gt;</div><div class=\"line\">    &lt;div id=&quot;container&quot; style=&quot;display:none&quot;&gt;&lt;/div&gt;</div><div class=\"line\">    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://imsun.github.io/gitment/style/default.css&quot;&gt;</div><div class=\"line\">    &lt;script src=&quot;https://imsun.github.io/gitment/dist/gitment.browser.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script&gt;</div><div class=\"line\">    const myTheme = &#123;</div><div class=\"line\">      render(state, instance) &#123;</div><div class=\"line\">        const container = document.createElement(&apos;div&apos;);</div><div class=\"line\">        container.lang = &quot;en-US&quot;;</div><div class=\"line\">        container.className = &apos;gitment-container gitment-root-container&apos;;</div><div class=\"line\">        container.appendChild(instance.renderHeader(state, instance));</div><div class=\"line\">        container.appendChild(instance.renderEditor(state, instance));</div><div class=\"line\">        container.appendChild(instance.renderComments(state, instance));</div><div class=\"line\">        container.appendChild(instance.renderFooter(state, instance));</div><div class=\"line\">        return container;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    function showGitment() &#123;</div><div class=\"line\">      $(&quot;#gitment_title&quot;).attr(&quot;style&quot;, &quot;display:none&quot;);</div><div class=\"line\">      $(&quot;#container&quot;).attr(&quot;style&quot;, &quot;&quot;).addClass(&quot;gitment_container&quot;);</div><div class=\"line\">      var gitment = new Gitment(&#123;</div><div class=\"line\">        id: window.location.pathname,</div><div class=\"line\">        theme: myTheme,</div><div class=\"line\">        owner: &apos;&#123;&#123; theme.gitment.owner &#125;&#125;&apos;,</div><div class=\"line\">        repo: &apos;&#123;&#123; theme.gitment.repo &#125;&#125;&apos;,</div><div class=\"line\">        oauth: &#123;</div><div class=\"line\">          client_id: &apos;&#123;&#123; theme.gitment.client_id &#125;&#125;&apos;,</div><div class=\"line\">          client_secret: &apos;&#123;&#123; theme.gitment.client_secret &#125;&#125;&apos;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;);</div><div class=\"line\">      gitment.render(&apos;container&apos;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    &lt;/script&gt;</div><div class=\"line\">&#123;% endif %&#125;</div></pre></td></tr></table></figure></p>\n<p>然后打开<code>NexT</code>主题的<code>_config.yml</code>文件, 在评论区域添加以下代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Gitment comments</div><div class=\"line\">gitment:</div><div class=\"line\">  enable: true</div><div class=\"line\">  owner: xxxx #your github ID</div><div class=\"line\">  repo: xxxx #the name of repo to store comments()</div><div class=\"line\">  client_id: xxxx #your client ID</div><div class=\"line\">  client_secret: xxxx #your client</div></pre></td></tr></table></figure></p>\n<p>我的配置信息如下：<br><img src=\"http://otqlqfy9h.bkt.clouddn.com/images/2017-08-04/2017_08_04_4.png\"></p>\n<h2 id=\"三、“显示-Gitment-评论”-的按钮样式\"><a href=\"#三、“显示-Gitment-评论”-的按钮样式\" class=\"headerlink\" title=\"三、“显示 Gitment 评论” 的按钮样式\"></a>三、“显示 Gitment 评论” 的按钮样式</h2><hr>\n<p>在 next/source/css/_common/components 目录中新建一个 gitment.styl 的 css 样式文件, 复制以下代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\">.gitment_title:hover &#123;</div><div class=\"line\">    color: #fff;</div><div class=\"line\">    background: #0a9caf;</div><div class=\"line\">    background-image: initial;</div><div class=\"line\">    background-position-x: initial;</div><div class=\"line\">    background-position-y: initial;</div><div class=\"line\">    background-size: initial;</div><div class=\"line\">    background-repeat-x: initial;</div><div class=\"line\">    background-repeat-y: initial;</div><div class=\"line\">    background-attachment: initial;</div><div class=\"line\">    background-origin: initial;</div><div class=\"line\">    background-clip: initial;</div><div class=\"line\">    background-color: rgb(10, 156, 175);</div><div class=\"line\">&#125;</div><div class=\"line\">.gitment_title &#123;</div><div class=\"line\">    border: 1px solid #0a9caf;</div><div class=\"line\">    border-top-color: rgb(10, 156, 175);</div><div class=\"line\">    border-top-style: solid;</div><div class=\"line\">    border-top-width: 1px;</div><div class=\"line\">    border-right-color: rgb(10, 156, 175);</div><div class=\"line\">    border-right-style: solid;</div><div class=\"line\">    border-right-width: 1px;</div><div class=\"line\">    border-bottom-color: rgb(10, 156, 175);</div><div class=\"line\">    border-bottom-style: solid;</div><div class=\"line\">    border-bottom-width: 1px;</div><div class=\"line\">    border-left-color: rgb(10, 156, 175);</div><div class=\"line\">    border-left-style: solid;</div><div class=\"line\">    border-left-width: 1px;</div><div class=\"line\">    border-image-source: initial;</div><div class=\"line\">    border-image-slice: initial;</div><div class=\"line\">    border-image-width: initial;</div><div class=\"line\">    border-image-outset: initial;</div><div class=\"line\">    border-image-repeat: initial;</div><div class=\"line\">    border-radius: 4px;</div><div class=\"line\">    border-top-left-radius: 4px;</div><div class=\"line\">    border-top-right-radius: 4px;</div><div class=\"line\">    border-bottom-right-radius: 4px;</div><div class=\"line\">    border-bottom-left-radius: 4px;</div><div class=\"line\">&#125;</div><div class=\"line\">.gitment_title &#123;</div><div class=\"line\">    display: inline-block;</div><div class=\"line\">    padding: 0 15px;</div><div class=\"line\">    padding-top: 0px;</div><div class=\"line\">    padding-right: 15px;</div><div class=\"line\">    padding-bottom: 0px;</div><div class=\"line\">    padding-left: 15px;</div><div class=\"line\">    color: #0a9caf;</div><div class=\"line\">    cursor: pointer;</div><div class=\"line\">    font-size: 14px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>然后打开同目录中的 components.styl 文件, 找个顺眼的位置添加一句<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">@import &quot;gitment&quot;;</div></pre></td></tr></table></figure></p>\n<h2 id=\"四、为每篇博文初始化评论系统\"><a href=\"#四、为每篇博文初始化评论系统\" class=\"headerlink\" title=\"四、为每篇博文初始化评论系统\"></a>四、为每篇博文初始化评论系统</h2><hr>\n<p>由于gitment的原理是为每一遍博文以其URL作为标识创建一个<code>github issue</code>，对该篇博客的评论就是对这个issue的评论。因此，我们需要为每篇博文初始化一下评论系统， 初始化后，你可以在你的github上会创建相对应的issue。<br>前面的步骤完成，重新部署网站后，你就可以在你的博文页下面看到一个评论框，还有看到以下错误<code>Error: Comments Not Initialized</code>，提示该篇博文的评论系统还没初始化。</p>\n<ul>\n<li>点击<strong>Login with GitHub</strong>后，使用自己的github账号登录后， 就可以在上面错误信息处看到一个<strong>Initialize Comments</strong>的按钮。<br>  (注意: 由于要求回调URL和当前地址一样，故第2步不能在本地调试， 需把代码先上传部署到服务器以后再调试，即<code>hexo s</code>是看不到效果的，只有<code>hexo g &amp;&amp; hexo d</code>才行)。</li>\n<li>点击<strong>Initialize Comments</strong>按钮后，就可以开始对该篇博文开始评论了， 同时也可以在对应的github仓库看到相应的issue。  <img src=\"http://otqlqfy9h.bkt.clouddn.com/images/2017-08-04/2017_08_04_5.png\">\n</li>\n</ul>\n<h2 id=\"五、安装中遇到问题\"><a href=\"#五、安装中遇到问题\" class=\"headerlink\" title=\"五、安装中遇到问题\"></a>五、安装中遇到问题</h2><hr>\n<ul>\n<li>获取对应数据ID<br>  在配置owner的时候，可以在浏览器中输入：<code>https://api.github.com/users/GitHub用户名</code>，来获取对应数据id。</li>\n<li>配置主题文件_config.yml时，格式错误，比如gitment前有空格也会造成代码生成问题。</li>\n<li><code>Error: Not Found</code>问题，repo库填写问题，详见<a href=\"https://github.com/imsun/gitment/issues/18\" target=\"_blank\" rel=\"external\">gitment issues 18</a>。<br>  Not Found问题，基本上是因为<code>NexT</code>主题的<code>_config.yml</code>文件里，配置信息不对。一般是Github ID填错，或者repo填错(git评论仓库的名称，不是git仓库地址)。</li>\n<li>其他问题，参见<a href=\"https://github.com/imsun/gitment/issues\" target=\"_blank\" rel=\"external\">作者项目的Issue</a>。</li>\n</ul>\n<h2 id=\"四、后记\"><a href=\"#四、后记\" class=\"headerlink\" title=\"四、后记\"></a>四、后记</h2><hr>\n<p>以下是自己搭建过程中查找的相关链接和信息，希望对大家有帮助。</p>\n<ol>\n<li><a href=\"https://github.com/imsun/gitment\" target=\"_blank\" rel=\"external\">https://github.com/imsun/gitment</a></li>\n<li><a href=\"https://imsun.net/posts/gitment-introduction/\" target=\"_blank\" rel=\"external\">https://imsun.net/posts/gitment-introduction/</a></li>\n<li><a href=\"https://meesong.github.io/StaticBlog/2017/NexT+Gitment/\" target=\"_blank\" rel=\"external\">https://meesong.github.io/StaticBlog/2017/NexT+Gitment/</a></li>\n<li><a href=\"https://zonghongyan.github.io/2017/06/29/201706292034/\" target=\"_blank\" rel=\"external\">https://zonghongyan.github.io/2017/06/29/201706292034/</a></li>\n</ol>\n"},{"title":"First Blood","date":"2017-03-01T08:45:41.000Z","_content":"\n沧海一声啸 缥缈云海间","source":"_posts/First-Blood.md","raw":"---\ntitle: First Blood\ndate: 2017-03-01 16:45:41\ncategories:\ntags:\n---\n\n沧海一声啸 缥缈云海间","slug":"First-Blood","published":1,"updated":"2017-07-28T03:18:19.079Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjadpus9c0002coxd3bv4uq7j","content":"<p>沧海一声啸 缥缈云海间</p>\n","site":{"data":{}},"excerpt":"","more":"<p>沧海一声啸 缥缈云海间</p>\n"},{"title":"LeetCode 121. Best Time to Buy and Sell Stock","date":"2017-11-23T04:11:53.000Z","_content":"\n## [题目描述][1]：\nSay you have an array for which the ith element is the price of a given stock on day i.\nIf you were only permitted to complete at most one transaction (ie, buy one and sell one share of the stock), design an algorithm to find the maximum profit.\n\n**Example 1:**\n```\nInput: [7, 1, 5, 3, 6, 4]\nOutput: 5\n\nmax. difference = 6-1 = 5 (not 7-1 = 6, as selling price needs to be larger than buying price)\n```\n**Example 2:**\n```\nInput: [7, 6, 4, 3, 1]\nOutput: 0\n\nIn this case, no transaction is done, i.e. max profit = 0.\n```\n\n## 题目大意：\n给一个数组prices[]，prices[i]代表股票在第i天的售价，求出只做一次交易(一次买入和卖出)能得到的最大收益。 \n\n### 解题思路1：\n---\nBrute & Force（直观做法）: 两个循环，逐一找到每两个元素的差值，取最大的即为为maxProfit，时间复杂度O(n^2)\n\n**C++代码：**\n``` c++\nclass Solution {\npublic:\n    int maxProfit(vector<int>& prices)\n    {\n        int maxProfit = 0;\n        for (int i = 0; i < prices.size(); i++) {\n            for (int j = i + 1; j < prices.size(); j++) {\n                if (0 < prices[j] - prices[i])\n                    maxProfit = max(prices[j] - prices[i], maxProfit);\n            }\n        }\n        return maxProfit;\n    }\n};\n```\n\n**代码分析：**\n    1. 遍历数组，找到MaxProfit（效率较低）\n    2. 保证每一次比较的差值都是正值即可\n\n### 解题思路2：\n---\n根据题目意思，只需要找出一次交易的最大的差值。对于此题就是要找到最小值（下限）和最大值（上限）。\n只要能固定住其中之一，就可以通过一次遍历，时间复杂度O(n)，找到maxProfit.\n参考LeetCode Discuss：\nhttps://discuss.leetcode.com/topic/5863/sharing-my-simple-and-clear-c-solution/2\nhttps://discuss.leetcode.com/topic/2763/a-o-1-n-solution\n\n**C++代码：**\n``` c++\nclass Solution {\npublic:\n    int maxProfit(vector<int>& prices)\n    {\n        int maxProfit = 0;\n        int minPrice = INT_MAX;\n        for (int i = 0; i < prices.size(); i++) {\n            minPrice = min(minPrice, prices[i]);\n            maxProfit = max(maxProfit, prices[i] - minPrice);\n        }\n        return maxProfit;\n    }\n};\n```\n\n**代码分析：**\n    1. 将如何获得maxProfit的问题转化为：取出maxProfit和prices[i] - minPrice之间的最大差值\n    2. 通过观察发现并不是每一次迭代都需要去计算minPrice，可以优化为以下代码\n    ```c++\n    class Solution {\n    public:\n        int maxProfit(vector<int>& prices)\n        {\n            int maxProfit = 0;\n            int minPrice = INT_MAX;\n            for (int i = 0; i < prices.size(); i++) {\n                if (prices[i] < minPrice)\n                    minPrice = min(minPrice , prices[i]);\n                maxProfit = max(maxProfit, prices[i] - minPrice);\n            }\n            return maxProfit;\n        }\n    };\n    ```\n\n**拓展:**\n    [Kadane's Algorithm][2]\n\n\n[1]: https://leetcode.com/problems/best-time-to-buy-and-sell-stock/description/\n[2]: https://discuss.leetcode.com/topic/19853/kadane-s-algorithm-since-no-one-has-mentioned-about-this-so-far-in-case-if-interviewer-twists-the-input/5\n","source":"_posts/LeetCode-BestTimetoBuyandSellStock.md","raw":"---\ntitle: LeetCode 121. Best Time to Buy and Sell Stock\ndate: 2017-11-23 12:11:53\ncategories: LeetCode\ntags:\n - LeetCode\n - Algorithms\n - Data Structure\n - Array\n - Kadane's Algorithm\n---\n\n## [题目描述][1]：\nSay you have an array for which the ith element is the price of a given stock on day i.\nIf you were only permitted to complete at most one transaction (ie, buy one and sell one share of the stock), design an algorithm to find the maximum profit.\n\n**Example 1:**\n```\nInput: [7, 1, 5, 3, 6, 4]\nOutput: 5\n\nmax. difference = 6-1 = 5 (not 7-1 = 6, as selling price needs to be larger than buying price)\n```\n**Example 2:**\n```\nInput: [7, 6, 4, 3, 1]\nOutput: 0\n\nIn this case, no transaction is done, i.e. max profit = 0.\n```\n\n## 题目大意：\n给一个数组prices[]，prices[i]代表股票在第i天的售价，求出只做一次交易(一次买入和卖出)能得到的最大收益。 \n\n### 解题思路1：\n---\nBrute & Force（直观做法）: 两个循环，逐一找到每两个元素的差值，取最大的即为为maxProfit，时间复杂度O(n^2)\n\n**C++代码：**\n``` c++\nclass Solution {\npublic:\n    int maxProfit(vector<int>& prices)\n    {\n        int maxProfit = 0;\n        for (int i = 0; i < prices.size(); i++) {\n            for (int j = i + 1; j < prices.size(); j++) {\n                if (0 < prices[j] - prices[i])\n                    maxProfit = max(prices[j] - prices[i], maxProfit);\n            }\n        }\n        return maxProfit;\n    }\n};\n```\n\n**代码分析：**\n    1. 遍历数组，找到MaxProfit（效率较低）\n    2. 保证每一次比较的差值都是正值即可\n\n### 解题思路2：\n---\n根据题目意思，只需要找出一次交易的最大的差值。对于此题就是要找到最小值（下限）和最大值（上限）。\n只要能固定住其中之一，就可以通过一次遍历，时间复杂度O(n)，找到maxProfit.\n参考LeetCode Discuss：\nhttps://discuss.leetcode.com/topic/5863/sharing-my-simple-and-clear-c-solution/2\nhttps://discuss.leetcode.com/topic/2763/a-o-1-n-solution\n\n**C++代码：**\n``` c++\nclass Solution {\npublic:\n    int maxProfit(vector<int>& prices)\n    {\n        int maxProfit = 0;\n        int minPrice = INT_MAX;\n        for (int i = 0; i < prices.size(); i++) {\n            minPrice = min(minPrice, prices[i]);\n            maxProfit = max(maxProfit, prices[i] - minPrice);\n        }\n        return maxProfit;\n    }\n};\n```\n\n**代码分析：**\n    1. 将如何获得maxProfit的问题转化为：取出maxProfit和prices[i] - minPrice之间的最大差值\n    2. 通过观察发现并不是每一次迭代都需要去计算minPrice，可以优化为以下代码\n    ```c++\n    class Solution {\n    public:\n        int maxProfit(vector<int>& prices)\n        {\n            int maxProfit = 0;\n            int minPrice = INT_MAX;\n            for (int i = 0; i < prices.size(); i++) {\n                if (prices[i] < minPrice)\n                    minPrice = min(minPrice , prices[i]);\n                maxProfit = max(maxProfit, prices[i] - minPrice);\n            }\n            return maxProfit;\n        }\n    };\n    ```\n\n**拓展:**\n    [Kadane's Algorithm][2]\n\n\n[1]: https://leetcode.com/problems/best-time-to-buy-and-sell-stock/description/\n[2]: https://discuss.leetcode.com/topic/19853/kadane-s-algorithm-since-no-one-has-mentioned-about-this-so-far-in-case-if-interviewer-twists-the-input/5\n","slug":"LeetCode-BestTimetoBuyandSellStock","published":1,"updated":"2017-11-23T06:02:17.859Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjadpus9j0006coxdifc3icay","content":"<h2 id=\"题目描述：\"><a href=\"#题目描述：\" class=\"headerlink\" title=\"题目描述：\"></a><a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock/description/\" target=\"_blank\" rel=\"external\">题目描述</a>：</h2><p>Say you have an array for which the ith element is the price of a given stock on day i.<br>If you were only permitted to complete at most one transaction (ie, buy one and sell one share of the stock), design an algorithm to find the maximum profit.</p>\n<p><strong>Example 1:</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input: [7, 1, 5, 3, 6, 4]</div><div class=\"line\">Output: 5</div><div class=\"line\"></div><div class=\"line\">max. difference = 6-1 = 5 (not 7-1 = 6, as selling price needs to be larger than buying price)</div></pre></td></tr></table></figure></p>\n<p><strong>Example 2:</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input: [7, 6, 4, 3, 1]</div><div class=\"line\">Output: 0</div><div class=\"line\"></div><div class=\"line\">In this case, no transaction is done, i.e. max profit = 0.</div></pre></td></tr></table></figure></p>\n<h2 id=\"题目大意：\"><a href=\"#题目大意：\" class=\"headerlink\" title=\"题目大意：\"></a>题目大意：</h2><p>给一个数组prices[]，prices[i]代表股票在第i天的售价，求出只做一次交易(一次买入和卖出)能得到的最大收益。 </p>\n<h3 id=\"解题思路1：\"><a href=\"#解题思路1：\" class=\"headerlink\" title=\"解题思路1：\"></a>解题思路1：</h3><hr>\n<p>Brute &amp; Force（直观做法）: 两个循环，逐一找到每两个元素的差值，取最大的即为为maxProfit，时间复杂度O(n^2)</p>\n<p><strong>C++代码：</strong><br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxProfit</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; prices)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> maxProfit = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; prices.size(); i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt; prices.size(); j++) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"number\">0</span> &lt; prices[j] - prices[i])</div><div class=\"line\">                    maxProfit = max(prices[j] - prices[i], maxProfit);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> maxProfit;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p><strong>代码分析：</strong></p>\n<pre><code>1. 遍历数组，找到MaxProfit（效率较低）\n2. 保证每一次比较的差值都是正值即可\n</code></pre><h3 id=\"解题思路2：\"><a href=\"#解题思路2：\" class=\"headerlink\" title=\"解题思路2：\"></a>解题思路2：</h3><hr>\n<p>根据题目意思，只需要找出一次交易的最大的差值。对于此题就是要找到最小值（下限）和最大值（上限）。<br>只要能固定住其中之一，就可以通过一次遍历，时间复杂度O(n)，找到maxProfit.<br>参考LeetCode Discuss：<br><a href=\"https://discuss.leetcode.com/topic/5863/sharing-my-simple-and-clear-c-solution/2\" target=\"_blank\" rel=\"external\">https://discuss.leetcode.com/topic/5863/sharing-my-simple-and-clear-c-solution/2</a><br><a href=\"https://discuss.leetcode.com/topic/2763/a-o-1-n-solution\" target=\"_blank\" rel=\"external\">https://discuss.leetcode.com/topic/2763/a-o-1-n-solution</a></p>\n<p><strong>C++代码：</strong><br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxProfit</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; prices)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> maxProfit = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> minPrice = INT_MAX;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; prices.size(); i++) &#123;</div><div class=\"line\">            minPrice = min(minPrice, prices[i]);</div><div class=\"line\">            maxProfit = max(maxProfit, prices[i] - minPrice);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> maxProfit;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p><strong>代码分析：</strong></p>\n<pre><code>1. 将如何获得maxProfit的问题转化为：取出maxProfit和prices[i] - minPrice之间的最大差值\n2. 通过观察发现并不是每一次迭代都需要去计算minPrice，可以优化为以下代码\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxProfit</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; prices)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> maxProfit = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> minPrice = INT_MAX;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; prices.size(); i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (prices[i] &lt; minPrice)</div><div class=\"line\">                minPrice = min(minPrice , prices[i]);</div><div class=\"line\">            maxProfit = max(maxProfit, prices[i] - minPrice);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> maxProfit;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</code></pre><p><strong>拓展:</strong><br>    <a href=\"https://discuss.leetcode.com/topic/19853/kadane-s-algorithm-since-no-one-has-mentioned-about-this-so-far-in-case-if-interviewer-twists-the-input/5\" target=\"_blank\" rel=\"external\">Kadane’s Algorithm</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"题目描述：\"><a href=\"#题目描述：\" class=\"headerlink\" title=\"题目描述：\"></a><a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock/description/\" target=\"_blank\" rel=\"external\">题目描述</a>：</h2><p>Say you have an array for which the ith element is the price of a given stock on day i.<br>If you were only permitted to complete at most one transaction (ie, buy one and sell one share of the stock), design an algorithm to find the maximum profit.</p>\n<p><strong>Example 1:</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input: [7, 1, 5, 3, 6, 4]</div><div class=\"line\">Output: 5</div><div class=\"line\"></div><div class=\"line\">max. difference = 6-1 = 5 (not 7-1 = 6, as selling price needs to be larger than buying price)</div></pre></td></tr></table></figure></p>\n<p><strong>Example 2:</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input: [7, 6, 4, 3, 1]</div><div class=\"line\">Output: 0</div><div class=\"line\"></div><div class=\"line\">In this case, no transaction is done, i.e. max profit = 0.</div></pre></td></tr></table></figure></p>\n<h2 id=\"题目大意：\"><a href=\"#题目大意：\" class=\"headerlink\" title=\"题目大意：\"></a>题目大意：</h2><p>给一个数组prices[]，prices[i]代表股票在第i天的售价，求出只做一次交易(一次买入和卖出)能得到的最大收益。 </p>\n<h3 id=\"解题思路1：\"><a href=\"#解题思路1：\" class=\"headerlink\" title=\"解题思路1：\"></a>解题思路1：</h3><hr>\n<p>Brute &amp; Force（直观做法）: 两个循环，逐一找到每两个元素的差值，取最大的即为为maxProfit，时间复杂度O(n^2)</p>\n<p><strong>C++代码：</strong><br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxProfit</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; prices)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> maxProfit = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; prices.size(); i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt; prices.size(); j++) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"number\">0</span> &lt; prices[j] - prices[i])</div><div class=\"line\">                    maxProfit = max(prices[j] - prices[i], maxProfit);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> maxProfit;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p><strong>代码分析：</strong></p>\n<pre><code>1. 遍历数组，找到MaxProfit（效率较低）\n2. 保证每一次比较的差值都是正值即可\n</code></pre><h3 id=\"解题思路2：\"><a href=\"#解题思路2：\" class=\"headerlink\" title=\"解题思路2：\"></a>解题思路2：</h3><hr>\n<p>根据题目意思，只需要找出一次交易的最大的差值。对于此题就是要找到最小值（下限）和最大值（上限）。<br>只要能固定住其中之一，就可以通过一次遍历，时间复杂度O(n)，找到maxProfit.<br>参考LeetCode Discuss：<br><a href=\"https://discuss.leetcode.com/topic/5863/sharing-my-simple-and-clear-c-solution/2\" target=\"_blank\" rel=\"external\">https://discuss.leetcode.com/topic/5863/sharing-my-simple-and-clear-c-solution/2</a><br><a href=\"https://discuss.leetcode.com/topic/2763/a-o-1-n-solution\" target=\"_blank\" rel=\"external\">https://discuss.leetcode.com/topic/2763/a-o-1-n-solution</a></p>\n<p><strong>C++代码：</strong><br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxProfit</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; prices)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> maxProfit = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> minPrice = INT_MAX;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; prices.size(); i++) &#123;</div><div class=\"line\">            minPrice = min(minPrice, prices[i]);</div><div class=\"line\">            maxProfit = max(maxProfit, prices[i] - minPrice);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> maxProfit;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p><strong>代码分析：</strong></p>\n<pre><code>1. 将如何获得maxProfit的问题转化为：取出maxProfit和prices[i] - minPrice之间的最大差值\n2. 通过观察发现并不是每一次迭代都需要去计算minPrice，可以优化为以下代码\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxProfit</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; prices)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> maxProfit = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> minPrice = INT_MAX;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; prices.size(); i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (prices[i] &lt; minPrice)</div><div class=\"line\">                minPrice = min(minPrice , prices[i]);</div><div class=\"line\">            maxProfit = max(maxProfit, prices[i] - minPrice);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> maxProfit;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</code></pre><p><strong>拓展:</strong><br>    <a href=\"https://discuss.leetcode.com/topic/19853/kadane-s-algorithm-since-no-one-has-mentioned-about-this-so-far-in-case-if-interviewer-twists-the-input/5\" target=\"_blank\" rel=\"external\">Kadane’s Algorithm</a></p>\n"},{"title":"LeetCode 697. Degree of an Array","date":"2017-11-15T08:10:07.000Z","_content":"\n## [题目描述][1]：\nGiven a non-empty array of non-negative integers nums, the degree of this array is defined as the maximum frequency of any one of its elements.\nYour task is to find the smallest possible length of a (contiguous) subarray of nums, that has the same degree as nums.\n**Example 1:**\n```\nInput: [1, 2, 2, 3, 1]\nOutput: 2\nExplanation:\n    The input array has a degree of 2 because both elements 1 and 2 appear twice.\n    Of the subarrays that have the same degree:\n    [1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2]\n    The shortest length is 2. So return 2.\n```\n**Example 2:**\n```\nInput: [1,2,2,3,1,4,2]\nOutput: 6\n```\n**Note:**\n    - nums.length will be between 1 and 50,000.\n    - nums[i] will be an integer between 0 and 49,999.\n\n## 题目大意：\n给定非空非负整数数组，数组的度是指元素的最大出现次数。\n寻找最大连续区间，使得区间的度与原数组的度相同。\n\n### 解题思路1：\n---\n数组mapCnt记录元素的出现个数\n数组mapMax记录元素的最大degree\nstartIdx和endIdx记录元素的最小和最大下标（length = endIdx - startIdx + 1）\n遍历即可\n参考LeetCode Discuss：https://discuss.leetcode.com/topic/107102/my-accepted-c-solution-o-n/3\n\n**C++代码：**\n``` c++\n    int findShortestSubArray(vector<int>& nums)\n    {\n        map<int, int> mapCnt;\n        int max = 0;\n        int min = 0;\n        if (true == doFineSubArray(nums, mapCnt)) {\n            map<int,int>::iterator it;\n            for (it = mapCnt.begin(); it != mapCnt.end(); ++it) {\n                if (it->second > max) max = it->second;\n            }\n\n            map<int, int> mapMax;\n            for (it = mapCnt.begin(); it != mapCnt.end(); ++it) {\n                if (it->second == max) mapMax.insert(pair<int , int>(it->first, it->second));\n            }\n\n            max = 0;\n            for (it = mapMax.begin(); it != mapMax.end(); ++it) {\n                int beginIdx = 0;\n                for (int idx = 0; idx < nums.size(); idx++) {\n                    if (nums[idx] == it->first) {\n                        beginIdx = idx;\n                        break;\n                    }\n                }\n\n                int endIdx = 0;\n                for (int idx = nums.size() - 1; 0 <= idx; idx--) {\n                    if (nums[idx] == it->first) {\n                        endIdx = idx;\n                        break;\n                    }\n                }\n                int length = endIdx - beginIdx + 1;\n                if (0 == min) min = length;\n                else min = (min < length) ? min : length;\n            }\n        }\n        return min;\n    }\n\n    bool doFineSubArray(vector<int>& nums, map<int, int>& mapCnt)\n    {\n        for (int idx = 0; idx < nums.size(); idx++) {\n            if (0 != mapCnt.count(nums[idx])) ++mapCnt[nums[idx]];\n            else mapCnt.insert(pair<int , int>(nums[idx], 1));\n        }\n\n        if (0 < mapCnt.size()) return true;\n        else return true;\n    }\n```\n\n**代码分析：**\n    1. 这中解法如果出现nums={1, 2, 3}时候，最后的循环遍历时间复杂度会变成0(n^2)\n    2. std::map的本质是红黑树，查找的时间复杂度是O(nlogn).\n    3. C++中的hashtable，可以考虑unordered_map（C++11/14）.\n\n### 解题思路2：\n---\n数组unordered_map<int,vector<int>> mapCnt用来记录数值和在数组nums中出现的下标\nmax找到最大的degree\nmin找到最短的subarray的length\n遍历即可\n参考LeetCode Discuss：https://discuss.leetcode.com/topic/107162/straightforward-c-solution-35ms\n\n**C++代码：**\n``` c++\n    int findShortestSubArray(vector<int>& nums)\n    {\n        unordered_map<int,vector<int>> mapCnt;\n        for (int idx = 0; idx < nums.size(); idx++) mapCnt[nums[idx]].push_back(idx);\n        int degree = 0;\n        for (auto it = mapCnt.begin(); it != mapCnt.end(); it++)\n            degree = max(degree, static_cast<int>(it->second.size()));\n        int shortest = nums.size();\n        for (auto it = mapCnt.begin(); it != mapCnt.end(); ++it) {\n            if (degree == it->second.size()) {\n                shortest = min(shortest, static_cast<int>(it->second.back() - it->second[0] + 1));\n            }\n        }\n        return shortest;\n    }\n```\n\n**代码分析：**\n    1. 这中解法如果出现nums={1, 2, 3}时候，最后的循环遍历时间复杂度会变成0(n^2)\n    2. unordered_map（C++11/14）本质是hashtable，可以实现访问时间O(1)的时间复杂度.\n    3. 第二个元素vector<int>用来存储元素出现的下标，同时该数组长度也是元素出现的个数，节省了上一个\n        算法的计数步骤，关键是，最后计算subarray的length的时候，收尾元素的差值+1就是shortest，灰常好使。\n\n\n### 解题思路3：\n---\n使用两个数组unordered_map<int,int>\n    数组startIndex用来记录每个元素在nums中的起始index\n    数组count用来记录每个元素在nums中出现的degree\n遍历即可，更新最大的frequency在遍历时，如果多个元素有相同的frequency，比较他们的长度，选择subarray的length最短那个\n参考LeetCode Discuss：https://discuss.leetcode.com/topic/107216/concise-c-solution-using-hash-map-o-n-time\n\n**C++代码：**\n``` c++\n    int findShortestSubArray(vector<int>& nums)\n    {\n        unordered_map<int,vector<int>> mp;\n        for(int i=0;i<nums.size();i++) mp[nums[i]].push_back(i);\n        int degree=0;\n        for(auto it=mp.begin();it!=mp.end();it++) degree=max(degree,int(it->second.size()));\n        int shortest=nums.size();\n        for(auto it=mp.begin();it!=mp.end();it++)\n        {\n            if(it->second.size()==degree)\n            {\n                shortest=min(shortest,it->second.back()-it->second[0]+1);\n            }\n        }\n        return shortest;\n    }\n```\n\n**代码分析：**\n    1. 一个循环中用来记录元素的起始位置，并且更新元素的degree，同时计算出当前的最小len\n    2. 如果两个元素拥有相同的degree，比较并取length最小的那个\n    3. 遍历nums中每个元素的同时，如果元素的出现次数frequency大于当前fre，更新len和fre\n    4. len的长度改变只有两个时候：两个元素的degree相同和元素的出现次数frequ>当前fre时候\n\n\n[1]: https://leetcode.com/problems/degree-of-an-array/description/\n","source":"_posts/LeetCode-DegreeofanArray.md","raw":"---\ntitle: LeetCode 697. Degree of an Array\ndate: 2017-11-15 16:10:07\ncategories: LeetCode\ntags:\n - LeetCode\n - Algorithms\n - Data Structure\n - Array\n---\n\n## [题目描述][1]：\nGiven a non-empty array of non-negative integers nums, the degree of this array is defined as the maximum frequency of any one of its elements.\nYour task is to find the smallest possible length of a (contiguous) subarray of nums, that has the same degree as nums.\n**Example 1:**\n```\nInput: [1, 2, 2, 3, 1]\nOutput: 2\nExplanation:\n    The input array has a degree of 2 because both elements 1 and 2 appear twice.\n    Of the subarrays that have the same degree:\n    [1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2]\n    The shortest length is 2. So return 2.\n```\n**Example 2:**\n```\nInput: [1,2,2,3,1,4,2]\nOutput: 6\n```\n**Note:**\n    - nums.length will be between 1 and 50,000.\n    - nums[i] will be an integer between 0 and 49,999.\n\n## 题目大意：\n给定非空非负整数数组，数组的度是指元素的最大出现次数。\n寻找最大连续区间，使得区间的度与原数组的度相同。\n\n### 解题思路1：\n---\n数组mapCnt记录元素的出现个数\n数组mapMax记录元素的最大degree\nstartIdx和endIdx记录元素的最小和最大下标（length = endIdx - startIdx + 1）\n遍历即可\n参考LeetCode Discuss：https://discuss.leetcode.com/topic/107102/my-accepted-c-solution-o-n/3\n\n**C++代码：**\n``` c++\n    int findShortestSubArray(vector<int>& nums)\n    {\n        map<int, int> mapCnt;\n        int max = 0;\n        int min = 0;\n        if (true == doFineSubArray(nums, mapCnt)) {\n            map<int,int>::iterator it;\n            for (it = mapCnt.begin(); it != mapCnt.end(); ++it) {\n                if (it->second > max) max = it->second;\n            }\n\n            map<int, int> mapMax;\n            for (it = mapCnt.begin(); it != mapCnt.end(); ++it) {\n                if (it->second == max) mapMax.insert(pair<int , int>(it->first, it->second));\n            }\n\n            max = 0;\n            for (it = mapMax.begin(); it != mapMax.end(); ++it) {\n                int beginIdx = 0;\n                for (int idx = 0; idx < nums.size(); idx++) {\n                    if (nums[idx] == it->first) {\n                        beginIdx = idx;\n                        break;\n                    }\n                }\n\n                int endIdx = 0;\n                for (int idx = nums.size() - 1; 0 <= idx; idx--) {\n                    if (nums[idx] == it->first) {\n                        endIdx = idx;\n                        break;\n                    }\n                }\n                int length = endIdx - beginIdx + 1;\n                if (0 == min) min = length;\n                else min = (min < length) ? min : length;\n            }\n        }\n        return min;\n    }\n\n    bool doFineSubArray(vector<int>& nums, map<int, int>& mapCnt)\n    {\n        for (int idx = 0; idx < nums.size(); idx++) {\n            if (0 != mapCnt.count(nums[idx])) ++mapCnt[nums[idx]];\n            else mapCnt.insert(pair<int , int>(nums[idx], 1));\n        }\n\n        if (0 < mapCnt.size()) return true;\n        else return true;\n    }\n```\n\n**代码分析：**\n    1. 这中解法如果出现nums={1, 2, 3}时候，最后的循环遍历时间复杂度会变成0(n^2)\n    2. std::map的本质是红黑树，查找的时间复杂度是O(nlogn).\n    3. C++中的hashtable，可以考虑unordered_map（C++11/14）.\n\n### 解题思路2：\n---\n数组unordered_map<int,vector<int>> mapCnt用来记录数值和在数组nums中出现的下标\nmax找到最大的degree\nmin找到最短的subarray的length\n遍历即可\n参考LeetCode Discuss：https://discuss.leetcode.com/topic/107162/straightforward-c-solution-35ms\n\n**C++代码：**\n``` c++\n    int findShortestSubArray(vector<int>& nums)\n    {\n        unordered_map<int,vector<int>> mapCnt;\n        for (int idx = 0; idx < nums.size(); idx++) mapCnt[nums[idx]].push_back(idx);\n        int degree = 0;\n        for (auto it = mapCnt.begin(); it != mapCnt.end(); it++)\n            degree = max(degree, static_cast<int>(it->second.size()));\n        int shortest = nums.size();\n        for (auto it = mapCnt.begin(); it != mapCnt.end(); ++it) {\n            if (degree == it->second.size()) {\n                shortest = min(shortest, static_cast<int>(it->second.back() - it->second[0] + 1));\n            }\n        }\n        return shortest;\n    }\n```\n\n**代码分析：**\n    1. 这中解法如果出现nums={1, 2, 3}时候，最后的循环遍历时间复杂度会变成0(n^2)\n    2. unordered_map（C++11/14）本质是hashtable，可以实现访问时间O(1)的时间复杂度.\n    3. 第二个元素vector<int>用来存储元素出现的下标，同时该数组长度也是元素出现的个数，节省了上一个\n        算法的计数步骤，关键是，最后计算subarray的length的时候，收尾元素的差值+1就是shortest，灰常好使。\n\n\n### 解题思路3：\n---\n使用两个数组unordered_map<int,int>\n    数组startIndex用来记录每个元素在nums中的起始index\n    数组count用来记录每个元素在nums中出现的degree\n遍历即可，更新最大的frequency在遍历时，如果多个元素有相同的frequency，比较他们的长度，选择subarray的length最短那个\n参考LeetCode Discuss：https://discuss.leetcode.com/topic/107216/concise-c-solution-using-hash-map-o-n-time\n\n**C++代码：**\n``` c++\n    int findShortestSubArray(vector<int>& nums)\n    {\n        unordered_map<int,vector<int>> mp;\n        for(int i=0;i<nums.size();i++) mp[nums[i]].push_back(i);\n        int degree=0;\n        for(auto it=mp.begin();it!=mp.end();it++) degree=max(degree,int(it->second.size()));\n        int shortest=nums.size();\n        for(auto it=mp.begin();it!=mp.end();it++)\n        {\n            if(it->second.size()==degree)\n            {\n                shortest=min(shortest,it->second.back()-it->second[0]+1);\n            }\n        }\n        return shortest;\n    }\n```\n\n**代码分析：**\n    1. 一个循环中用来记录元素的起始位置，并且更新元素的degree，同时计算出当前的最小len\n    2. 如果两个元素拥有相同的degree，比较并取length最小的那个\n    3. 遍历nums中每个元素的同时，如果元素的出现次数frequency大于当前fre，更新len和fre\n    4. len的长度改变只有两个时候：两个元素的degree相同和元素的出现次数frequ>当前fre时候\n\n\n[1]: https://leetcode.com/problems/degree-of-an-array/description/\n","slug":"LeetCode-DegreeofanArray","published":1,"updated":"2017-11-20T03:31:37.610Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjadpus9l0007coxd9rrv240q","content":"<h2 id=\"题目描述：\"><a href=\"#题目描述：\" class=\"headerlink\" title=\"题目描述：\"></a><a href=\"https://leetcode.com/problems/degree-of-an-array/description/\" target=\"_blank\" rel=\"external\">题目描述</a>：</h2><p>Given a non-empty array of non-negative integers nums, the degree of this array is defined as the maximum frequency of any one of its elements.<br>Your task is to find the smallest possible length of a (contiguous) subarray of nums, that has the same degree as nums.<br><strong>Example 1:</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input: [1, 2, 2, 3, 1]</div><div class=\"line\">Output: 2</div><div class=\"line\">Explanation:</div><div class=\"line\">    The input array has a degree of 2 because both elements 1 and 2 appear twice.</div><div class=\"line\">    Of the subarrays that have the same degree:</div><div class=\"line\">    [1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2]</div><div class=\"line\">    The shortest length is 2. So return 2.</div></pre></td></tr></table></figure></p>\n<p><strong>Example 2:</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input: [1,2,2,3,1,4,2]</div><div class=\"line\">Output: 6</div></pre></td></tr></table></figure></p>\n<p><strong>Note:</strong></p>\n<pre><code>- nums.length will be between 1 and 50,000.\n- nums[i] will be an integer between 0 and 49,999.\n</code></pre><h2 id=\"题目大意：\"><a href=\"#题目大意：\" class=\"headerlink\" title=\"题目大意：\"></a>题目大意：</h2><p>给定非空非负整数数组，数组的度是指元素的最大出现次数。<br>寻找最大连续区间，使得区间的度与原数组的度相同。</p>\n<h3 id=\"解题思路1：\"><a href=\"#解题思路1：\" class=\"headerlink\" title=\"解题思路1：\"></a>解题思路1：</h3><hr>\n<p>数组mapCnt记录元素的出现个数<br>数组mapMax记录元素的最大degree<br>startIdx和endIdx记录元素的最小和最大下标（length = endIdx - startIdx + 1）<br>遍历即可<br>参考LeetCode Discuss：<a href=\"https://discuss.leetcode.com/topic/107102/my-accepted-c-solution-o-n/3\" target=\"_blank\" rel=\"external\">https://discuss.leetcode.com/topic/107102/my-accepted-c-solution-o-n/3</a></p>\n<p><strong>C++代码：</strong><br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">findShortestSubArray</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">map</span>&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; mapCnt;</div><div class=\"line\">    <span class=\"keyword\">int</span> max = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> min = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"literal\">true</span> == doFineSubArray(nums, mapCnt)) &#123;</div><div class=\"line\">        <span class=\"built_in\">map</span>&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt;::iterator it;</div><div class=\"line\">        <span class=\"keyword\">for</span> (it = mapCnt.begin(); it != mapCnt.end(); ++it) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (it-&gt;second &gt; max) max = it-&gt;second;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"built_in\">map</span>&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; mapMax;</div><div class=\"line\">        <span class=\"keyword\">for</span> (it = mapCnt.begin(); it != mapCnt.end(); ++it) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (it-&gt;second == max) mapMax.insert(pair&lt;<span class=\"keyword\">int</span> , <span class=\"keyword\">int</span>&gt;(it-&gt;first, it-&gt;second));</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        max = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (it = mapMax.begin(); it != mapMax.end(); ++it) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> beginIdx = <span class=\"number\">0</span>;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> idx = <span class=\"number\">0</span>; idx &lt; nums.size(); idx++) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (nums[idx] == it-&gt;first) &#123;</div><div class=\"line\">                    beginIdx = idx;</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">int</span> endIdx = <span class=\"number\">0</span>;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> idx = nums.size() - <span class=\"number\">1</span>; <span class=\"number\">0</span> &lt;= idx; idx--) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (nums[idx] == it-&gt;first) &#123;</div><div class=\"line\">                    endIdx = idx;</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">int</span> length = endIdx - beginIdx + <span class=\"number\">1</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"number\">0</span> == min) min = length;</div><div class=\"line\">            <span class=\"keyword\">else</span> min = (min &lt; length) ? min : length;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> min;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">doFineSubArray</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums, <span class=\"built_in\">map</span>&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;&amp; mapCnt)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> idx = <span class=\"number\">0</span>; idx &lt; nums.size(); idx++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"number\">0</span> != mapCnt.count(nums[idx])) ++mapCnt[nums[idx]];</div><div class=\"line\">        <span class=\"keyword\">else</span> mapCnt.insert(pair&lt;<span class=\"keyword\">int</span> , <span class=\"keyword\">int</span>&gt;(nums[idx], <span class=\"number\">1</span>));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">0</span> &lt; mapCnt.size()) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>代码分析：</strong></p>\n<pre><code>1. 这中解法如果出现nums={1, 2, 3}时候，最后的循环遍历时间复杂度会变成0(n^2)\n2. std::map的本质是红黑树，查找的时间复杂度是O(nlogn).\n3. C++中的hashtable，可以考虑unordered_map（C++11/14）.\n</code></pre><h3 id=\"解题思路2：\"><a href=\"#解题思路2：\" class=\"headerlink\" title=\"解题思路2：\"></a>解题思路2：</h3><hr>\n<p>数组unordered_map<int,vector<int>&gt; mapCnt用来记录数值和在数组nums中出现的下标<br>max找到最大的degree<br>min找到最短的subarray的length<br>遍历即可<br>参考LeetCode Discuss：<a href=\"https://discuss.leetcode.com/topic/107162/straightforward-c-solution-35ms\" target=\"_blank\" rel=\"external\">https://discuss.leetcode.com/topic/107162/straightforward-c-solution-35ms</a></int,vector<int></p>\n<p><strong>C++代码：</strong><br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">findShortestSubArray</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">unordered_map</span>&lt;<span class=\"keyword\">int</span>,<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; mapCnt;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> idx = <span class=\"number\">0</span>; idx &lt; nums.size(); idx++) mapCnt[nums[idx]].push_back(idx);</div><div class=\"line\">    <span class=\"keyword\">int</span> degree = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> it = mapCnt.begin(); it != mapCnt.end(); it++)</div><div class=\"line\">        degree = max(degree, <span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">int</span>&gt;(it-&gt;second.size()));</div><div class=\"line\">    <span class=\"keyword\">int</span> shortest = nums.size();</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> it = mapCnt.begin(); it != mapCnt.end(); ++it) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (degree == it-&gt;second.size()) &#123;</div><div class=\"line\">            shortest = min(shortest, <span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">int</span>&gt;(it-&gt;second.back() - it-&gt;second[<span class=\"number\">0</span>] + <span class=\"number\">1</span>));</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> shortest;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>代码分析：</strong></p>\n<pre><code>1. 这中解法如果出现nums={1, 2, 3}时候，最后的循环遍历时间复杂度会变成0(n^2)\n2. unordered_map（C++11/14）本质是hashtable，可以实现访问时间O(1)的时间复杂度.\n3. 第二个元素vector&lt;int&gt;用来存储元素出现的下标，同时该数组长度也是元素出现的个数，节省了上一个\n    算法的计数步骤，关键是，最后计算subarray的length的时候，收尾元素的差值+1就是shortest，灰常好使。\n</code></pre><h3 id=\"解题思路3：\"><a href=\"#解题思路3：\" class=\"headerlink\" title=\"解题思路3：\"></a>解题思路3：</h3><hr>\n<p>使用两个数组unordered_map<int,int><br>    数组startIndex用来记录每个元素在nums中的起始index<br>    数组count用来记录每个元素在nums中出现的degree<br>遍历即可，更新最大的frequency在遍历时，如果多个元素有相同的frequency，比较他们的长度，选择subarray的length最短那个<br>参考LeetCode Discuss：<a href=\"https://discuss.leetcode.com/topic/107216/concise-c-solution-using-hash-map-o-n-time\" target=\"_blank\" rel=\"external\">https://discuss.leetcode.com/topic/107216/concise-c-solution-using-hash-map-o-n-time</a></int,int></p>\n<p><strong>C++代码：</strong><br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">findShortestSubArray</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">unordered_map</span>&lt;<span class=\"keyword\">int</span>,<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; mp;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;nums.size();i++) mp[nums[i]].push_back(i);</div><div class=\"line\">    <span class=\"keyword\">int</span> degree=<span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> it=mp.begin();it!=mp.end();it++) degree=max(degree,<span class=\"keyword\">int</span>(it-&gt;second.size()));</div><div class=\"line\">    <span class=\"keyword\">int</span> shortest=nums.size();</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> it=mp.begin();it!=mp.end();it++)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(it-&gt;second.size()==degree)</div><div class=\"line\">        &#123;</div><div class=\"line\">            shortest=min(shortest,it-&gt;second.back()-it-&gt;second[<span class=\"number\">0</span>]+<span class=\"number\">1</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> shortest;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>代码分析：</strong></p>\n<pre><code>1. 一个循环中用来记录元素的起始位置，并且更新元素的degree，同时计算出当前的最小len\n2. 如果两个元素拥有相同的degree，比较并取length最小的那个\n3. 遍历nums中每个元素的同时，如果元素的出现次数frequency大于当前fre，更新len和fre\n4. len的长度改变只有两个时候：两个元素的degree相同和元素的出现次数frequ&gt;当前fre时候\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"题目描述：\"><a href=\"#题目描述：\" class=\"headerlink\" title=\"题目描述：\"></a><a href=\"https://leetcode.com/problems/degree-of-an-array/description/\" target=\"_blank\" rel=\"external\">题目描述</a>：</h2><p>Given a non-empty array of non-negative integers nums, the degree of this array is defined as the maximum frequency of any one of its elements.<br>Your task is to find the smallest possible length of a (contiguous) subarray of nums, that has the same degree as nums.<br><strong>Example 1:</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input: [1, 2, 2, 3, 1]</div><div class=\"line\">Output: 2</div><div class=\"line\">Explanation:</div><div class=\"line\">    The input array has a degree of 2 because both elements 1 and 2 appear twice.</div><div class=\"line\">    Of the subarrays that have the same degree:</div><div class=\"line\">    [1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2]</div><div class=\"line\">    The shortest length is 2. So return 2.</div></pre></td></tr></table></figure></p>\n<p><strong>Example 2:</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input: [1,2,2,3,1,4,2]</div><div class=\"line\">Output: 6</div></pre></td></tr></table></figure></p>\n<p><strong>Note:</strong></p>\n<pre><code>- nums.length will be between 1 and 50,000.\n- nums[i] will be an integer between 0 and 49,999.\n</code></pre><h2 id=\"题目大意：\"><a href=\"#题目大意：\" class=\"headerlink\" title=\"题目大意：\"></a>题目大意：</h2><p>给定非空非负整数数组，数组的度是指元素的最大出现次数。<br>寻找最大连续区间，使得区间的度与原数组的度相同。</p>\n<h3 id=\"解题思路1：\"><a href=\"#解题思路1：\" class=\"headerlink\" title=\"解题思路1：\"></a>解题思路1：</h3><hr>\n<p>数组mapCnt记录元素的出现个数<br>数组mapMax记录元素的最大degree<br>startIdx和endIdx记录元素的最小和最大下标（length = endIdx - startIdx + 1）<br>遍历即可<br>参考LeetCode Discuss：<a href=\"https://discuss.leetcode.com/topic/107102/my-accepted-c-solution-o-n/3\" target=\"_blank\" rel=\"external\">https://discuss.leetcode.com/topic/107102/my-accepted-c-solution-o-n/3</a></p>\n<p><strong>C++代码：</strong><br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">findShortestSubArray</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">map</span>&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; mapCnt;</div><div class=\"line\">    <span class=\"keyword\">int</span> max = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> min = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"literal\">true</span> == doFineSubArray(nums, mapCnt)) &#123;</div><div class=\"line\">        <span class=\"built_in\">map</span>&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt;::iterator it;</div><div class=\"line\">        <span class=\"keyword\">for</span> (it = mapCnt.begin(); it != mapCnt.end(); ++it) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (it-&gt;second &gt; max) max = it-&gt;second;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"built_in\">map</span>&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; mapMax;</div><div class=\"line\">        <span class=\"keyword\">for</span> (it = mapCnt.begin(); it != mapCnt.end(); ++it) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (it-&gt;second == max) mapMax.insert(pair&lt;<span class=\"keyword\">int</span> , <span class=\"keyword\">int</span>&gt;(it-&gt;first, it-&gt;second));</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        max = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (it = mapMax.begin(); it != mapMax.end(); ++it) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> beginIdx = <span class=\"number\">0</span>;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> idx = <span class=\"number\">0</span>; idx &lt; nums.size(); idx++) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (nums[idx] == it-&gt;first) &#123;</div><div class=\"line\">                    beginIdx = idx;</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">int</span> endIdx = <span class=\"number\">0</span>;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> idx = nums.size() - <span class=\"number\">1</span>; <span class=\"number\">0</span> &lt;= idx; idx--) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (nums[idx] == it-&gt;first) &#123;</div><div class=\"line\">                    endIdx = idx;</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">int</span> length = endIdx - beginIdx + <span class=\"number\">1</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"number\">0</span> == min) min = length;</div><div class=\"line\">            <span class=\"keyword\">else</span> min = (min &lt; length) ? min : length;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> min;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">doFineSubArray</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums, <span class=\"built_in\">map</span>&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;&amp; mapCnt)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> idx = <span class=\"number\">0</span>; idx &lt; nums.size(); idx++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"number\">0</span> != mapCnt.count(nums[idx])) ++mapCnt[nums[idx]];</div><div class=\"line\">        <span class=\"keyword\">else</span> mapCnt.insert(pair&lt;<span class=\"keyword\">int</span> , <span class=\"keyword\">int</span>&gt;(nums[idx], <span class=\"number\">1</span>));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">0</span> &lt; mapCnt.size()) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>代码分析：</strong></p>\n<pre><code>1. 这中解法如果出现nums={1, 2, 3}时候，最后的循环遍历时间复杂度会变成0(n^2)\n2. std::map的本质是红黑树，查找的时间复杂度是O(nlogn).\n3. C++中的hashtable，可以考虑unordered_map（C++11/14）.\n</code></pre><h3 id=\"解题思路2：\"><a href=\"#解题思路2：\" class=\"headerlink\" title=\"解题思路2：\"></a>解题思路2：</h3><hr>\n<p>数组unordered_map<int,vector<int>&gt; mapCnt用来记录数值和在数组nums中出现的下标<br>max找到最大的degree<br>min找到最短的subarray的length<br>遍历即可<br>参考LeetCode Discuss：<a href=\"https://discuss.leetcode.com/topic/107162/straightforward-c-solution-35ms\" target=\"_blank\" rel=\"external\">https://discuss.leetcode.com/topic/107162/straightforward-c-solution-35ms</a></int,vector<int></p>\n<p><strong>C++代码：</strong><br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">findShortestSubArray</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">unordered_map</span>&lt;<span class=\"keyword\">int</span>,<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; mapCnt;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> idx = <span class=\"number\">0</span>; idx &lt; nums.size(); idx++) mapCnt[nums[idx]].push_back(idx);</div><div class=\"line\">    <span class=\"keyword\">int</span> degree = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> it = mapCnt.begin(); it != mapCnt.end(); it++)</div><div class=\"line\">        degree = max(degree, <span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">int</span>&gt;(it-&gt;second.size()));</div><div class=\"line\">    <span class=\"keyword\">int</span> shortest = nums.size();</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> it = mapCnt.begin(); it != mapCnt.end(); ++it) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (degree == it-&gt;second.size()) &#123;</div><div class=\"line\">            shortest = min(shortest, <span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">int</span>&gt;(it-&gt;second.back() - it-&gt;second[<span class=\"number\">0</span>] + <span class=\"number\">1</span>));</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> shortest;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>代码分析：</strong></p>\n<pre><code>1. 这中解法如果出现nums={1, 2, 3}时候，最后的循环遍历时间复杂度会变成0(n^2)\n2. unordered_map（C++11/14）本质是hashtable，可以实现访问时间O(1)的时间复杂度.\n3. 第二个元素vector&lt;int&gt;用来存储元素出现的下标，同时该数组长度也是元素出现的个数，节省了上一个\n    算法的计数步骤，关键是，最后计算subarray的length的时候，收尾元素的差值+1就是shortest，灰常好使。\n</code></pre><h3 id=\"解题思路3：\"><a href=\"#解题思路3：\" class=\"headerlink\" title=\"解题思路3：\"></a>解题思路3：</h3><hr>\n<p>使用两个数组unordered_map<int,int><br>    数组startIndex用来记录每个元素在nums中的起始index<br>    数组count用来记录每个元素在nums中出现的degree<br>遍历即可，更新最大的frequency在遍历时，如果多个元素有相同的frequency，比较他们的长度，选择subarray的length最短那个<br>参考LeetCode Discuss：<a href=\"https://discuss.leetcode.com/topic/107216/concise-c-solution-using-hash-map-o-n-time\" target=\"_blank\" rel=\"external\">https://discuss.leetcode.com/topic/107216/concise-c-solution-using-hash-map-o-n-time</a></int,int></p>\n<p><strong>C++代码：</strong><br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">findShortestSubArray</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">unordered_map</span>&lt;<span class=\"keyword\">int</span>,<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; mp;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;nums.size();i++) mp[nums[i]].push_back(i);</div><div class=\"line\">    <span class=\"keyword\">int</span> degree=<span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> it=mp.begin();it!=mp.end();it++) degree=max(degree,<span class=\"keyword\">int</span>(it-&gt;second.size()));</div><div class=\"line\">    <span class=\"keyword\">int</span> shortest=nums.size();</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> it=mp.begin();it!=mp.end();it++)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(it-&gt;second.size()==degree)</div><div class=\"line\">        &#123;</div><div class=\"line\">            shortest=min(shortest,it-&gt;second.back()-it-&gt;second[<span class=\"number\">0</span>]+<span class=\"number\">1</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> shortest;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>代码分析：</strong></p>\n<pre><code>1. 一个循环中用来记录元素的起始位置，并且更新元素的degree，同时计算出当前的最小len\n2. 如果两个元素拥有相同的degree，比较并取length最小的那个\n3. 遍历nums中每个元素的同时，如果元素的出现次数frequency大于当前fre，更新len和fre\n4. len的长度改变只有两个时候：两个元素的degree相同和元素的出现次数frequ&gt;当前fre时候\n</code></pre>"},{"title":"LeetCode 463. Island Perimeter","date":"2017-11-17T08:09:05.000Z","_content":"\n\n## [题目描述][1]：\nYou are given a map in form of a two-dimensional integer grid where 1 represents land and 0 represents water. Grid cells are connected horizontally/vertically (not diagonally). The grid is completely surrounded by water, and there is exactly one island (i.e., one or more connected land cells). The island doesn't have \"lakes\" (water inside that isn't connected to the water around the island). One cell is a square with side length 1. The grid is rectangular, width and height don't exceed 100. Determine the perimeter of the island.\n**Example:**\n```\n[[0,1,0,0],\n[1,1,1,0],\n[0,1,0,0],\n[1,1,0,0]]\n\nAnswer: 16\n```\nExplanation: The perimeter is the 16 yellow stripes in the image below:\n{% qnimg 2017-11-17/2017_11_17_1.png %}\n\n## 题目大意：\n给定一个二维地图，1表示陆地，0表示水域。单元格水平或者竖直相连（不含对角线）。地图完全被水域环绕，只包含一个岛屿（也就是说，一个或者多个相连的陆地单元格）。岛屿没有湖泊（岛屿内部环绕的水域）。单元格是边长为1的正方形。地图是矩形，长宽不超过100。计算岛屿的周长。\n\n### 解题思路1：\n---\nDFS：深度优先遍历（递归实现）, 虑每个元素的四个方向，如果是边界或者0，则perimeter+1。\n参考LeetCode Discuss：\nhttps://discuss.leetcode.com/topic/106301/java-c-straightforward-dfs-solution\nhttps://discuss.leetcode.com/topic/106261/java-c-clean-code\n\n**C++代码：**\n``` c++\n    class Solution {\n    public:\n        int islandPerimeter(vector<vector<int> >& grid)\n        {\n            int m = grid.size();\n            int n = grid[0].size();\n            int nums = 0;\n            for (int i = 0; i < m; i++) {\n                for (int j = 0; j < n; j++) {\n                    if (1 == grid[i][j])\n                        nums += bfs(grid, i, j);\n                }\n            }\n            return nums;\n        }\n\n    private:\n        int dfs(vector<vector<int> >& grid, int i, int j)\n        {\n            if (i < 0 || i >= grid.size() || j < 0 || j >= grid[0].size()\n                || 0 == grid[i][j])\n                return 1; // stripes\n            else if (-1 == grid[i][j])\n                return 0;\n            else {\n                grid[i][j] = -1; // mark visited\n                return dfs(grid, i - 1, j) + dfs(grid, i + 1, j)\n                + dfs(grid, i, j - 1) + dfs(grid, i, j + 1);\n            }\n        }\n    };\n```\n\n**代码分析：**\n    1. 递归函数需要注意结束条件，即边界的处理。我们关心的是grid范围内，其值为1的元素\n    2. 由于孤岛有四个维度，元素grid[i][j]的四个方向的下一个元素坐标分别为：[(i-1, j), (i+1, j), (i, j-1), (i, j+1)]\n    3. 如果是边界点或者grid[i][j]为0的情况，则perimeter + 1\n    4. 访问过的元素置为-1，与原数组元素值区分。\n    5. 二维数组的vector表示\n    ```C++\n    int arr[4][4] = {{0,1,0,0},{1,1,1,0},{0,1,0,0},{1,1,0,0}};\n    vector<vector<int> > grid(4);\n    for (int i = 0; i < grid.size(); i++)\n        grid[i].resize(4);\n    for (int i = 0; i < 4; i++) {\n        for (int j = 0; j < 4; j++) {\n            grid[i][j] = arr[i][j];\n        }\n    }\n    ```\n\n### 解题思路2：\n---\nBFS：广度优先遍历（借助队列迭代实现）\n参考LeetCode Discuss：\n\n**C++代码：**\n``` c++\nclass Solution {\npublic:\n    int islandPerimeter(vector<vector<int> >& grid)\n    {\n        int m = grid.size();\n        int n = grid[0].size();\n        int nums = 0;\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                if (1 == grid[i][j])\n                    nums += bfs(grid, i, j);\n            }\n        }\n        return nums;\n    }\n\nprivate:\n    int bfs(vector<vector<int> >& grid, int i, int j)\n    {\n        queue<pair<int, int> > q;\n        grid[i][j] = -1; // visited\n\n        vector<int> dir({-1, 0, 1, 0, -1}); // c++11/14\n        // int nums[] = {-1, 0, 1, 0, -1};\n        // vector<int> dir(nums, nums + sizeof(nums) / sizeof(int));\n        q.push(pair<int, int>(i, j));\n        int nums = 0;\n        while (0 < q.size()) {\n            int m = q.front().first; // row index\n            int n = q.front().second; // col index\n            q.pop(); // remove from queue\n\n            for (int idx = 0; idx < dir.size() - 1; idx++) {\n                int rowIdx = m + dir[idx]; // row index\n                int colIdx = n + dir[idx + 1]; // col index\n                if (rowIdx < 0 || rowIdx >= grid.size() || colIdx < 0 || colIdx >= grid[0].size()\n                    || 0 == grid[rowIdx][colIdx])\n                    nums++; //  accumulate stripes\n                else if (-1 == grid[rowIdx][colIdx])\n                    continue; // skip visted item\n                else {\n                    q.push(pair<int, int>(rowIdx, colIdx));\n                    grid[rowIdx][colIdx] = -1; // mark visited\n                }\n            }\n        }\n        return nums;\n    }\n};\n```\n\n**代码分析：**\n    1. 递归函数需要注意结束条件，即边界的处理。我们关心的是grid范围内，其值为1的元素\n    2. 由于孤岛有四个维度，元素grid[i][j]的四个方向的下一个元素坐标分别为：[(i-1, j), (i+1, j), (i, j-1), (i, j+1)]\n    3. 如果是边界点或者grid[i][j]为0的情况，则perimeter + 1\n    4. 访问过的元素置为-1，与原数组元素值区分。\n    5. 二维数组的vector表示\n    ```C++\n    int arr[4][4] = {{0,1,0,0},{1,1,1,0},{0,1,0,0},{1,1,0,0}};\n    vector<vector<int> > grid(4);\n    for (int i = 0; i < grid.size(); i++)\n        grid[i].resize(4);\n    for (int i = 0; i < 4; i++) {\n        for (int j = 0; j < 4; j++) {\n            grid[i][j] = arr[i][j];\n        }\n    }\n    ```\n\n### 解题思路3：\n---\n代码简洁的全遍历，复杂度O(n)。\n参考LeetCode Discuss：\nhttps://discuss.leetcode.com/topic/111260/c-short-and-fast-beats-93\n\n**C++代码：**\n``` c++\nclass Solution {\npublic:\n    int islandPerimeter(vector<vector<int>>& grid) {\n        int p = 0;\n        for (int i = 0; i < grid.size(); ++i)\n            for (int j = 0; j < grid[i].size(); ++j)\n                if (grid[i][j] == 1)\n                    p += (i == 0 || grid[i - 1][j] == 0) + (i == grid.size() - 1 || grid[i + 1][j] == 0) +\n                         (j == 0 || grid[i][j - 1] == 0) + (j == grid[i].size() - 1 || grid[i][j + 1] == 0);\n        return p;\n    }\n};\n```\n\n**代码分析：**\n    1. 代的方式进行全遍历，代码比较简洁。不过就是循环内嵌套过多的逻辑判断，效率比较低。\n    2. 关注点在确定当前grid[i][j]为1后，观察四个方向的元素是否为0，如果是则+1.如果是i = 0或者j=0的边界则直接+1；\n\n### 解题思路4：\n---\n    1. 确定“1”的个数，如果没有相邻包围的元素的话，perimeter为“1”的个数×4\n    2. 确定相邻的元素边界墙的个数，需要减去从上述结果中减去2×边界墙个数\n参考LeetCode Discuss：\nhttps://discuss.leetcode.com/topic/68845/c-solution-with-explanation\n\n**C++代码：**\n``` c++\nclass Solution {\npublic:\n    int islandPerimeter(vector<vector<int>>& grid) {\n        int count=0, repeat=0;\n        for(int i=0;i<grid.size();i++)\n        {\n            for(int j=0; j<grid[i].size();j++)\n                {\n                    if(grid[i][j]==1)\n                    {\n                        count ++;\n                        if(i!=0 && grid[i-1][j] == 1) repeat++;\n                        if(j!=0 && grid[i][j-1] == 1) repeat++;\n                    }\n                }\n        }\n        return 4*count-repeat*2;\n    }\n};\n```\n\n**代码分析：**\n总周长perimeter的解法一般两种：\n    1. “1”元素总长-相邻边×2\n    2. perimeter=边界元素个数+与“0”相邻元素个数\n\n\n[1]: https://leetcode.com/problems/island-perimeter/description/\n","source":"_posts/LeetCode-IslandPerimeter.md","raw":"---\ntitle: LeetCode 463. Island Perimeter\ndate: 2017-11-17 16:09:05\ntags:\n - LeetCode\n - Algorithms\n - Data Structure\n - Array\n - BFS\n - DFS\n---\n\n\n## [题目描述][1]：\nYou are given a map in form of a two-dimensional integer grid where 1 represents land and 0 represents water. Grid cells are connected horizontally/vertically (not diagonally). The grid is completely surrounded by water, and there is exactly one island (i.e., one or more connected land cells). The island doesn't have \"lakes\" (water inside that isn't connected to the water around the island). One cell is a square with side length 1. The grid is rectangular, width and height don't exceed 100. Determine the perimeter of the island.\n**Example:**\n```\n[[0,1,0,0],\n[1,1,1,0],\n[0,1,0,0],\n[1,1,0,0]]\n\nAnswer: 16\n```\nExplanation: The perimeter is the 16 yellow stripes in the image below:\n{% qnimg 2017-11-17/2017_11_17_1.png %}\n\n## 题目大意：\n给定一个二维地图，1表示陆地，0表示水域。单元格水平或者竖直相连（不含对角线）。地图完全被水域环绕，只包含一个岛屿（也就是说，一个或者多个相连的陆地单元格）。岛屿没有湖泊（岛屿内部环绕的水域）。单元格是边长为1的正方形。地图是矩形，长宽不超过100。计算岛屿的周长。\n\n### 解题思路1：\n---\nDFS：深度优先遍历（递归实现）, 虑每个元素的四个方向，如果是边界或者0，则perimeter+1。\n参考LeetCode Discuss：\nhttps://discuss.leetcode.com/topic/106301/java-c-straightforward-dfs-solution\nhttps://discuss.leetcode.com/topic/106261/java-c-clean-code\n\n**C++代码：**\n``` c++\n    class Solution {\n    public:\n        int islandPerimeter(vector<vector<int> >& grid)\n        {\n            int m = grid.size();\n            int n = grid[0].size();\n            int nums = 0;\n            for (int i = 0; i < m; i++) {\n                for (int j = 0; j < n; j++) {\n                    if (1 == grid[i][j])\n                        nums += bfs(grid, i, j);\n                }\n            }\n            return nums;\n        }\n\n    private:\n        int dfs(vector<vector<int> >& grid, int i, int j)\n        {\n            if (i < 0 || i >= grid.size() || j < 0 || j >= grid[0].size()\n                || 0 == grid[i][j])\n                return 1; // stripes\n            else if (-1 == grid[i][j])\n                return 0;\n            else {\n                grid[i][j] = -1; // mark visited\n                return dfs(grid, i - 1, j) + dfs(grid, i + 1, j)\n                + dfs(grid, i, j - 1) + dfs(grid, i, j + 1);\n            }\n        }\n    };\n```\n\n**代码分析：**\n    1. 递归函数需要注意结束条件，即边界的处理。我们关心的是grid范围内，其值为1的元素\n    2. 由于孤岛有四个维度，元素grid[i][j]的四个方向的下一个元素坐标分别为：[(i-1, j), (i+1, j), (i, j-1), (i, j+1)]\n    3. 如果是边界点或者grid[i][j]为0的情况，则perimeter + 1\n    4. 访问过的元素置为-1，与原数组元素值区分。\n    5. 二维数组的vector表示\n    ```C++\n    int arr[4][4] = {{0,1,0,0},{1,1,1,0},{0,1,0,0},{1,1,0,0}};\n    vector<vector<int> > grid(4);\n    for (int i = 0; i < grid.size(); i++)\n        grid[i].resize(4);\n    for (int i = 0; i < 4; i++) {\n        for (int j = 0; j < 4; j++) {\n            grid[i][j] = arr[i][j];\n        }\n    }\n    ```\n\n### 解题思路2：\n---\nBFS：广度优先遍历（借助队列迭代实现）\n参考LeetCode Discuss：\n\n**C++代码：**\n``` c++\nclass Solution {\npublic:\n    int islandPerimeter(vector<vector<int> >& grid)\n    {\n        int m = grid.size();\n        int n = grid[0].size();\n        int nums = 0;\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                if (1 == grid[i][j])\n                    nums += bfs(grid, i, j);\n            }\n        }\n        return nums;\n    }\n\nprivate:\n    int bfs(vector<vector<int> >& grid, int i, int j)\n    {\n        queue<pair<int, int> > q;\n        grid[i][j] = -1; // visited\n\n        vector<int> dir({-1, 0, 1, 0, -1}); // c++11/14\n        // int nums[] = {-1, 0, 1, 0, -1};\n        // vector<int> dir(nums, nums + sizeof(nums) / sizeof(int));\n        q.push(pair<int, int>(i, j));\n        int nums = 0;\n        while (0 < q.size()) {\n            int m = q.front().first; // row index\n            int n = q.front().second; // col index\n            q.pop(); // remove from queue\n\n            for (int idx = 0; idx < dir.size() - 1; idx++) {\n                int rowIdx = m + dir[idx]; // row index\n                int colIdx = n + dir[idx + 1]; // col index\n                if (rowIdx < 0 || rowIdx >= grid.size() || colIdx < 0 || colIdx >= grid[0].size()\n                    || 0 == grid[rowIdx][colIdx])\n                    nums++; //  accumulate stripes\n                else if (-1 == grid[rowIdx][colIdx])\n                    continue; // skip visted item\n                else {\n                    q.push(pair<int, int>(rowIdx, colIdx));\n                    grid[rowIdx][colIdx] = -1; // mark visited\n                }\n            }\n        }\n        return nums;\n    }\n};\n```\n\n**代码分析：**\n    1. 递归函数需要注意结束条件，即边界的处理。我们关心的是grid范围内，其值为1的元素\n    2. 由于孤岛有四个维度，元素grid[i][j]的四个方向的下一个元素坐标分别为：[(i-1, j), (i+1, j), (i, j-1), (i, j+1)]\n    3. 如果是边界点或者grid[i][j]为0的情况，则perimeter + 1\n    4. 访问过的元素置为-1，与原数组元素值区分。\n    5. 二维数组的vector表示\n    ```C++\n    int arr[4][4] = {{0,1,0,0},{1,1,1,0},{0,1,0,0},{1,1,0,0}};\n    vector<vector<int> > grid(4);\n    for (int i = 0; i < grid.size(); i++)\n        grid[i].resize(4);\n    for (int i = 0; i < 4; i++) {\n        for (int j = 0; j < 4; j++) {\n            grid[i][j] = arr[i][j];\n        }\n    }\n    ```\n\n### 解题思路3：\n---\n代码简洁的全遍历，复杂度O(n)。\n参考LeetCode Discuss：\nhttps://discuss.leetcode.com/topic/111260/c-short-and-fast-beats-93\n\n**C++代码：**\n``` c++\nclass Solution {\npublic:\n    int islandPerimeter(vector<vector<int>>& grid) {\n        int p = 0;\n        for (int i = 0; i < grid.size(); ++i)\n            for (int j = 0; j < grid[i].size(); ++j)\n                if (grid[i][j] == 1)\n                    p += (i == 0 || grid[i - 1][j] == 0) + (i == grid.size() - 1 || grid[i + 1][j] == 0) +\n                         (j == 0 || grid[i][j - 1] == 0) + (j == grid[i].size() - 1 || grid[i][j + 1] == 0);\n        return p;\n    }\n};\n```\n\n**代码分析：**\n    1. 代的方式进行全遍历，代码比较简洁。不过就是循环内嵌套过多的逻辑判断，效率比较低。\n    2. 关注点在确定当前grid[i][j]为1后，观察四个方向的元素是否为0，如果是则+1.如果是i = 0或者j=0的边界则直接+1；\n\n### 解题思路4：\n---\n    1. 确定“1”的个数，如果没有相邻包围的元素的话，perimeter为“1”的个数×4\n    2. 确定相邻的元素边界墙的个数，需要减去从上述结果中减去2×边界墙个数\n参考LeetCode Discuss：\nhttps://discuss.leetcode.com/topic/68845/c-solution-with-explanation\n\n**C++代码：**\n``` c++\nclass Solution {\npublic:\n    int islandPerimeter(vector<vector<int>>& grid) {\n        int count=0, repeat=0;\n        for(int i=0;i<grid.size();i++)\n        {\n            for(int j=0; j<grid[i].size();j++)\n                {\n                    if(grid[i][j]==1)\n                    {\n                        count ++;\n                        if(i!=0 && grid[i-1][j] == 1) repeat++;\n                        if(j!=0 && grid[i][j-1] == 1) repeat++;\n                    }\n                }\n        }\n        return 4*count-repeat*2;\n    }\n};\n```\n\n**代码分析：**\n总周长perimeter的解法一般两种：\n    1. “1”元素总长-相邻边×2\n    2. perimeter=边界元素个数+与“0”相邻元素个数\n\n\n[1]: https://leetcode.com/problems/island-perimeter/description/\n","slug":"LeetCode-IslandPerimeter","published":1,"updated":"2017-11-20T03:31:37.611Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjadpus9m0008coxdwwtrdav6","content":"<h2 id=\"题目描述：\"><a href=\"#题目描述：\" class=\"headerlink\" title=\"题目描述：\"></a><a href=\"https://leetcode.com/problems/island-perimeter/description/\" target=\"_blank\" rel=\"external\">题目描述</a>：</h2><p>You are given a map in form of a two-dimensional integer grid where 1 represents land and 0 represents water. Grid cells are connected horizontally/vertically (not diagonally). The grid is completely surrounded by water, and there is exactly one island (i.e., one or more connected land cells). The island doesn’t have “lakes” (water inside that isn’t connected to the water around the island). One cell is a square with side length 1. The grid is rectangular, width and height don’t exceed 100. Determine the perimeter of the island.<br><strong>Example:</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">[[0,1,0,0],</div><div class=\"line\">[1,1,1,0],</div><div class=\"line\">[0,1,0,0],</div><div class=\"line\">[1,1,0,0]]</div><div class=\"line\"></div><div class=\"line\">Answer: 16</div></pre></td></tr></table></figure></p>\n<p>Explanation: The perimeter is the 16 yellow stripes in the image below:<br><img src=\"http://otqlqfy9h.bkt.clouddn.com/images/2017-11-17/2017_11_17_1.png\"></p>\n<h2 id=\"题目大意：\"><a href=\"#题目大意：\" class=\"headerlink\" title=\"题目大意：\"></a>题目大意：</h2><p>给定一个二维地图，1表示陆地，0表示水域。单元格水平或者竖直相连（不含对角线）。地图完全被水域环绕，只包含一个岛屿（也就是说，一个或者多个相连的陆地单元格）。岛屿没有湖泊（岛屿内部环绕的水域）。单元格是边长为1的正方形。地图是矩形，长宽不超过100。计算岛屿的周长。</p>\n<h3 id=\"解题思路1：\"><a href=\"#解题思路1：\" class=\"headerlink\" title=\"解题思路1：\"></a>解题思路1：</h3><hr>\n<p>DFS：深度优先遍历（递归实现）, 虑每个元素的四个方向，如果是边界或者0，则perimeter+1。<br>参考LeetCode Discuss：<br><a href=\"https://discuss.leetcode.com/topic/106301/java-c-straightforward-dfs-solution\" target=\"_blank\" rel=\"external\">https://discuss.leetcode.com/topic/106301/java-c-straightforward-dfs-solution</a><br><a href=\"https://discuss.leetcode.com/topic/106261/java-c-clean-code\" target=\"_blank\" rel=\"external\">https://discuss.leetcode.com/topic/106261/java-c-clean-code</a></p>\n<p><strong>C++代码：</strong><br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">islandPerimeter</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &gt;&amp; grid)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> m = grid.size();</div><div class=\"line\">        <span class=\"keyword\">int</span> n = grid[<span class=\"number\">0</span>].size();</div><div class=\"line\">        <span class=\"keyword\">int</span> nums = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"number\">1</span> == grid[i][j])</div><div class=\"line\">                    nums += bfs(grid, i, j);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> nums;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &gt;&amp; grid, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">0</span> || i &gt;= grid.size() || j &lt; <span class=\"number\">0</span> || j &gt;= grid[<span class=\"number\">0</span>].size()</div><div class=\"line\">            || <span class=\"number\">0</span> == grid[i][j])</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>; <span class=\"comment\">// stripes</span></div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"number\">-1</span> == grid[i][j])</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            grid[i][j] = <span class=\"number\">-1</span>; <span class=\"comment\">// mark visited</span></div><div class=\"line\">            <span class=\"keyword\">return</span> dfs(grid, i - <span class=\"number\">1</span>, j) + dfs(grid, i + <span class=\"number\">1</span>, j)</div><div class=\"line\">            + dfs(grid, i, j - <span class=\"number\">1</span>) + dfs(grid, i, j + <span class=\"number\">1</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p><strong>代码分析：</strong></p>\n<pre><code>1. 递归函数需要注意结束条件，即边界的处理。我们关心的是grid范围内，其值为1的元素\n2. 由于孤岛有四个维度，元素grid[i][j]的四个方向的下一个元素坐标分别为：[(i-1, j), (i+1, j), (i, j-1), (i, j+1)]\n3. 如果是边界点或者grid[i][j]为0的情况，则perimeter + 1\n4. 访问过的元素置为-1，与原数组元素值区分。\n5. 二维数组的vector表示\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> arr[<span class=\"number\">4</span>][<span class=\"number\">4</span>] = &#123;&#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;,&#123;<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>&#125;,&#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;,&#123;<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;&#125;;</div><div class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &gt; grid(<span class=\"number\">4</span>);</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; grid.size(); i++)</div><div class=\"line\">    grid[i].resize(<span class=\"number\">4</span>);</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">4</span>; j++) &#123;</div><div class=\"line\">        grid[i][j] = arr[i][j];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</code></pre><h3 id=\"解题思路2：\"><a href=\"#解题思路2：\" class=\"headerlink\" title=\"解题思路2：\"></a>解题思路2：</h3><hr>\n<p>BFS：广度优先遍历（借助队列迭代实现）<br>参考LeetCode Discuss：</p>\n<p><strong>C++代码：</strong><br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">islandPerimeter</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &gt;&amp; grid)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> m = grid.size();</div><div class=\"line\">        <span class=\"keyword\">int</span> n = grid[<span class=\"number\">0</span>].size();</div><div class=\"line\">        <span class=\"keyword\">int</span> nums = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"number\">1</span> == grid[i][j])</div><div class=\"line\">                    nums += bfs(grid, i, j);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> nums;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">bfs</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &gt;&amp; grid, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"built_in\">queue</span>&lt;pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; &gt; q;</div><div class=\"line\">        grid[i][j] = <span class=\"number\">-1</span>; <span class=\"comment\">// visited</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; dir(&#123;<span class=\"number\">-1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>&#125;); <span class=\"comment\">// c++11/14</span></div><div class=\"line\">        <span class=\"comment\">// int nums[] = &#123;-1, 0, 1, 0, -1&#125;;</span></div><div class=\"line\">        <span class=\"comment\">// vector&lt;int&gt; dir(nums, nums + sizeof(nums) / sizeof(int));</span></div><div class=\"line\">        q.push(pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;(i, j));</div><div class=\"line\">        <span class=\"keyword\">int</span> nums = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"number\">0</span> &lt; q.size()) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> m = q.front().first; <span class=\"comment\">// row index</span></div><div class=\"line\">            <span class=\"keyword\">int</span> n = q.front().second; <span class=\"comment\">// col index</span></div><div class=\"line\">            q.pop(); <span class=\"comment\">// remove from queue</span></div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> idx = <span class=\"number\">0</span>; idx &lt; dir.size() - <span class=\"number\">1</span>; idx++) &#123;</div><div class=\"line\">                <span class=\"keyword\">int</span> rowIdx = m + dir[idx]; <span class=\"comment\">// row index</span></div><div class=\"line\">                <span class=\"keyword\">int</span> colIdx = n + dir[idx + <span class=\"number\">1</span>]; <span class=\"comment\">// col index</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (rowIdx &lt; <span class=\"number\">0</span> || rowIdx &gt;= grid.size() || colIdx &lt; <span class=\"number\">0</span> || colIdx &gt;= grid[<span class=\"number\">0</span>].size()</div><div class=\"line\">                    || <span class=\"number\">0</span> == grid[rowIdx][colIdx])</div><div class=\"line\">                    nums++; <span class=\"comment\">//  accumulate stripes</span></div><div class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"number\">-1</span> == grid[rowIdx][colIdx])</div><div class=\"line\">                    <span class=\"keyword\">continue</span>; <span class=\"comment\">// skip visted item</span></div><div class=\"line\">                <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    q.push(pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;(rowIdx, colIdx));</div><div class=\"line\">                    grid[rowIdx][colIdx] = <span class=\"number\">-1</span>; <span class=\"comment\">// mark visited</span></div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> nums;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p><strong>代码分析：</strong></p>\n<pre><code>1. 递归函数需要注意结束条件，即边界的处理。我们关心的是grid范围内，其值为1的元素\n2. 由于孤岛有四个维度，元素grid[i][j]的四个方向的下一个元素坐标分别为：[(i-1, j), (i+1, j), (i, j-1), (i, j+1)]\n3. 如果是边界点或者grid[i][j]为0的情况，则perimeter + 1\n4. 访问过的元素置为-1，与原数组元素值区分。\n5. 二维数组的vector表示\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> arr[<span class=\"number\">4</span>][<span class=\"number\">4</span>] = &#123;&#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;,&#123;<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>&#125;,&#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;,&#123;<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;&#125;;</div><div class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &gt; grid(<span class=\"number\">4</span>);</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; grid.size(); i++)</div><div class=\"line\">    grid[i].resize(<span class=\"number\">4</span>);</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">4</span>; j++) &#123;</div><div class=\"line\">        grid[i][j] = arr[i][j];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</code></pre><h3 id=\"解题思路3：\"><a href=\"#解题思路3：\" class=\"headerlink\" title=\"解题思路3：\"></a>解题思路3：</h3><hr>\n<p>代码简洁的全遍历，复杂度O(n)。<br>参考LeetCode Discuss：<br><a href=\"https://discuss.leetcode.com/topic/111260/c-short-and-fast-beats-93\" target=\"_blank\" rel=\"external\">https://discuss.leetcode.com/topic/111260/c-short-and-fast-beats-93</a></p>\n<p><strong>C++代码：</strong><br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">islandPerimeter</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> p = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; grid.size(); ++i)</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; grid[i].size(); ++j)</div><div class=\"line\">                <span class=\"keyword\">if</span> (grid[i][j] == <span class=\"number\">1</span>)</div><div class=\"line\">                    p += (i == <span class=\"number\">0</span> || grid[i - <span class=\"number\">1</span>][j] == <span class=\"number\">0</span>) + (i == grid.size() - <span class=\"number\">1</span> || grid[i + <span class=\"number\">1</span>][j] == <span class=\"number\">0</span>) +</div><div class=\"line\">                         (j == <span class=\"number\">0</span> || grid[i][j - <span class=\"number\">1</span>] == <span class=\"number\">0</span>) + (j == grid[i].size() - <span class=\"number\">1</span> || grid[i][j + <span class=\"number\">1</span>] == <span class=\"number\">0</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> p;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p><strong>代码分析：</strong></p>\n<pre><code>1. 代的方式进行全遍历，代码比较简洁。不过就是循环内嵌套过多的逻辑判断，效率比较低。\n2. 关注点在确定当前grid[i][j]为1后，观察四个方向的元素是否为0，如果是则+1.如果是i = 0或者j=0的边界则直接+1；\n</code></pre><h3 id=\"解题思路4：\"><a href=\"#解题思路4：\" class=\"headerlink\" title=\"解题思路4：\"></a>解题思路4：</h3><hr>\n<pre><code>1. 确定“1”的个数，如果没有相邻包围的元素的话，perimeter为“1”的个数×4\n2. 确定相邻的元素边界墙的个数，需要减去从上述结果中减去2×边界墙个数\n</code></pre><p>参考LeetCode Discuss：<br><a href=\"https://discuss.leetcode.com/topic/68845/c-solution-with-explanation\" target=\"_blank\" rel=\"external\">https://discuss.leetcode.com/topic/68845/c-solution-with-explanation</a></p>\n<p><strong>C++代码：</strong><br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">islandPerimeter</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> count=<span class=\"number\">0</span>, repeat=<span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;grid.size();i++)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>; j&lt;grid[i].size();j++)</div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span>(grid[i][j]==<span class=\"number\">1</span>)</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        count ++;</div><div class=\"line\">                        <span class=\"keyword\">if</span>(i!=<span class=\"number\">0</span> &amp;&amp; grid[i<span class=\"number\">-1</span>][j] == <span class=\"number\">1</span>) repeat++;</div><div class=\"line\">                        <span class=\"keyword\">if</span>(j!=<span class=\"number\">0</span> &amp;&amp; grid[i][j<span class=\"number\">-1</span>] == <span class=\"number\">1</span>) repeat++;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">4</span>*count-repeat*<span class=\"number\">2</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p><strong>代码分析：</strong><br>总周长perimeter的解法一般两种：</p>\n<pre><code>1. “1”元素总长-相邻边×2\n2. perimeter=边界元素个数+与“0”相邻元素个数\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"题目描述：\"><a href=\"#题目描述：\" class=\"headerlink\" title=\"题目描述：\"></a><a href=\"https://leetcode.com/problems/island-perimeter/description/\" target=\"_blank\" rel=\"external\">题目描述</a>：</h2><p>You are given a map in form of a two-dimensional integer grid where 1 represents land and 0 represents water. Grid cells are connected horizontally/vertically (not diagonally). The grid is completely surrounded by water, and there is exactly one island (i.e., one or more connected land cells). The island doesn’t have “lakes” (water inside that isn’t connected to the water around the island). One cell is a square with side length 1. The grid is rectangular, width and height don’t exceed 100. Determine the perimeter of the island.<br><strong>Example:</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">[[0,1,0,0],</div><div class=\"line\">[1,1,1,0],</div><div class=\"line\">[0,1,0,0],</div><div class=\"line\">[1,1,0,0]]</div><div class=\"line\"></div><div class=\"line\">Answer: 16</div></pre></td></tr></table></figure></p>\n<p>Explanation: The perimeter is the 16 yellow stripes in the image below:<br><img src=\"http://otqlqfy9h.bkt.clouddn.com/images/2017-11-17/2017_11_17_1.png\"></p>\n<h2 id=\"题目大意：\"><a href=\"#题目大意：\" class=\"headerlink\" title=\"题目大意：\"></a>题目大意：</h2><p>给定一个二维地图，1表示陆地，0表示水域。单元格水平或者竖直相连（不含对角线）。地图完全被水域环绕，只包含一个岛屿（也就是说，一个或者多个相连的陆地单元格）。岛屿没有湖泊（岛屿内部环绕的水域）。单元格是边长为1的正方形。地图是矩形，长宽不超过100。计算岛屿的周长。</p>\n<h3 id=\"解题思路1：\"><a href=\"#解题思路1：\" class=\"headerlink\" title=\"解题思路1：\"></a>解题思路1：</h3><hr>\n<p>DFS：深度优先遍历（递归实现）, 虑每个元素的四个方向，如果是边界或者0，则perimeter+1。<br>参考LeetCode Discuss：<br><a href=\"https://discuss.leetcode.com/topic/106301/java-c-straightforward-dfs-solution\" target=\"_blank\" rel=\"external\">https://discuss.leetcode.com/topic/106301/java-c-straightforward-dfs-solution</a><br><a href=\"https://discuss.leetcode.com/topic/106261/java-c-clean-code\" target=\"_blank\" rel=\"external\">https://discuss.leetcode.com/topic/106261/java-c-clean-code</a></p>\n<p><strong>C++代码：</strong><br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">islandPerimeter</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &gt;&amp; grid)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> m = grid.size();</div><div class=\"line\">        <span class=\"keyword\">int</span> n = grid[<span class=\"number\">0</span>].size();</div><div class=\"line\">        <span class=\"keyword\">int</span> nums = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"number\">1</span> == grid[i][j])</div><div class=\"line\">                    nums += bfs(grid, i, j);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> nums;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &gt;&amp; grid, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">0</span> || i &gt;= grid.size() || j &lt; <span class=\"number\">0</span> || j &gt;= grid[<span class=\"number\">0</span>].size()</div><div class=\"line\">            || <span class=\"number\">0</span> == grid[i][j])</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>; <span class=\"comment\">// stripes</span></div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"number\">-1</span> == grid[i][j])</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            grid[i][j] = <span class=\"number\">-1</span>; <span class=\"comment\">// mark visited</span></div><div class=\"line\">            <span class=\"keyword\">return</span> dfs(grid, i - <span class=\"number\">1</span>, j) + dfs(grid, i + <span class=\"number\">1</span>, j)</div><div class=\"line\">            + dfs(grid, i, j - <span class=\"number\">1</span>) + dfs(grid, i, j + <span class=\"number\">1</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p><strong>代码分析：</strong></p>\n<pre><code>1. 递归函数需要注意结束条件，即边界的处理。我们关心的是grid范围内，其值为1的元素\n2. 由于孤岛有四个维度，元素grid[i][j]的四个方向的下一个元素坐标分别为：[(i-1, j), (i+1, j), (i, j-1), (i, j+1)]\n3. 如果是边界点或者grid[i][j]为0的情况，则perimeter + 1\n4. 访问过的元素置为-1，与原数组元素值区分。\n5. 二维数组的vector表示\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> arr[<span class=\"number\">4</span>][<span class=\"number\">4</span>] = &#123;&#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;,&#123;<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>&#125;,&#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;,&#123;<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;&#125;;</div><div class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &gt; grid(<span class=\"number\">4</span>);</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; grid.size(); i++)</div><div class=\"line\">    grid[i].resize(<span class=\"number\">4</span>);</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">4</span>; j++) &#123;</div><div class=\"line\">        grid[i][j] = arr[i][j];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</code></pre><h3 id=\"解题思路2：\"><a href=\"#解题思路2：\" class=\"headerlink\" title=\"解题思路2：\"></a>解题思路2：</h3><hr>\n<p>BFS：广度优先遍历（借助队列迭代实现）<br>参考LeetCode Discuss：</p>\n<p><strong>C++代码：</strong><br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">islandPerimeter</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &gt;&amp; grid)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> m = grid.size();</div><div class=\"line\">        <span class=\"keyword\">int</span> n = grid[<span class=\"number\">0</span>].size();</div><div class=\"line\">        <span class=\"keyword\">int</span> nums = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"number\">1</span> == grid[i][j])</div><div class=\"line\">                    nums += bfs(grid, i, j);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> nums;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">bfs</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &gt;&amp; grid, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"built_in\">queue</span>&lt;pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; &gt; q;</div><div class=\"line\">        grid[i][j] = <span class=\"number\">-1</span>; <span class=\"comment\">// visited</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; dir(&#123;<span class=\"number\">-1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>&#125;); <span class=\"comment\">// c++11/14</span></div><div class=\"line\">        <span class=\"comment\">// int nums[] = &#123;-1, 0, 1, 0, -1&#125;;</span></div><div class=\"line\">        <span class=\"comment\">// vector&lt;int&gt; dir(nums, nums + sizeof(nums) / sizeof(int));</span></div><div class=\"line\">        q.push(pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;(i, j));</div><div class=\"line\">        <span class=\"keyword\">int</span> nums = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"number\">0</span> &lt; q.size()) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> m = q.front().first; <span class=\"comment\">// row index</span></div><div class=\"line\">            <span class=\"keyword\">int</span> n = q.front().second; <span class=\"comment\">// col index</span></div><div class=\"line\">            q.pop(); <span class=\"comment\">// remove from queue</span></div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> idx = <span class=\"number\">0</span>; idx &lt; dir.size() - <span class=\"number\">1</span>; idx++) &#123;</div><div class=\"line\">                <span class=\"keyword\">int</span> rowIdx = m + dir[idx]; <span class=\"comment\">// row index</span></div><div class=\"line\">                <span class=\"keyword\">int</span> colIdx = n + dir[idx + <span class=\"number\">1</span>]; <span class=\"comment\">// col index</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (rowIdx &lt; <span class=\"number\">0</span> || rowIdx &gt;= grid.size() || colIdx &lt; <span class=\"number\">0</span> || colIdx &gt;= grid[<span class=\"number\">0</span>].size()</div><div class=\"line\">                    || <span class=\"number\">0</span> == grid[rowIdx][colIdx])</div><div class=\"line\">                    nums++; <span class=\"comment\">//  accumulate stripes</span></div><div class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"number\">-1</span> == grid[rowIdx][colIdx])</div><div class=\"line\">                    <span class=\"keyword\">continue</span>; <span class=\"comment\">// skip visted item</span></div><div class=\"line\">                <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    q.push(pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;(rowIdx, colIdx));</div><div class=\"line\">                    grid[rowIdx][colIdx] = <span class=\"number\">-1</span>; <span class=\"comment\">// mark visited</span></div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> nums;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p><strong>代码分析：</strong></p>\n<pre><code>1. 递归函数需要注意结束条件，即边界的处理。我们关心的是grid范围内，其值为1的元素\n2. 由于孤岛有四个维度，元素grid[i][j]的四个方向的下一个元素坐标分别为：[(i-1, j), (i+1, j), (i, j-1), (i, j+1)]\n3. 如果是边界点或者grid[i][j]为0的情况，则perimeter + 1\n4. 访问过的元素置为-1，与原数组元素值区分。\n5. 二维数组的vector表示\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> arr[<span class=\"number\">4</span>][<span class=\"number\">4</span>] = &#123;&#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;,&#123;<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>&#125;,&#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;,&#123;<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;&#125;;</div><div class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &gt; grid(<span class=\"number\">4</span>);</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; grid.size(); i++)</div><div class=\"line\">    grid[i].resize(<span class=\"number\">4</span>);</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">4</span>; j++) &#123;</div><div class=\"line\">        grid[i][j] = arr[i][j];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</code></pre><h3 id=\"解题思路3：\"><a href=\"#解题思路3：\" class=\"headerlink\" title=\"解题思路3：\"></a>解题思路3：</h3><hr>\n<p>代码简洁的全遍历，复杂度O(n)。<br>参考LeetCode Discuss：<br><a href=\"https://discuss.leetcode.com/topic/111260/c-short-and-fast-beats-93\" target=\"_blank\" rel=\"external\">https://discuss.leetcode.com/topic/111260/c-short-and-fast-beats-93</a></p>\n<p><strong>C++代码：</strong><br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">islandPerimeter</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> p = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; grid.size(); ++i)</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; grid[i].size(); ++j)</div><div class=\"line\">                <span class=\"keyword\">if</span> (grid[i][j] == <span class=\"number\">1</span>)</div><div class=\"line\">                    p += (i == <span class=\"number\">0</span> || grid[i - <span class=\"number\">1</span>][j] == <span class=\"number\">0</span>) + (i == grid.size() - <span class=\"number\">1</span> || grid[i + <span class=\"number\">1</span>][j] == <span class=\"number\">0</span>) +</div><div class=\"line\">                         (j == <span class=\"number\">0</span> || grid[i][j - <span class=\"number\">1</span>] == <span class=\"number\">0</span>) + (j == grid[i].size() - <span class=\"number\">1</span> || grid[i][j + <span class=\"number\">1</span>] == <span class=\"number\">0</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> p;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p><strong>代码分析：</strong></p>\n<pre><code>1. 代的方式进行全遍历，代码比较简洁。不过就是循环内嵌套过多的逻辑判断，效率比较低。\n2. 关注点在确定当前grid[i][j]为1后，观察四个方向的元素是否为0，如果是则+1.如果是i = 0或者j=0的边界则直接+1；\n</code></pre><h3 id=\"解题思路4：\"><a href=\"#解题思路4：\" class=\"headerlink\" title=\"解题思路4：\"></a>解题思路4：</h3><hr>\n<pre><code>1. 确定“1”的个数，如果没有相邻包围的元素的话，perimeter为“1”的个数×4\n2. 确定相邻的元素边界墙的个数，需要减去从上述结果中减去2×边界墙个数\n</code></pre><p>参考LeetCode Discuss：<br><a href=\"https://discuss.leetcode.com/topic/68845/c-solution-with-explanation\" target=\"_blank\" rel=\"external\">https://discuss.leetcode.com/topic/68845/c-solution-with-explanation</a></p>\n<p><strong>C++代码：</strong><br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">islandPerimeter</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> count=<span class=\"number\">0</span>, repeat=<span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;grid.size();i++)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>; j&lt;grid[i].size();j++)</div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span>(grid[i][j]==<span class=\"number\">1</span>)</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        count ++;</div><div class=\"line\">                        <span class=\"keyword\">if</span>(i!=<span class=\"number\">0</span> &amp;&amp; grid[i<span class=\"number\">-1</span>][j] == <span class=\"number\">1</span>) repeat++;</div><div class=\"line\">                        <span class=\"keyword\">if</span>(j!=<span class=\"number\">0</span> &amp;&amp; grid[i][j<span class=\"number\">-1</span>] == <span class=\"number\">1</span>) repeat++;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">4</span>*count-repeat*<span class=\"number\">2</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p><strong>代码分析：</strong><br>总周长perimeter的解法一般两种：</p>\n<pre><code>1. “1”元素总长-相邻边×2\n2. perimeter=边界元素个数+与“0”相邻元素个数\n</code></pre>"},{"title":"LeetCode 122. Best Time to Buy and Sell Stock II","date":"2017-11-21T02:30:50.000Z","_content":"\n## [题目描述][1]：\nSay you have an array for which the ith element is the price of a given stock on day i.\nDesign an algorithm to find the maximum profit. You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times). However, you may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).\n\n## 题目大意：\n假设有一个数组，它的第i个元素是一个给定的股票在第i天的价格。设计一个算法来找到最大的利润。你可以完成尽可能多的交易(多次买卖股票)。然而,你不能同时参与多个交易(你必须在再次购买前出售股票)。\n给出一个数组样例[2,1,2,0,1], 返回 2\n\n### 解题思路：\n---\n这个是一道DP(动态规划)的题。总的来说就是如何N天的总利润如何最大呢？就是一旦有获利空间就去赚钱，所以就是把每两天的价格增长量加起来就是总利润了，如果存在两天的价格增长量为负，那么就不进行交易。同一天买卖，收益为0，所以需要隔天买卖，保证利润增值。\n参考LeetCode Discuss：\nhttps://discuss.leetcode.com/topic/17081/three-lines-in-c-with-explanation\n\n**C++代码：**\n``` c++\nclass Solution {\npublic:\n    int maxProfit(vector<int> &prices)\n    {\n        int ret = 0;\n        for (size_t p = 1; p < prices.size(); ++p)\n          // Only consider positive value to make sure get max profit\n          ret += max(prices[p] - prices[p - 1], 0); \n        return ret;\n    }\n};\n```\n\n**代码分析：**\n    1. 题意为给定一个数组，数组中第i个元素的值对应着第i天的股票，你可以完成多次交易，但是每次交易只能买入一次并卖出,求进行\n    多次交易所能得到的最大利润。该题为Best Time to Buy and Sell Stock的加强版。\n    2. 与Best Time to Buy and Sell Stock类似，该题同样考查的是最大差值。只不过该题考查数组中所有相邻且递增元素\n    的数值之差的总和。只要第i+1天的值大于第i天的值，则可买入，求得利润（差值），遍历整个数组，得到所用差值之和即为总的利润。\n    负值则跳过。充分体现了DP的精髓，局部最优就是整体最优解。\n    3. 假设有四个数字，\"a <= b <= c <= d\", the profit is \"d - a = (b - a) + (c - b) + (d - c)\"。\n    例如[5,8,9,10],maxProfit=(8-5)+(9-8)+(10-9)=10-5=5; // 这是理想情况\n    假如其中有负值，则跳过这几个元素，直到获取正值，保证利润都是递增。\n\n\n[1]: https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/description/\n","source":"_posts/LeetCode-BestTimetoBuyandSellStockII.md","raw":"---\ntitle: LeetCode 122. Best Time to Buy and Sell Stock II\ndate: 2017-11-21 10:30:50\ncategories: LeetCode\ntags:\n - LeetCode\n - Algorithms\n - Data Structure\n - Array\n - DP\n - Dynamic Programming\n---\n\n## [题目描述][1]：\nSay you have an array for which the ith element is the price of a given stock on day i.\nDesign an algorithm to find the maximum profit. You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times). However, you may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).\n\n## 题目大意：\n假设有一个数组，它的第i个元素是一个给定的股票在第i天的价格。设计一个算法来找到最大的利润。你可以完成尽可能多的交易(多次买卖股票)。然而,你不能同时参与多个交易(你必须在再次购买前出售股票)。\n给出一个数组样例[2,1,2,0,1], 返回 2\n\n### 解题思路：\n---\n这个是一道DP(动态规划)的题。总的来说就是如何N天的总利润如何最大呢？就是一旦有获利空间就去赚钱，所以就是把每两天的价格增长量加起来就是总利润了，如果存在两天的价格增长量为负，那么就不进行交易。同一天买卖，收益为0，所以需要隔天买卖，保证利润增值。\n参考LeetCode Discuss：\nhttps://discuss.leetcode.com/topic/17081/three-lines-in-c-with-explanation\n\n**C++代码：**\n``` c++\nclass Solution {\npublic:\n    int maxProfit(vector<int> &prices)\n    {\n        int ret = 0;\n        for (size_t p = 1; p < prices.size(); ++p)\n          // Only consider positive value to make sure get max profit\n          ret += max(prices[p] - prices[p - 1], 0); \n        return ret;\n    }\n};\n```\n\n**代码分析：**\n    1. 题意为给定一个数组，数组中第i个元素的值对应着第i天的股票，你可以完成多次交易，但是每次交易只能买入一次并卖出,求进行\n    多次交易所能得到的最大利润。该题为Best Time to Buy and Sell Stock的加强版。\n    2. 与Best Time to Buy and Sell Stock类似，该题同样考查的是最大差值。只不过该题考查数组中所有相邻且递增元素\n    的数值之差的总和。只要第i+1天的值大于第i天的值，则可买入，求得利润（差值），遍历整个数组，得到所用差值之和即为总的利润。\n    负值则跳过。充分体现了DP的精髓，局部最优就是整体最优解。\n    3. 假设有四个数字，\"a <= b <= c <= d\", the profit is \"d - a = (b - a) + (c - b) + (d - c)\"。\n    例如[5,8,9,10],maxProfit=(8-5)+(9-8)+(10-9)=10-5=5; // 这是理想情况\n    假如其中有负值，则跳过这几个元素，直到获取正值，保证利润都是递增。\n\n\n[1]: https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/description/\n","slug":"LeetCode-BestTimetoBuyandSellStockII","published":1,"updated":"2017-11-21T02:43:55.204Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjadpus9r000bcoxdp3zivdre","content":"<h2 id=\"题目描述：\"><a href=\"#题目描述：\" class=\"headerlink\" title=\"题目描述：\"></a><a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/description/\" target=\"_blank\" rel=\"external\">题目描述</a>：</h2><p>Say you have an array for which the ith element is the price of a given stock on day i.<br>Design an algorithm to find the maximum profit. You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times). However, you may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).</p>\n<h2 id=\"题目大意：\"><a href=\"#题目大意：\" class=\"headerlink\" title=\"题目大意：\"></a>题目大意：</h2><p>假设有一个数组，它的第i个元素是一个给定的股票在第i天的价格。设计一个算法来找到最大的利润。你可以完成尽可能多的交易(多次买卖股票)。然而,你不能同时参与多个交易(你必须在再次购买前出售股票)。<br>给出一个数组样例[2,1,2,0,1], 返回 2</p>\n<h3 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h3><hr>\n<p>这个是一道DP(动态规划)的题。总的来说就是如何N天的总利润如何最大呢？就是一旦有获利空间就去赚钱，所以就是把每两天的价格增长量加起来就是总利润了，如果存在两天的价格增长量为负，那么就不进行交易。同一天买卖，收益为0，所以需要隔天买卖，保证利润增值。<br>参考LeetCode Discuss：<br><a href=\"https://discuss.leetcode.com/topic/17081/three-lines-in-c-with-explanation\" target=\"_blank\" rel=\"external\">https://discuss.leetcode.com/topic/17081/three-lines-in-c-with-explanation</a></p>\n<p><strong>C++代码：</strong><br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxProfit</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &amp;prices)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> ret = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> p = <span class=\"number\">1</span>; p &lt; prices.size(); ++p)</div><div class=\"line\">          <span class=\"comment\">// Only consider positive value to make sure get max profit</span></div><div class=\"line\">          ret += max(prices[p] - prices[p - <span class=\"number\">1</span>], <span class=\"number\">0</span>); </div><div class=\"line\">        <span class=\"keyword\">return</span> ret;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p><strong>代码分析：</strong></p>\n<pre><code>1. 题意为给定一个数组，数组中第i个元素的值对应着第i天的股票，你可以完成多次交易，但是每次交易只能买入一次并卖出,求进行\n多次交易所能得到的最大利润。该题为Best Time to Buy and Sell Stock的加强版。\n2. 与Best Time to Buy and Sell Stock类似，该题同样考查的是最大差值。只不过该题考查数组中所有相邻且递增元素\n的数值之差的总和。只要第i+1天的值大于第i天的值，则可买入，求得利润（差值），遍历整个数组，得到所用差值之和即为总的利润。\n负值则跳过。充分体现了DP的精髓，局部最优就是整体最优解。\n3. 假设有四个数字，&quot;a &lt;= b &lt;= c &lt;= d&quot;, the profit is &quot;d - a = (b - a) + (c - b) + (d - c)&quot;。\n例如[5,8,9,10],maxProfit=(8-5)+(9-8)+(10-9)=10-5=5; // 这是理想情况\n假如其中有负值，则跳过这几个元素，直到获取正值，保证利润都是递增。\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"题目描述：\"><a href=\"#题目描述：\" class=\"headerlink\" title=\"题目描述：\"></a><a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/description/\" target=\"_blank\" rel=\"external\">题目描述</a>：</h2><p>Say you have an array for which the ith element is the price of a given stock on day i.<br>Design an algorithm to find the maximum profit. You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times). However, you may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).</p>\n<h2 id=\"题目大意：\"><a href=\"#题目大意：\" class=\"headerlink\" title=\"题目大意：\"></a>题目大意：</h2><p>假设有一个数组，它的第i个元素是一个给定的股票在第i天的价格。设计一个算法来找到最大的利润。你可以完成尽可能多的交易(多次买卖股票)。然而,你不能同时参与多个交易(你必须在再次购买前出售股票)。<br>给出一个数组样例[2,1,2,0,1], 返回 2</p>\n<h3 id=\"解题思路：\"><a href=\"#解题思路：\" class=\"headerlink\" title=\"解题思路：\"></a>解题思路：</h3><hr>\n<p>这个是一道DP(动态规划)的题。总的来说就是如何N天的总利润如何最大呢？就是一旦有获利空间就去赚钱，所以就是把每两天的价格增长量加起来就是总利润了，如果存在两天的价格增长量为负，那么就不进行交易。同一天买卖，收益为0，所以需要隔天买卖，保证利润增值。<br>参考LeetCode Discuss：<br><a href=\"https://discuss.leetcode.com/topic/17081/three-lines-in-c-with-explanation\" target=\"_blank\" rel=\"external\">https://discuss.leetcode.com/topic/17081/three-lines-in-c-with-explanation</a></p>\n<p><strong>C++代码：</strong><br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxProfit</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &amp;prices)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> ret = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> p = <span class=\"number\">1</span>; p &lt; prices.size(); ++p)</div><div class=\"line\">          <span class=\"comment\">// Only consider positive value to make sure get max profit</span></div><div class=\"line\">          ret += max(prices[p] - prices[p - <span class=\"number\">1</span>], <span class=\"number\">0</span>); </div><div class=\"line\">        <span class=\"keyword\">return</span> ret;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p><strong>代码分析：</strong></p>\n<pre><code>1. 题意为给定一个数组，数组中第i个元素的值对应着第i天的股票，你可以完成多次交易，但是每次交易只能买入一次并卖出,求进行\n多次交易所能得到的最大利润。该题为Best Time to Buy and Sell Stock的加强版。\n2. 与Best Time to Buy and Sell Stock类似，该题同样考查的是最大差值。只不过该题考查数组中所有相邻且递增元素\n的数值之差的总和。只要第i+1天的值大于第i天的值，则可买入，求得利润（差值），遍历整个数组，得到所用差值之和即为总的利润。\n负值则跳过。充分体现了DP的精髓，局部最优就是整体最优解。\n3. 假设有四个数字，&quot;a &lt;= b &lt;= c &lt;= d&quot;, the profit is &quot;d - a = (b - a) + (c - b) + (d - c)&quot;。\n例如[5,8,9,10],maxProfit=(8-5)+(9-8)+(10-9)=10-5=5; // 这是理想情况\n假如其中有负值，则跳过这几个元素，直到获取正值，保证利润都是递增。\n</code></pre>"},{"title":"LeetCode 169. Majority Element","date":"2017-11-24T09:27:42.000Z","_content":"\n## [题目描述][1]：\nGiven an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times.\nYou may assume that the array is non-empty and the majority element always exist in the array.\n\n## 题目大意：\n给定一个长度为n的数组，寻找其中的“众数”。众数是指出现次数大于 ⌊ n/2 ⌋ 的元素。\n你可以假设数组是非空的并且数组中的众数永远存在。\n\n##  参考LeetCode Discuss：\nhttps://discuss.leetcode.com/topic/8692/o-n-time-o-1-space-fastest-solution/20\nhttps://discuss.leetcode.com/topic/17446/6-suggested-solutions-in-c-with-explanations\n\n\n### 解题思路1：\n---\nHashTable：使用HashTasble给每个出现的元素计数，遍历数组，发现超过半数的众数就返回。\n\n**C++代码：**\n``` c++\nclass Solution {\npublic:\n    int majorityElement(vector<int>& nums) {\n        unordered_map<int, int> mapNums;\n        for (int i = 0; i < nums.size(); ++i) {\n            ++mapNums[nums[i]];\n            if (mapNums[nums[i]] > nums.size() / 2) return nums[i];\n        }\n        return 0;\n    }\n};\n```\n\n**代码分析：**\n时间复杂度满足O(n)，但是由于HashTable（unordered_map）的存在，空间复杂度就不能满足O(1)。\n\n### 解题思路2：\n---\n排序：排序的结果就是众数如果存在，中间的元素一定是众数（过半）\n\n**C++代码：**\n``` c++\nclass Solution {\npublic:\n    int majorityElement(vector<int>& nums) {\n        sort(nums.begin(), nums.end());\n        return (nums.size() / 2);\n    }\n};\n```\n\n**代码分析：**\n1. 时间复杂度主要在排序上， N*log2(N)\n2. 如果数组为空或者不存在众数，上述代码需要考虑更全面些\n    ```c++\n    class Solution {\n    public:\n        int majorityElement(vector<int>& nums) {\n            sort(nums.begin(), nums.end());\n            int pivot = nums.size() / 2;\n            int count = 0;\n            for (int i = pivot; i < nums.size(); i++) {\n                if (nums[pivot] != nums[i]) break;\n                count++;\n            }\n            for (int i = pivot - 1; i >= 0; i--) {\n                if (nums[pivot] != nums[i]) break;\n                count++;\n            }\n            if (count > pivot) return nums[pivot];\n            else return 0;\n        }\n    };\n    ```\n\n### 解题思路3：\n---\n投票算法：遍历元素，利用candidate 和 count两个变量找到众数。（前提：众数一定存在）\n\n**C++代码：**\n``` c++\nclass Solution {\npublic:\n    int majorityElement(vector<int>& nums) {\n        int major = nums, counts = 0, n = nums.size();\n        for (int i = 0; i < n; i++) {\n            if (!counts) {\n                major = nums[i];\n                counts = 1;\n            }\n            else counts += (nums[i] == major) ? 1 : -1;\n        }\n        return major;\n    }\n};\n```\n\n**代码分析：**\n[Moore’s voting algorithm][2]是比较有意思的一个算法，在dicuss上看到的。这个算法是解决这样一个问题：从一个数组中找出出现半数以上的元素。大意是这样：\n> We will sweep down the sequence starting at the pointer position shown above. As we sweep we maintain a pair consisting of a current candidate and a counter. Initially, the current candidate is unknown and the counter is 0.\nWhen we move the pointer forward over an element e:\n    - If the counter is 0, we set the current candidate to e and we set the counter to 1.\n    - If the counter is not 0, we increment or decrement the counter according to whether e is the current candidate.\n> When we are done, the current candidate is the majority element, if there is a majority.\n“投票算法”，设定两个变量candidate和count。candidate保存当前可能的候选众数，count保存该候选众数的出现次数。\n遍历数组num。\n如果当前的数字e与候选众数candidate相同，则将计数count + 1\n否则，如果当前的候选众数candidate为空，或者count为0，则将候选众数candidate的值置为e，并将计数count置为1。\n否则，将计数count - 1\n最终留下的候选众数candidate即为最终答案。\n以上算法时间复杂度为O(n)，空间复杂度为O(1)\n\n## 官方解析：\n时间复杂度: O(n2) — 蛮力法: 依次检查每一个元素是否为众数\n时间复杂度: O(n), 空间复杂度: O(n) — 哈希表: 维护一个每一个元素出现次数的哈希表, 然后找到出现次数最多的元素\n时间复杂度: O(n log n) — 排序: 在排序后找出连续重复出现次数最多的元素\n平均时间复杂度: O(n), 最坏复杂度: 无穷大 — 随机算法: 随机选取一个元素计算其是否为众数. 如果不是, 就重复上一步骤直到找到为止。 由于选出众数的概率 > 1 / 2, 因此期望的尝试次数 < 2\n时间复杂度: O(n log n) — 分治法: 将数组拆成2半, 然后找出前一半的众数A和后一半的众数B。则全局众数要么是A要么是B。 如果 A == B, 则它自然而然就是全局众数。 如果不是, 则A和B都是候选众数, 则至多只需要检查这两个元素的出现次数即可。 时间复杂度, T(n) = T(n/2) + 2n = O(n log n).\n时间复杂度: O(n) — Moore投票算法: 我们维护一个当前的候选众数和一个初始为0的计数器。遍历数组时，我们看当前的元素x:\n\n    * 如果计数器是0, 我们将候选众数置为 x 并将计数器置为 1\n    * 如果计数器非0, 我们根据x与当前的候选众数是否相等对计数器+1或者-1\n    * 一趟之后, 当前的候选众数就是所求众数. 时间复杂度 = O(n).\n\n时间复杂度: O(n) — 位操作法: 我们需要32次迭代, 每一次计算所有n个数的第i位的1的个数。由于众数一定存在，那么或者1的个数 > 0的个数 或者反过来(但绝不会相同)。 众数的第i位一定是计数较多数字。\n\n\n[1]: https://leetcode.com/problems/majority-element/description/\n[2]: http://blog.csdn.net/chfe007/article/details/42919017\n","source":"_posts/LeetCode-MajorityElement.md","raw":"---\ntitle: LeetCode 169. Majority Element\ndate: 2017-11-24 17:27:42\ncategories: LeetCode\ntags:\n - LeetCode\n - Algorithms\n - Data Structure\n - Array\n - Sort\n - HashTable\n - Majority Element\n - Moore’s voting algorithm\n---\n\n## [题目描述][1]：\nGiven an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times.\nYou may assume that the array is non-empty and the majority element always exist in the array.\n\n## 题目大意：\n给定一个长度为n的数组，寻找其中的“众数”。众数是指出现次数大于 ⌊ n/2 ⌋ 的元素。\n你可以假设数组是非空的并且数组中的众数永远存在。\n\n##  参考LeetCode Discuss：\nhttps://discuss.leetcode.com/topic/8692/o-n-time-o-1-space-fastest-solution/20\nhttps://discuss.leetcode.com/topic/17446/6-suggested-solutions-in-c-with-explanations\n\n\n### 解题思路1：\n---\nHashTable：使用HashTasble给每个出现的元素计数，遍历数组，发现超过半数的众数就返回。\n\n**C++代码：**\n``` c++\nclass Solution {\npublic:\n    int majorityElement(vector<int>& nums) {\n        unordered_map<int, int> mapNums;\n        for (int i = 0; i < nums.size(); ++i) {\n            ++mapNums[nums[i]];\n            if (mapNums[nums[i]] > nums.size() / 2) return nums[i];\n        }\n        return 0;\n    }\n};\n```\n\n**代码分析：**\n时间复杂度满足O(n)，但是由于HashTable（unordered_map）的存在，空间复杂度就不能满足O(1)。\n\n### 解题思路2：\n---\n排序：排序的结果就是众数如果存在，中间的元素一定是众数（过半）\n\n**C++代码：**\n``` c++\nclass Solution {\npublic:\n    int majorityElement(vector<int>& nums) {\n        sort(nums.begin(), nums.end());\n        return (nums.size() / 2);\n    }\n};\n```\n\n**代码分析：**\n1. 时间复杂度主要在排序上， N*log2(N)\n2. 如果数组为空或者不存在众数，上述代码需要考虑更全面些\n    ```c++\n    class Solution {\n    public:\n        int majorityElement(vector<int>& nums) {\n            sort(nums.begin(), nums.end());\n            int pivot = nums.size() / 2;\n            int count = 0;\n            for (int i = pivot; i < nums.size(); i++) {\n                if (nums[pivot] != nums[i]) break;\n                count++;\n            }\n            for (int i = pivot - 1; i >= 0; i--) {\n                if (nums[pivot] != nums[i]) break;\n                count++;\n            }\n            if (count > pivot) return nums[pivot];\n            else return 0;\n        }\n    };\n    ```\n\n### 解题思路3：\n---\n投票算法：遍历元素，利用candidate 和 count两个变量找到众数。（前提：众数一定存在）\n\n**C++代码：**\n``` c++\nclass Solution {\npublic:\n    int majorityElement(vector<int>& nums) {\n        int major = nums, counts = 0, n = nums.size();\n        for (int i = 0; i < n; i++) {\n            if (!counts) {\n                major = nums[i];\n                counts = 1;\n            }\n            else counts += (nums[i] == major) ? 1 : -1;\n        }\n        return major;\n    }\n};\n```\n\n**代码分析：**\n[Moore’s voting algorithm][2]是比较有意思的一个算法，在dicuss上看到的。这个算法是解决这样一个问题：从一个数组中找出出现半数以上的元素。大意是这样：\n> We will sweep down the sequence starting at the pointer position shown above. As we sweep we maintain a pair consisting of a current candidate and a counter. Initially, the current candidate is unknown and the counter is 0.\nWhen we move the pointer forward over an element e:\n    - If the counter is 0, we set the current candidate to e and we set the counter to 1.\n    - If the counter is not 0, we increment or decrement the counter according to whether e is the current candidate.\n> When we are done, the current candidate is the majority element, if there is a majority.\n“投票算法”，设定两个变量candidate和count。candidate保存当前可能的候选众数，count保存该候选众数的出现次数。\n遍历数组num。\n如果当前的数字e与候选众数candidate相同，则将计数count + 1\n否则，如果当前的候选众数candidate为空，或者count为0，则将候选众数candidate的值置为e，并将计数count置为1。\n否则，将计数count - 1\n最终留下的候选众数candidate即为最终答案。\n以上算法时间复杂度为O(n)，空间复杂度为O(1)\n\n## 官方解析：\n时间复杂度: O(n2) — 蛮力法: 依次检查每一个元素是否为众数\n时间复杂度: O(n), 空间复杂度: O(n) — 哈希表: 维护一个每一个元素出现次数的哈希表, 然后找到出现次数最多的元素\n时间复杂度: O(n log n) — 排序: 在排序后找出连续重复出现次数最多的元素\n平均时间复杂度: O(n), 最坏复杂度: 无穷大 — 随机算法: 随机选取一个元素计算其是否为众数. 如果不是, 就重复上一步骤直到找到为止。 由于选出众数的概率 > 1 / 2, 因此期望的尝试次数 < 2\n时间复杂度: O(n log n) — 分治法: 将数组拆成2半, 然后找出前一半的众数A和后一半的众数B。则全局众数要么是A要么是B。 如果 A == B, 则它自然而然就是全局众数。 如果不是, 则A和B都是候选众数, 则至多只需要检查这两个元素的出现次数即可。 时间复杂度, T(n) = T(n/2) + 2n = O(n log n).\n时间复杂度: O(n) — Moore投票算法: 我们维护一个当前的候选众数和一个初始为0的计数器。遍历数组时，我们看当前的元素x:\n\n    * 如果计数器是0, 我们将候选众数置为 x 并将计数器置为 1\n    * 如果计数器非0, 我们根据x与当前的候选众数是否相等对计数器+1或者-1\n    * 一趟之后, 当前的候选众数就是所求众数. 时间复杂度 = O(n).\n\n时间复杂度: O(n) — 位操作法: 我们需要32次迭代, 每一次计算所有n个数的第i位的1的个数。由于众数一定存在，那么或者1的个数 > 0的个数 或者反过来(但绝不会相同)。 众数的第i位一定是计数较多数字。\n\n\n[1]: https://leetcode.com/problems/majority-element/description/\n[2]: http://blog.csdn.net/chfe007/article/details/42919017\n","slug":"LeetCode-MajorityElement","published":1,"updated":"2017-11-24T09:40:14.024Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjadpus9s000dcoxdufafh3hd","content":"<h2 id=\"题目描述：\"><a href=\"#题目描述：\" class=\"headerlink\" title=\"题目描述：\"></a><a href=\"https://leetcode.com/problems/majority-element/description/\" target=\"_blank\" rel=\"external\">题目描述</a>：</h2><p>Given an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times.<br>You may assume that the array is non-empty and the majority element always exist in the array.</p>\n<h2 id=\"题目大意：\"><a href=\"#题目大意：\" class=\"headerlink\" title=\"题目大意：\"></a>题目大意：</h2><p>给定一个长度为n的数组，寻找其中的“众数”。众数是指出现次数大于 ⌊ n/2 ⌋ 的元素。<br>你可以假设数组是非空的并且数组中的众数永远存在。</p>\n<h2 id=\"参考LeetCode-Discuss：\"><a href=\"#参考LeetCode-Discuss：\" class=\"headerlink\" title=\"参考LeetCode Discuss：\"></a>参考LeetCode Discuss：</h2><p><a href=\"https://discuss.leetcode.com/topic/8692/o-n-time-o-1-space-fastest-solution/20\" target=\"_blank\" rel=\"external\">https://discuss.leetcode.com/topic/8692/o-n-time-o-1-space-fastest-solution/20</a><br><a href=\"https://discuss.leetcode.com/topic/17446/6-suggested-solutions-in-c-with-explanations\" target=\"_blank\" rel=\"external\">https://discuss.leetcode.com/topic/17446/6-suggested-solutions-in-c-with-explanations</a></p>\n<h3 id=\"解题思路1：\"><a href=\"#解题思路1：\" class=\"headerlink\" title=\"解题思路1：\"></a>解题思路1：</h3><hr>\n<p>HashTable：使用HashTasble给每个出现的元素计数，遍历数组，发现超过半数的众数就返回。</p>\n<p><strong>C++代码：</strong><br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">majorityElement</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums)</span> </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">unordered_map</span>&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; mapNums;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.size(); ++i) &#123;</div><div class=\"line\">            ++mapNums[nums[i]];</div><div class=\"line\">            <span class=\"keyword\">if</span> (mapNums[nums[i]] &gt; nums.size() / <span class=\"number\">2</span>) <span class=\"keyword\">return</span> nums[i];</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p><strong>代码分析：</strong><br>时间复杂度满足O(n)，但是由于HashTable（unordered_map）的存在，空间复杂度就不能满足O(1)。</p>\n<h3 id=\"解题思路2：\"><a href=\"#解题思路2：\" class=\"headerlink\" title=\"解题思路2：\"></a>解题思路2：</h3><hr>\n<p>排序：排序的结果就是众数如果存在，中间的元素一定是众数（过半）</p>\n<p><strong>C++代码：</strong><br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">majorityElement</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums)</span> </span>&#123;</div><div class=\"line\">        sort(nums.begin(), nums.end());</div><div class=\"line\">        <span class=\"keyword\">return</span> (nums.size() / <span class=\"number\">2</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p><strong>代码分析：</strong></p>\n<ol>\n<li>时间复杂度主要在排序上， N*log2(N)</li>\n<li>如果数组为空或者不存在众数，上述代码需要考虑更全面些 <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">majorityElement</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums)</span> </span>&#123;</div><div class=\"line\">        sort(nums.begin(), nums.end());</div><div class=\"line\">        <span class=\"keyword\">int</span> pivot = nums.size() / <span class=\"number\">2</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = pivot; i &lt; nums.size(); i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (nums[pivot] != nums[i]) <span class=\"keyword\">break</span>;</div><div class=\"line\">            count++;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = pivot - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (nums[pivot] != nums[i]) <span class=\"keyword\">break</span>;</div><div class=\"line\">            count++;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (count &gt; pivot) <span class=\"keyword\">return</span> nums[pivot];</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"解题思路3：\"><a href=\"#解题思路3：\" class=\"headerlink\" title=\"解题思路3：\"></a>解题思路3：</h3><hr>\n<p>投票算法：遍历元素，利用candidate 和 count两个变量找到众数。（前提：众数一定存在）</p>\n<p><strong>C++代码：</strong><br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">majorityElement</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> major = nums, counts = <span class=\"number\">0</span>, n = nums.size();</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (!counts) &#123;</div><div class=\"line\">                major = nums[i];</div><div class=\"line\">                counts = <span class=\"number\">1</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">else</span> counts += (nums[i] == major) ? <span class=\"number\">1</span> : <span class=\"number\">-1</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> major;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p><strong>代码分析：</strong><br><a href=\"http://blog.csdn.net/chfe007/article/details/42919017\" target=\"_blank\" rel=\"external\">Moore’s voting algorithm</a>是比较有意思的一个算法，在dicuss上看到的。这个算法是解决这样一个问题：从一个数组中找出出现半数以上的元素。大意是这样：</p>\n<blockquote>\n<p>We will sweep down the sequence starting at the pointer position shown above. As we sweep we maintain a pair consisting of a current candidate and a counter. Initially, the current candidate is unknown and the counter is 0.<br>When we move the pointer forward over an element e:</p>\n<pre><code>- If the counter is 0, we set the current candidate to e and we set the counter to 1.\n- If the counter is not 0, we increment or decrement the counter according to whether e is the current candidate.\n</code></pre><p>When we are done, the current candidate is the majority element, if there is a majority.<br>“投票算法”，设定两个变量candidate和count。candidate保存当前可能的候选众数，count保存该候选众数的出现次数。<br>遍历数组num。<br>如果当前的数字e与候选众数candidate相同，则将计数count + 1<br>否则，如果当前的候选众数candidate为空，或者count为0，则将候选众数candidate的值置为e，并将计数count置为1。<br>否则，将计数count - 1<br>最终留下的候选众数candidate即为最终答案。<br>以上算法时间复杂度为O(n)，空间复杂度为O(1)</p>\n</blockquote>\n<h2 id=\"官方解析：\"><a href=\"#官方解析：\" class=\"headerlink\" title=\"官方解析：\"></a>官方解析：</h2><p>时间复杂度: O(n2) — 蛮力法: 依次检查每一个元素是否为众数<br>时间复杂度: O(n), 空间复杂度: O(n) — 哈希表: 维护一个每一个元素出现次数的哈希表, 然后找到出现次数最多的元素<br>时间复杂度: O(n log n) — 排序: 在排序后找出连续重复出现次数最多的元素<br>平均时间复杂度: O(n), 最坏复杂度: 无穷大 — 随机算法: 随机选取一个元素计算其是否为众数. 如果不是, 就重复上一步骤直到找到为止。 由于选出众数的概率 &gt; 1 / 2, 因此期望的尝试次数 &lt; 2<br>时间复杂度: O(n log n) — 分治法: 将数组拆成2半, 然后找出前一半的众数A和后一半的众数B。则全局众数要么是A要么是B。 如果 A == B, 则它自然而然就是全局众数。 如果不是, 则A和B都是候选众数, 则至多只需要检查这两个元素的出现次数即可。 时间复杂度, T(n) = T(n/2) + 2n = O(n log n).<br>时间复杂度: O(n) — Moore投票算法: 我们维护一个当前的候选众数和一个初始为0的计数器。遍历数组时，我们看当前的元素x:</p>\n<pre><code>* 如果计数器是0, 我们将候选众数置为 x 并将计数器置为 1\n* 如果计数器非0, 我们根据x与当前的候选众数是否相等对计数器+1或者-1\n* 一趟之后, 当前的候选众数就是所求众数. 时间复杂度 = O(n).\n</code></pre><p>时间复杂度: O(n) — 位操作法: 我们需要32次迭代, 每一次计算所有n个数的第i位的1的个数。由于众数一定存在，那么或者1的个数 &gt; 0的个数 或者反过来(但绝不会相同)。 众数的第i位一定是计数较多数字。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"题目描述：\"><a href=\"#题目描述：\" class=\"headerlink\" title=\"题目描述：\"></a><a href=\"https://leetcode.com/problems/majority-element/description/\" target=\"_blank\" rel=\"external\">题目描述</a>：</h2><p>Given an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times.<br>You may assume that the array is non-empty and the majority element always exist in the array.</p>\n<h2 id=\"题目大意：\"><a href=\"#题目大意：\" class=\"headerlink\" title=\"题目大意：\"></a>题目大意：</h2><p>给定一个长度为n的数组，寻找其中的“众数”。众数是指出现次数大于 ⌊ n/2 ⌋ 的元素。<br>你可以假设数组是非空的并且数组中的众数永远存在。</p>\n<h2 id=\"参考LeetCode-Discuss：\"><a href=\"#参考LeetCode-Discuss：\" class=\"headerlink\" title=\"参考LeetCode Discuss：\"></a>参考LeetCode Discuss：</h2><p><a href=\"https://discuss.leetcode.com/topic/8692/o-n-time-o-1-space-fastest-solution/20\" target=\"_blank\" rel=\"external\">https://discuss.leetcode.com/topic/8692/o-n-time-o-1-space-fastest-solution/20</a><br><a href=\"https://discuss.leetcode.com/topic/17446/6-suggested-solutions-in-c-with-explanations\" target=\"_blank\" rel=\"external\">https://discuss.leetcode.com/topic/17446/6-suggested-solutions-in-c-with-explanations</a></p>\n<h3 id=\"解题思路1：\"><a href=\"#解题思路1：\" class=\"headerlink\" title=\"解题思路1：\"></a>解题思路1：</h3><hr>\n<p>HashTable：使用HashTasble给每个出现的元素计数，遍历数组，发现超过半数的众数就返回。</p>\n<p><strong>C++代码：</strong><br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">majorityElement</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums)</span> </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">unordered_map</span>&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; mapNums;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.size(); ++i) &#123;</div><div class=\"line\">            ++mapNums[nums[i]];</div><div class=\"line\">            <span class=\"keyword\">if</span> (mapNums[nums[i]] &gt; nums.size() / <span class=\"number\">2</span>) <span class=\"keyword\">return</span> nums[i];</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p><strong>代码分析：</strong><br>时间复杂度满足O(n)，但是由于HashTable（unordered_map）的存在，空间复杂度就不能满足O(1)。</p>\n<h3 id=\"解题思路2：\"><a href=\"#解题思路2：\" class=\"headerlink\" title=\"解题思路2：\"></a>解题思路2：</h3><hr>\n<p>排序：排序的结果就是众数如果存在，中间的元素一定是众数（过半）</p>\n<p><strong>C++代码：</strong><br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">majorityElement</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums)</span> </span>&#123;</div><div class=\"line\">        sort(nums.begin(), nums.end());</div><div class=\"line\">        <span class=\"keyword\">return</span> (nums.size() / <span class=\"number\">2</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p><strong>代码分析：</strong></p>\n<ol>\n<li>时间复杂度主要在排序上， N*log2(N)</li>\n<li>如果数组为空或者不存在众数，上述代码需要考虑更全面些 <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">majorityElement</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums)</span> </span>&#123;</div><div class=\"line\">        sort(nums.begin(), nums.end());</div><div class=\"line\">        <span class=\"keyword\">int</span> pivot = nums.size() / <span class=\"number\">2</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = pivot; i &lt; nums.size(); i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (nums[pivot] != nums[i]) <span class=\"keyword\">break</span>;</div><div class=\"line\">            count++;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = pivot - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (nums[pivot] != nums[i]) <span class=\"keyword\">break</span>;</div><div class=\"line\">            count++;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (count &gt; pivot) <span class=\"keyword\">return</span> nums[pivot];</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"解题思路3：\"><a href=\"#解题思路3：\" class=\"headerlink\" title=\"解题思路3：\"></a>解题思路3：</h3><hr>\n<p>投票算法：遍历元素，利用candidate 和 count两个变量找到众数。（前提：众数一定存在）</p>\n<p><strong>C++代码：</strong><br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">majorityElement</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> major = nums, counts = <span class=\"number\">0</span>, n = nums.size();</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (!counts) &#123;</div><div class=\"line\">                major = nums[i];</div><div class=\"line\">                counts = <span class=\"number\">1</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">else</span> counts += (nums[i] == major) ? <span class=\"number\">1</span> : <span class=\"number\">-1</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> major;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p><strong>代码分析：</strong><br><a href=\"http://blog.csdn.net/chfe007/article/details/42919017\" target=\"_blank\" rel=\"external\">Moore’s voting algorithm</a>是比较有意思的一个算法，在dicuss上看到的。这个算法是解决这样一个问题：从一个数组中找出出现半数以上的元素。大意是这样：</p>\n<blockquote>\n<p>We will sweep down the sequence starting at the pointer position shown above. As we sweep we maintain a pair consisting of a current candidate and a counter. Initially, the current candidate is unknown and the counter is 0.<br>When we move the pointer forward over an element e:</p>\n<pre><code>- If the counter is 0, we set the current candidate to e and we set the counter to 1.\n- If the counter is not 0, we increment or decrement the counter according to whether e is the current candidate.\n</code></pre><p>When we are done, the current candidate is the majority element, if there is a majority.<br>“投票算法”，设定两个变量candidate和count。candidate保存当前可能的候选众数，count保存该候选众数的出现次数。<br>遍历数组num。<br>如果当前的数字e与候选众数candidate相同，则将计数count + 1<br>否则，如果当前的候选众数candidate为空，或者count为0，则将候选众数candidate的值置为e，并将计数count置为1。<br>否则，将计数count - 1<br>最终留下的候选众数candidate即为最终答案。<br>以上算法时间复杂度为O(n)，空间复杂度为O(1)</p>\n</blockquote>\n<h2 id=\"官方解析：\"><a href=\"#官方解析：\" class=\"headerlink\" title=\"官方解析：\"></a>官方解析：</h2><p>时间复杂度: O(n2) — 蛮力法: 依次检查每一个元素是否为众数<br>时间复杂度: O(n), 空间复杂度: O(n) — 哈希表: 维护一个每一个元素出现次数的哈希表, 然后找到出现次数最多的元素<br>时间复杂度: O(n log n) — 排序: 在排序后找出连续重复出现次数最多的元素<br>平均时间复杂度: O(n), 最坏复杂度: 无穷大 — 随机算法: 随机选取一个元素计算其是否为众数. 如果不是, 就重复上一步骤直到找到为止。 由于选出众数的概率 &gt; 1 / 2, 因此期望的尝试次数 &lt; 2<br>时间复杂度: O(n log n) — 分治法: 将数组拆成2半, 然后找出前一半的众数A和后一半的众数B。则全局众数要么是A要么是B。 如果 A == B, 则它自然而然就是全局众数。 如果不是, 则A和B都是候选众数, 则至多只需要检查这两个元素的出现次数即可。 时间复杂度, T(n) = T(n/2) + 2n = O(n log n).<br>时间复杂度: O(n) — Moore投票算法: 我们维护一个当前的候选众数和一个初始为0的计数器。遍历数组时，我们看当前的元素x:</p>\n<pre><code>* 如果计数器是0, 我们将候选众数置为 x 并将计数器置为 1\n* 如果计数器非0, 我们根据x与当前的候选众数是否相等对计数器+1或者-1\n* 一趟之后, 当前的候选众数就是所求众数. 时间复杂度 = O(n).\n</code></pre><p>时间复杂度: O(n) — 位操作法: 我们需要32次迭代, 每一次计算所有n个数的第i位的1的个数。由于众数一定存在，那么或者1的个数 &gt; 0的个数 或者反过来(但绝不会相同)。 众数的第i位一定是计数较多数字。</p>\n"},{"title":"LeetCode 695. Max Area of Island","date":"2017-11-16T08:26:13.000Z","_content":"\n## [题目描述][1]：\nGiven a non-empty 2D array grid of 0's and 1's, an island is a group of 1's (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.\nFind the maximum area of an island in the given 2D array. (If there is no island, the maximum area is 0.)\n**Example 1:**\n```\n[[0,0,1,0,0,0,0,1,0,0,0,0,0],\n[0,0,0,0,0,0,0,1,1,1,0,0,0],\n[0,1,1,0,1,0,0,0,0,0,0,0,0],\n[0,1,0,0,1,1,0,0,1,0,1,0,0],\n[0,1,0,0,1,1,0,0,1,1,1,0,0],\n[0,0,0,0,0,0,0,0,0,0,1,0,0],\n[0,0,0,0,0,0,0,1,1,1,0,0,0],\n[0,0,0,0,0,0,0,1,1,0,0,0,0]]\n```\nGiven the above grid, return 6. Note the answer is not 11, because the island must be connected 4-directionally.\n**Example 2:**\n```\n[[0,0,0,0,0,0,0,0]]\n```\nGiven the above grid, return 0.\n**Note:**\n    - The length of each dimension in the given grid does not exceed 50.\n\n## 题目大意：\n给定二维格子grid，上下左右相邻的1组成岛屿，求岛屿的最大面积。\n\n### 解题思路1：\n---\nDFS：深度优先遍历（递归实现）\n参考LeetCode Discuss：\nhttps://discuss.leetcode.com/topic/106301/java-c-straightforward-dfs-solution\nhttps://discuss.leetcode.com/topic/106261/java-c-clean-code\n\n**C++代码：**\n``` c++\n    class Solution\n    {\n    public:\n        int maxAreaOfIsland(vector<vector<int>>& grid)\n        {\n            int m = grid.size();\n            int n = grid[0].size();\n            int maxArea = 0;\n            for (int i = 0; i < m; i++) {\n                for (int j = 0; j < n; j++) {\n                    if (1 == grid[i][j]) {\n                        maxArea = max(maxArea, dfs(grid, i, j));\n                    }\n                }\n            }\n            return maxArea;\n        }\n\n    private:\n        int dfs(vector<vector<int> >& grid, int i, int j)\n        {\n            if (0 > i || i >= grid.size() || 0 > j || j >= grid[0].size() || 0 == grid[i][j])\n                return 0;\n\n            grid[i][j] = 0; // mark the value to avoid duplication\n            return 1 + dfs(grid, i - 1, j) + dfs(grid, i + 1, j)\n            + dfs(grid, i, j - 1) + dfs(grid, i, j + 1);\n        }\n    };\n```\n\n**代码分析：**\n    1. 递归函数需要注意结束条件，即边界的处理。我们关心的是grid范围内，其值为1的元素\n    2. 为避免重复计数，每统计一个grid[i][j]，将其值置为0\n    3. 由于孤岛有四个维度，元素grid[i][j]的四个方向的下一个元素坐标分别为：[(i-1, j), (i+1, j), (i, j-1), (i, j+1)]\n\n### 解题思路2：\n---\nBFS：广度优先遍历（借助队列迭代实现）\n参考LeetCode Discuss：https://discuss.leetcode.com/topic/106274/c-bfs-dfs-concise-code\n\n**C++代码：**\n``` c++\n    class Solution\n    {\n    public:\n        int maxAreaOfIsland(vector<vector<int>>& grid)\n        {\n            int m = grid.size();\n            int n = grid[0].size();\n            int maxArea = 0;\n            for (int i = 0; i < m; i++) {\n                for (int j = 0; j < n; j++) {\n                    if (1 == grid[i][j]) {\n                        maxArea = max(maxArea, bfs(grid, i, j));\n                    }\n                }\n            }\n            return maxArea;\n        }\n\n    private:\n        int bfs(vector<vector<int>>& grid, int i, int j)\n        {\n            queue<pair<int, int>> q;\n            q.push(pair<int, int>(i, j));\n            int maxArea = 1;\n            grid[i][j] = 0; // mark the value to avoid duplication\n\n            vector<int> dir({-1, 0, 1, 0, -1});\n            while (0 < q.size()) {\n                int m = q.front().first; // row index\n                int n = q.front().second; // col index\n                q.pop(); // remove from queue\n\n                for (int idx = 0; idx < dir.size() - 1; idx++) {\n                    int rowIdx = m + dir[idx];\n                    int colIdx = n + dir[idx + 1];\n                    if (0<=rowIdx && rowIdx<grid.size() && 0<=colIdx && colIdx<grid[0].size()\n                        && 1==grid[rowIdx][colIdx]) {\n                        q.push(pair<int, int>(rowIdx, colIdx));\n                        maxArea++;\n                        grid[rowIdx][colIdx] = 0;\n                    }\n                }\n            }\n            return maxArea;\n        }\n    };\n```\n\n**代码分析：**\n    1. BFS的处理需要借助数组实现，每一次将grid范围内其值为1的元素塞进数组（后续元素为当前grid[i][j]四个方向上的邻接元素）\n    2. 为避免重复计数，每统计一个grid[i][j]，将其值置为0\n    3. 由于孤岛有四个维度，元素grid[i][j]的四个方向的下一个元素坐标分别为：[(i-1, j), (i+1, j), (i, j-1), (i, j+1)]\n\n\n[1]: https://leetcode.com/problems/max-area-of-island/discuss/\n","source":"_posts/LeetCode-MaxAreaofIsland.md","raw":"---\ntitle: LeetCode 695. Max Area of Island\ndate: 2017-11-16 16:26:13\ncategories: LeetCode\ntags:\n - LeetCode\n - Algorithms\n - Data Structure\n - Array\n - BFS\n - DFS\n---\n\n## [题目描述][1]：\nGiven a non-empty 2D array grid of 0's and 1's, an island is a group of 1's (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.\nFind the maximum area of an island in the given 2D array. (If there is no island, the maximum area is 0.)\n**Example 1:**\n```\n[[0,0,1,0,0,0,0,1,0,0,0,0,0],\n[0,0,0,0,0,0,0,1,1,1,0,0,0],\n[0,1,1,0,1,0,0,0,0,0,0,0,0],\n[0,1,0,0,1,1,0,0,1,0,1,0,0],\n[0,1,0,0,1,1,0,0,1,1,1,0,0],\n[0,0,0,0,0,0,0,0,0,0,1,0,0],\n[0,0,0,0,0,0,0,1,1,1,0,0,0],\n[0,0,0,0,0,0,0,1,1,0,0,0,0]]\n```\nGiven the above grid, return 6. Note the answer is not 11, because the island must be connected 4-directionally.\n**Example 2:**\n```\n[[0,0,0,0,0,0,0,0]]\n```\nGiven the above grid, return 0.\n**Note:**\n    - The length of each dimension in the given grid does not exceed 50.\n\n## 题目大意：\n给定二维格子grid，上下左右相邻的1组成岛屿，求岛屿的最大面积。\n\n### 解题思路1：\n---\nDFS：深度优先遍历（递归实现）\n参考LeetCode Discuss：\nhttps://discuss.leetcode.com/topic/106301/java-c-straightforward-dfs-solution\nhttps://discuss.leetcode.com/topic/106261/java-c-clean-code\n\n**C++代码：**\n``` c++\n    class Solution\n    {\n    public:\n        int maxAreaOfIsland(vector<vector<int>>& grid)\n        {\n            int m = grid.size();\n            int n = grid[0].size();\n            int maxArea = 0;\n            for (int i = 0; i < m; i++) {\n                for (int j = 0; j < n; j++) {\n                    if (1 == grid[i][j]) {\n                        maxArea = max(maxArea, dfs(grid, i, j));\n                    }\n                }\n            }\n            return maxArea;\n        }\n\n    private:\n        int dfs(vector<vector<int> >& grid, int i, int j)\n        {\n            if (0 > i || i >= grid.size() || 0 > j || j >= grid[0].size() || 0 == grid[i][j])\n                return 0;\n\n            grid[i][j] = 0; // mark the value to avoid duplication\n            return 1 + dfs(grid, i - 1, j) + dfs(grid, i + 1, j)\n            + dfs(grid, i, j - 1) + dfs(grid, i, j + 1);\n        }\n    };\n```\n\n**代码分析：**\n    1. 递归函数需要注意结束条件，即边界的处理。我们关心的是grid范围内，其值为1的元素\n    2. 为避免重复计数，每统计一个grid[i][j]，将其值置为0\n    3. 由于孤岛有四个维度，元素grid[i][j]的四个方向的下一个元素坐标分别为：[(i-1, j), (i+1, j), (i, j-1), (i, j+1)]\n\n### 解题思路2：\n---\nBFS：广度优先遍历（借助队列迭代实现）\n参考LeetCode Discuss：https://discuss.leetcode.com/topic/106274/c-bfs-dfs-concise-code\n\n**C++代码：**\n``` c++\n    class Solution\n    {\n    public:\n        int maxAreaOfIsland(vector<vector<int>>& grid)\n        {\n            int m = grid.size();\n            int n = grid[0].size();\n            int maxArea = 0;\n            for (int i = 0; i < m; i++) {\n                for (int j = 0; j < n; j++) {\n                    if (1 == grid[i][j]) {\n                        maxArea = max(maxArea, bfs(grid, i, j));\n                    }\n                }\n            }\n            return maxArea;\n        }\n\n    private:\n        int bfs(vector<vector<int>>& grid, int i, int j)\n        {\n            queue<pair<int, int>> q;\n            q.push(pair<int, int>(i, j));\n            int maxArea = 1;\n            grid[i][j] = 0; // mark the value to avoid duplication\n\n            vector<int> dir({-1, 0, 1, 0, -1});\n            while (0 < q.size()) {\n                int m = q.front().first; // row index\n                int n = q.front().second; // col index\n                q.pop(); // remove from queue\n\n                for (int idx = 0; idx < dir.size() - 1; idx++) {\n                    int rowIdx = m + dir[idx];\n                    int colIdx = n + dir[idx + 1];\n                    if (0<=rowIdx && rowIdx<grid.size() && 0<=colIdx && colIdx<grid[0].size()\n                        && 1==grid[rowIdx][colIdx]) {\n                        q.push(pair<int, int>(rowIdx, colIdx));\n                        maxArea++;\n                        grid[rowIdx][colIdx] = 0;\n                    }\n                }\n            }\n            return maxArea;\n        }\n    };\n```\n\n**代码分析：**\n    1. BFS的处理需要借助数组实现，每一次将grid范围内其值为1的元素塞进数组（后续元素为当前grid[i][j]四个方向上的邻接元素）\n    2. 为避免重复计数，每统计一个grid[i][j]，将其值置为0\n    3. 由于孤岛有四个维度，元素grid[i][j]的四个方向的下一个元素坐标分别为：[(i-1, j), (i+1, j), (i, j-1), (i, j+1)]\n\n\n[1]: https://leetcode.com/problems/max-area-of-island/discuss/\n","slug":"LeetCode-MaxAreaofIsland","published":1,"updated":"2017-11-20T03:31:37.611Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjadpus9u000gcoxdde8qzlkq","content":"<h2 id=\"题目描述：\"><a href=\"#题目描述：\" class=\"headerlink\" title=\"题目描述：\"></a><a href=\"https://leetcode.com/problems/max-area-of-island/discuss/\" target=\"_blank\" rel=\"external\">题目描述</a>：</h2><p>Given a non-empty 2D array grid of 0’s and 1’s, an island is a group of 1’s (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.<br>Find the maximum area of an island in the given 2D array. (If there is no island, the maximum area is 0.)<br><strong>Example 1:</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">[[0,0,1,0,0,0,0,1,0,0,0,0,0],</div><div class=\"line\">[0,0,0,0,0,0,0,1,1,1,0,0,0],</div><div class=\"line\">[0,1,1,0,1,0,0,0,0,0,0,0,0],</div><div class=\"line\">[0,1,0,0,1,1,0,0,1,0,1,0,0],</div><div class=\"line\">[0,1,0,0,1,1,0,0,1,1,1,0,0],</div><div class=\"line\">[0,0,0,0,0,0,0,0,0,0,1,0,0],</div><div class=\"line\">[0,0,0,0,0,0,0,1,1,1,0,0,0],</div><div class=\"line\">[0,0,0,0,0,0,0,1,1,0,0,0,0]]</div></pre></td></tr></table></figure></p>\n<p>Given the above grid, return 6. Note the answer is not 11, because the island must be connected 4-directionally.<br><strong>Example 2:</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[[0,0,0,0,0,0,0,0]]</div></pre></td></tr></table></figure></p>\n<p>Given the above grid, return 0.<br><strong>Note:</strong></p>\n<pre><code>- The length of each dimension in the given grid does not exceed 50.\n</code></pre><h2 id=\"题目大意：\"><a href=\"#题目大意：\" class=\"headerlink\" title=\"题目大意：\"></a>题目大意：</h2><p>给定二维格子grid，上下左右相邻的1组成岛屿，求岛屿的最大面积。</p>\n<h3 id=\"解题思路1：\"><a href=\"#解题思路1：\" class=\"headerlink\" title=\"解题思路1：\"></a>解题思路1：</h3><hr>\n<p>DFS：深度优先遍历（递归实现）<br>参考LeetCode Discuss：<br><a href=\"https://discuss.leetcode.com/topic/106301/java-c-straightforward-dfs-solution\" target=\"_blank\" rel=\"external\">https://discuss.leetcode.com/topic/106301/java-c-straightforward-dfs-solution</a><br><a href=\"https://discuss.leetcode.com/topic/106261/java-c-clean-code\" target=\"_blank\" rel=\"external\">https://discuss.leetcode.com/topic/106261/java-c-clean-code</a></p>\n<p><strong>C++代码：</strong><br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span></span></div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxAreaOfIsland</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt;&amp; grid)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> m = grid.size();</div><div class=\"line\">        <span class=\"keyword\">int</span> n = grid[<span class=\"number\">0</span>].size();</div><div class=\"line\">        <span class=\"keyword\">int</span> maxArea = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"number\">1</span> == grid[i][j]) &#123;</div><div class=\"line\">                    maxArea = max(maxArea, dfs(grid, i, j));</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> maxArea;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &gt;&amp; grid, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"number\">0</span> &gt; i || i &gt;= grid.size() || <span class=\"number\">0</span> &gt; j || j &gt;= grid[<span class=\"number\">0</span>].size() || <span class=\"number\">0</span> == grid[i][j])</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">        grid[i][j] = <span class=\"number\">0</span>; <span class=\"comment\">// mark the value to avoid duplication</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span> + dfs(grid, i - <span class=\"number\">1</span>, j) + dfs(grid, i + <span class=\"number\">1</span>, j)</div><div class=\"line\">        + dfs(grid, i, j - <span class=\"number\">1</span>) + dfs(grid, i, j + <span class=\"number\">1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p><strong>代码分析：</strong></p>\n<pre><code>1. 递归函数需要注意结束条件，即边界的处理。我们关心的是grid范围内，其值为1的元素\n2. 为避免重复计数，每统计一个grid[i][j]，将其值置为0\n3. 由于孤岛有四个维度，元素grid[i][j]的四个方向的下一个元素坐标分别为：[(i-1, j), (i+1, j), (i, j-1), (i, j+1)]\n</code></pre><h3 id=\"解题思路2：\"><a href=\"#解题思路2：\" class=\"headerlink\" title=\"解题思路2：\"></a>解题思路2：</h3><hr>\n<p>BFS：广度优先遍历（借助队列迭代实现）<br>参考LeetCode Discuss：<a href=\"https://discuss.leetcode.com/topic/106274/c-bfs-dfs-concise-code\" target=\"_blank\" rel=\"external\">https://discuss.leetcode.com/topic/106274/c-bfs-dfs-concise-code</a></p>\n<p><strong>C++代码：</strong><br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span></span></div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxAreaOfIsland</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt;&amp; grid)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> m = grid.size();</div><div class=\"line\">        <span class=\"keyword\">int</span> n = grid[<span class=\"number\">0</span>].size();</div><div class=\"line\">        <span class=\"keyword\">int</span> maxArea = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"number\">1</span> == grid[i][j]) &#123;</div><div class=\"line\">                    maxArea = max(maxArea, bfs(grid, i, j));</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> maxArea;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">bfs</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt;&amp; grid, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"built_in\">queue</span>&lt;pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;&gt; q;</div><div class=\"line\">        q.push(pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;(i, j));</div><div class=\"line\">        <span class=\"keyword\">int</span> maxArea = <span class=\"number\">1</span>;</div><div class=\"line\">        grid[i][j] = <span class=\"number\">0</span>; <span class=\"comment\">// mark the value to avoid duplication</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; dir(&#123;<span class=\"number\">-1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>&#125;);</div><div class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"number\">0</span> &lt; q.size()) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> m = q.front().first; <span class=\"comment\">// row index</span></div><div class=\"line\">            <span class=\"keyword\">int</span> n = q.front().second; <span class=\"comment\">// col index</span></div><div class=\"line\">            q.pop(); <span class=\"comment\">// remove from queue</span></div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> idx = <span class=\"number\">0</span>; idx &lt; dir.size() - <span class=\"number\">1</span>; idx++) &#123;</div><div class=\"line\">                <span class=\"keyword\">int</span> rowIdx = m + dir[idx];</div><div class=\"line\">                <span class=\"keyword\">int</span> colIdx = n + dir[idx + <span class=\"number\">1</span>];</div><div class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"number\">0</span>&lt;=rowIdx &amp;&amp; rowIdx&lt;grid.size() &amp;&amp; <span class=\"number\">0</span>&lt;=colIdx &amp;&amp; colIdx&lt;grid[<span class=\"number\">0</span>].size()</div><div class=\"line\">                    &amp;&amp; <span class=\"number\">1</span>==grid[rowIdx][colIdx]) &#123;</div><div class=\"line\">                    q.push(pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;(rowIdx, colIdx));</div><div class=\"line\">                    maxArea++;</div><div class=\"line\">                    grid[rowIdx][colIdx] = <span class=\"number\">0</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> maxArea;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p><strong>代码分析：</strong></p>\n<pre><code>1. BFS的处理需要借助数组实现，每一次将grid范围内其值为1的元素塞进数组（后续元素为当前grid[i][j]四个方向上的邻接元素）\n2. 为避免重复计数，每统计一个grid[i][j]，将其值置为0\n3. 由于孤岛有四个维度，元素grid[i][j]的四个方向的下一个元素坐标分别为：[(i-1, j), (i+1, j), (i, j-1), (i, j+1)]\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"题目描述：\"><a href=\"#题目描述：\" class=\"headerlink\" title=\"题目描述：\"></a><a href=\"https://leetcode.com/problems/max-area-of-island/discuss/\" target=\"_blank\" rel=\"external\">题目描述</a>：</h2><p>Given a non-empty 2D array grid of 0’s and 1’s, an island is a group of 1’s (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.<br>Find the maximum area of an island in the given 2D array. (If there is no island, the maximum area is 0.)<br><strong>Example 1:</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">[[0,0,1,0,0,0,0,1,0,0,0,0,0],</div><div class=\"line\">[0,0,0,0,0,0,0,1,1,1,0,0,0],</div><div class=\"line\">[0,1,1,0,1,0,0,0,0,0,0,0,0],</div><div class=\"line\">[0,1,0,0,1,1,0,0,1,0,1,0,0],</div><div class=\"line\">[0,1,0,0,1,1,0,0,1,1,1,0,0],</div><div class=\"line\">[0,0,0,0,0,0,0,0,0,0,1,0,0],</div><div class=\"line\">[0,0,0,0,0,0,0,1,1,1,0,0,0],</div><div class=\"line\">[0,0,0,0,0,0,0,1,1,0,0,0,0]]</div></pre></td></tr></table></figure></p>\n<p>Given the above grid, return 6. Note the answer is not 11, because the island must be connected 4-directionally.<br><strong>Example 2:</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[[0,0,0,0,0,0,0,0]]</div></pre></td></tr></table></figure></p>\n<p>Given the above grid, return 0.<br><strong>Note:</strong></p>\n<pre><code>- The length of each dimension in the given grid does not exceed 50.\n</code></pre><h2 id=\"题目大意：\"><a href=\"#题目大意：\" class=\"headerlink\" title=\"题目大意：\"></a>题目大意：</h2><p>给定二维格子grid，上下左右相邻的1组成岛屿，求岛屿的最大面积。</p>\n<h3 id=\"解题思路1：\"><a href=\"#解题思路1：\" class=\"headerlink\" title=\"解题思路1：\"></a>解题思路1：</h3><hr>\n<p>DFS：深度优先遍历（递归实现）<br>参考LeetCode Discuss：<br><a href=\"https://discuss.leetcode.com/topic/106301/java-c-straightforward-dfs-solution\" target=\"_blank\" rel=\"external\">https://discuss.leetcode.com/topic/106301/java-c-straightforward-dfs-solution</a><br><a href=\"https://discuss.leetcode.com/topic/106261/java-c-clean-code\" target=\"_blank\" rel=\"external\">https://discuss.leetcode.com/topic/106261/java-c-clean-code</a></p>\n<p><strong>C++代码：</strong><br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span></span></div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxAreaOfIsland</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt;&amp; grid)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> m = grid.size();</div><div class=\"line\">        <span class=\"keyword\">int</span> n = grid[<span class=\"number\">0</span>].size();</div><div class=\"line\">        <span class=\"keyword\">int</span> maxArea = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"number\">1</span> == grid[i][j]) &#123;</div><div class=\"line\">                    maxArea = max(maxArea, dfs(grid, i, j));</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> maxArea;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &gt;&amp; grid, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"number\">0</span> &gt; i || i &gt;= grid.size() || <span class=\"number\">0</span> &gt; j || j &gt;= grid[<span class=\"number\">0</span>].size() || <span class=\"number\">0</span> == grid[i][j])</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">        grid[i][j] = <span class=\"number\">0</span>; <span class=\"comment\">// mark the value to avoid duplication</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span> + dfs(grid, i - <span class=\"number\">1</span>, j) + dfs(grid, i + <span class=\"number\">1</span>, j)</div><div class=\"line\">        + dfs(grid, i, j - <span class=\"number\">1</span>) + dfs(grid, i, j + <span class=\"number\">1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p><strong>代码分析：</strong></p>\n<pre><code>1. 递归函数需要注意结束条件，即边界的处理。我们关心的是grid范围内，其值为1的元素\n2. 为避免重复计数，每统计一个grid[i][j]，将其值置为0\n3. 由于孤岛有四个维度，元素grid[i][j]的四个方向的下一个元素坐标分别为：[(i-1, j), (i+1, j), (i, j-1), (i, j+1)]\n</code></pre><h3 id=\"解题思路2：\"><a href=\"#解题思路2：\" class=\"headerlink\" title=\"解题思路2：\"></a>解题思路2：</h3><hr>\n<p>BFS：广度优先遍历（借助队列迭代实现）<br>参考LeetCode Discuss：<a href=\"https://discuss.leetcode.com/topic/106274/c-bfs-dfs-concise-code\" target=\"_blank\" rel=\"external\">https://discuss.leetcode.com/topic/106274/c-bfs-dfs-concise-code</a></p>\n<p><strong>C++代码：</strong><br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span></span></div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxAreaOfIsland</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt;&amp; grid)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> m = grid.size();</div><div class=\"line\">        <span class=\"keyword\">int</span> n = grid[<span class=\"number\">0</span>].size();</div><div class=\"line\">        <span class=\"keyword\">int</span> maxArea = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"number\">1</span> == grid[i][j]) &#123;</div><div class=\"line\">                    maxArea = max(maxArea, bfs(grid, i, j));</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> maxArea;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">bfs</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt;&amp; grid, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"built_in\">queue</span>&lt;pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;&gt; q;</div><div class=\"line\">        q.push(pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;(i, j));</div><div class=\"line\">        <span class=\"keyword\">int</span> maxArea = <span class=\"number\">1</span>;</div><div class=\"line\">        grid[i][j] = <span class=\"number\">0</span>; <span class=\"comment\">// mark the value to avoid duplication</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; dir(&#123;<span class=\"number\">-1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>&#125;);</div><div class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"number\">0</span> &lt; q.size()) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> m = q.front().first; <span class=\"comment\">// row index</span></div><div class=\"line\">            <span class=\"keyword\">int</span> n = q.front().second; <span class=\"comment\">// col index</span></div><div class=\"line\">            q.pop(); <span class=\"comment\">// remove from queue</span></div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> idx = <span class=\"number\">0</span>; idx &lt; dir.size() - <span class=\"number\">1</span>; idx++) &#123;</div><div class=\"line\">                <span class=\"keyword\">int</span> rowIdx = m + dir[idx];</div><div class=\"line\">                <span class=\"keyword\">int</span> colIdx = n + dir[idx + <span class=\"number\">1</span>];</div><div class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"number\">0</span>&lt;=rowIdx &amp;&amp; rowIdx&lt;grid.size() &amp;&amp; <span class=\"number\">0</span>&lt;=colIdx &amp;&amp; colIdx&lt;grid[<span class=\"number\">0</span>].size()</div><div class=\"line\">                    &amp;&amp; <span class=\"number\">1</span>==grid[rowIdx][colIdx]) &#123;</div><div class=\"line\">                    q.push(pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;(rowIdx, colIdx));</div><div class=\"line\">                    maxArea++;</div><div class=\"line\">                    grid[rowIdx][colIdx] = <span class=\"number\">0</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> maxArea;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p><strong>代码分析：</strong></p>\n<pre><code>1. BFS的处理需要借助数组实现，每一次将grid范围内其值为1的元素塞进数组（后续元素为当前grid[i][j]四个方向上的邻接元素）\n2. 为避免重复计数，每统计一个grid[i][j]，将其值置为0\n3. 由于孤岛有四个维度，元素grid[i][j]的四个方向的下一个元素坐标分别为：[(i-1, j), (i+1, j), (i, j-1), (i, j+1)]\n</code></pre>"},{"title":"LeetCode 200. Number of Islands","date":"2017-11-17T01:40:59.000Z","_content":"\n## [题目描述][1]：\nGiven a 2d grid map of '1's (land) and '0's (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.\n**Example 1:**\n```\n11110\n11010\n11000\n00000\n```\nAnswer: 1\n**Example 2:**\n```\n11000\n11000\n00100\n00011\n```\nAnswer: 3\n## 题目大意：\n给定一个由字符‘1’（陆地）和‘0’（水域）组成的二维网格地图，计算岛屿的个数。岛屿被水域环绕，由竖直或者水平方向邻接的陆地构成。你可以假设网格地图的四条边都被水域包围。\n测试样例见题目描述\n\n### 解题思路1：\n---\nDFS：深度优先遍历（递归实现）\n参考LeetCode Discuss：\nhttps://discuss.leetcode.com/topic/106261/java-c-clean-code\nhttps://discuss.leetcode.com/topic/13045/my-accepted-c-solution-may-be-trivial\n\n**C++代码：**\n``` c++\nclass Solution\n{\npublic:\n    int numIslands(vector<vector<char> >& grid)\n    {\n        if (0 == grid.size() || 0 == grid[0].size())\n            return 0;\n\n        int numIslands = 0;\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid[0].size(); j++) {\n                if ('1' == grid[i][j]) {\n                    numIslands++;\n                    bfs(grid, i, j);\n                }\n            }\n        }\n        return numIslands;\n    }\n\nprivate:\n    void dfs(vector<vector<char> >& grid, int i, int j)\n    {\n        if (0 > i || i >= grid.size() || 0 > j || j >= grid[0].size() || '0' == grid[i][j])\n            return;\n\n        grid[i][j] = '0'; // mark the value to avoid duplication\n        vector<int> dir({-1, 0, 1, 0, -1}); // c++11/14\n        // int nums[] = {-1, 0, 1, 0, -1};\n        // vector<int> dir(nums, nums + sizeof(nums) / sizeof(int));\n        for (int idx = 0; idx < dir.size() - 1; idx++) {\n            int rowIdx = i + dir[idx]; // row index\n            int colIdx = j + dir[idx + 1]; // col index\n            dfs(grid, rowIdx, colIdx);\n        }\n    }\n};\n```\n\n**代码分析：**\n    1. 递归函数需要注意结束条件，即边界的处理。我们关心的是grid范围内，其值为1的元素\n    2. 为避免重复计数，每统计一个grid[i][j]，将其值置为0\n    3. 由于孤岛有四个维度，元素grid[i][j]的四个方向的下一个元素坐标分别为：[(i-1, j), (i+1, j), (i, j-1), (i, j+1)]\n    4. 由于是字符数组，在dfs迭代过程中，先要判断是否存在空数组情况，即‘[]’.\n\n### 解题思路2：\n---\nBFS：广度优先遍历（借助队列迭代实现）\n参考LeetCode Discuss：\nhttps://discuss.leetcode.com/topic/11589/dfs-and-bfs-in-c\n\n**C++代码：**\n``` c++\nclass Solution\n{\npublic:\n    int numIslands(vector<vector<char> >& grid)\n    {\n        if (0 == grid.size() || 0 == grid[0].size())\n            return 0;\n\n        int numIslands = 0;\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid[0].size(); j++) {\n                if ('1' == grid[i][j]) {\n                    numIslands++;\n                    bfs(grid, i, j);\n                }\n            }\n        }\n        return numIslands;\n    }\n\nprivate:\n    void bfs(vector<vector<char> >& grid, int i, int j)\n    {\n        queue<pair<int, int> > q;\n        q.push(pair<int, int>(i, j));\n        grid[i][j] = '0'; // mark the value to avoid duplication\n        vector<int> dir({-1, 0, 1, 0, -1}); // c++11/14\n        // int nums[] = {-1, 0, 1, 0, -1};\n        // vector<int> dir(nums, nums + sizeof(nums) / sizeof(int));\n        while (0 < q.size()) {\n            int m = q.front().first; // row index\n            int n = q.front().second; // col index\n            q.pop(); // remove from queue\n            for (int idx = 0; idx < dir.size() - 1; idx++) {\n                int rowIdx = m + dir[idx];\n                int colIdx = n + dir[idx + 1];\n                if (0<=rowIdx && rowIdx<grid.size() && 0<=colIdx && colIdx<grid[0].size()\n                    && '1'==grid[rowIdx][colIdx]) {\n                    q.push(pair<int, int>(rowIdx, colIdx));\n                    grid[rowIdx][colIdx] = '0';\n                }\n            }\n        }\n    }\n};\n```\n\n**代码分析：**\n    1. BFS的处理需要借助数组实现，每一次将grid范围内其值为1的元素塞进数组（后续元素为当前grid[i][j]四个方向上的邻接元素）\n    2. 为避免重复计数，每统计一个grid[i][j]，将其值置为0\n    3. 由于孤岛有四个维度，元素grid[i][j]的四个方向的下一个元素坐标分别为：[(i-1, j), (i+1, j), (i, j-1), (i, j+1)]\n    4. 由于是字符数组，在dfs迭代过程中，先要判断是否存在空数组情况，即‘[]’.\n\n\n[1]: https://leetcode.com/problems/number-of-islands/description/\n","source":"_posts/LeetCode-NumberofIslands.md","raw":"---\ntitle: LeetCode 200. Number of Islands\ndate: 2017-11-17 09:40:59\ncategories: LeetCode\ntags:\n - LeetCode\n - Algorithms\n - Data Structure\n - Array\n - BFS\n - DFS\n---\n\n## [题目描述][1]：\nGiven a 2d grid map of '1's (land) and '0's (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.\n**Example 1:**\n```\n11110\n11010\n11000\n00000\n```\nAnswer: 1\n**Example 2:**\n```\n11000\n11000\n00100\n00011\n```\nAnswer: 3\n## 题目大意：\n给定一个由字符‘1’（陆地）和‘0’（水域）组成的二维网格地图，计算岛屿的个数。岛屿被水域环绕，由竖直或者水平方向邻接的陆地构成。你可以假设网格地图的四条边都被水域包围。\n测试样例见题目描述\n\n### 解题思路1：\n---\nDFS：深度优先遍历（递归实现）\n参考LeetCode Discuss：\nhttps://discuss.leetcode.com/topic/106261/java-c-clean-code\nhttps://discuss.leetcode.com/topic/13045/my-accepted-c-solution-may-be-trivial\n\n**C++代码：**\n``` c++\nclass Solution\n{\npublic:\n    int numIslands(vector<vector<char> >& grid)\n    {\n        if (0 == grid.size() || 0 == grid[0].size())\n            return 0;\n\n        int numIslands = 0;\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid[0].size(); j++) {\n                if ('1' == grid[i][j]) {\n                    numIslands++;\n                    bfs(grid, i, j);\n                }\n            }\n        }\n        return numIslands;\n    }\n\nprivate:\n    void dfs(vector<vector<char> >& grid, int i, int j)\n    {\n        if (0 > i || i >= grid.size() || 0 > j || j >= grid[0].size() || '0' == grid[i][j])\n            return;\n\n        grid[i][j] = '0'; // mark the value to avoid duplication\n        vector<int> dir({-1, 0, 1, 0, -1}); // c++11/14\n        // int nums[] = {-1, 0, 1, 0, -1};\n        // vector<int> dir(nums, nums + sizeof(nums) / sizeof(int));\n        for (int idx = 0; idx < dir.size() - 1; idx++) {\n            int rowIdx = i + dir[idx]; // row index\n            int colIdx = j + dir[idx + 1]; // col index\n            dfs(grid, rowIdx, colIdx);\n        }\n    }\n};\n```\n\n**代码分析：**\n    1. 递归函数需要注意结束条件，即边界的处理。我们关心的是grid范围内，其值为1的元素\n    2. 为避免重复计数，每统计一个grid[i][j]，将其值置为0\n    3. 由于孤岛有四个维度，元素grid[i][j]的四个方向的下一个元素坐标分别为：[(i-1, j), (i+1, j), (i, j-1), (i, j+1)]\n    4. 由于是字符数组，在dfs迭代过程中，先要判断是否存在空数组情况，即‘[]’.\n\n### 解题思路2：\n---\nBFS：广度优先遍历（借助队列迭代实现）\n参考LeetCode Discuss：\nhttps://discuss.leetcode.com/topic/11589/dfs-and-bfs-in-c\n\n**C++代码：**\n``` c++\nclass Solution\n{\npublic:\n    int numIslands(vector<vector<char> >& grid)\n    {\n        if (0 == grid.size() || 0 == grid[0].size())\n            return 0;\n\n        int numIslands = 0;\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid[0].size(); j++) {\n                if ('1' == grid[i][j]) {\n                    numIslands++;\n                    bfs(grid, i, j);\n                }\n            }\n        }\n        return numIslands;\n    }\n\nprivate:\n    void bfs(vector<vector<char> >& grid, int i, int j)\n    {\n        queue<pair<int, int> > q;\n        q.push(pair<int, int>(i, j));\n        grid[i][j] = '0'; // mark the value to avoid duplication\n        vector<int> dir({-1, 0, 1, 0, -1}); // c++11/14\n        // int nums[] = {-1, 0, 1, 0, -1};\n        // vector<int> dir(nums, nums + sizeof(nums) / sizeof(int));\n        while (0 < q.size()) {\n            int m = q.front().first; // row index\n            int n = q.front().second; // col index\n            q.pop(); // remove from queue\n            for (int idx = 0; idx < dir.size() - 1; idx++) {\n                int rowIdx = m + dir[idx];\n                int colIdx = n + dir[idx + 1];\n                if (0<=rowIdx && rowIdx<grid.size() && 0<=colIdx && colIdx<grid[0].size()\n                    && '1'==grid[rowIdx][colIdx]) {\n                    q.push(pair<int, int>(rowIdx, colIdx));\n                    grid[rowIdx][colIdx] = '0';\n                }\n            }\n        }\n    }\n};\n```\n\n**代码分析：**\n    1. BFS的处理需要借助数组实现，每一次将grid范围内其值为1的元素塞进数组（后续元素为当前grid[i][j]四个方向上的邻接元素）\n    2. 为避免重复计数，每统计一个grid[i][j]，将其值置为0\n    3. 由于孤岛有四个维度，元素grid[i][j]的四个方向的下一个元素坐标分别为：[(i-1, j), (i+1, j), (i, j-1), (i, j+1)]\n    4. 由于是字符数组，在dfs迭代过程中，先要判断是否存在空数组情况，即‘[]’.\n\n\n[1]: https://leetcode.com/problems/number-of-islands/description/\n","slug":"LeetCode-NumberofIslands","published":1,"updated":"2017-11-20T03:31:37.612Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjadpus9v000icoxd7lu35zfy","content":"<h2 id=\"题目描述：\"><a href=\"#题目描述：\" class=\"headerlink\" title=\"题目描述：\"></a><a href=\"https://leetcode.com/problems/number-of-islands/description/\" target=\"_blank\" rel=\"external\">题目描述</a>：</h2><p>Given a 2d grid map of ‘1’s (land) and ‘0’s (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.<br><strong>Example 1:</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">11110</div><div class=\"line\">11010</div><div class=\"line\">11000</div><div class=\"line\">00000</div></pre></td></tr></table></figure></p>\n<p>Answer: 1<br><strong>Example 2:</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">11000</div><div class=\"line\">11000</div><div class=\"line\">00100</div><div class=\"line\">00011</div></pre></td></tr></table></figure></p>\n<p>Answer: 3</p>\n<h2 id=\"题目大意：\"><a href=\"#题目大意：\" class=\"headerlink\" title=\"题目大意：\"></a>题目大意：</h2><p>给定一个由字符‘1’（陆地）和‘0’（水域）组成的二维网格地图，计算岛屿的个数。岛屿被水域环绕，由竖直或者水平方向邻接的陆地构成。你可以假设网格地图的四条边都被水域包围。<br>测试样例见题目描述</p>\n<h3 id=\"解题思路1：\"><a href=\"#解题思路1：\" class=\"headerlink\" title=\"解题思路1：\"></a>解题思路1：</h3><hr>\n<p>DFS：深度优先遍历（递归实现）<br>参考LeetCode Discuss：<br><a href=\"https://discuss.leetcode.com/topic/106261/java-c-clean-code\" target=\"_blank\" rel=\"external\">https://discuss.leetcode.com/topic/106261/java-c-clean-code</a><br><a href=\"https://discuss.leetcode.com/topic/13045/my-accepted-c-solution-may-be-trivial\" target=\"_blank\" rel=\"external\">https://discuss.leetcode.com/topic/13045/my-accepted-c-solution-may-be-trivial</a></p>\n<p><strong>C++代码：</strong><br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span></span></div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">numIslands</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">char</span>&gt; &gt;&amp; grid)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"number\">0</span> == grid.size() || <span class=\"number\">0</span> == grid[<span class=\"number\">0</span>].size())</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">int</span> numIslands = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; grid.size(); i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; grid[<span class=\"number\">0</span>].size(); j++) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"string\">'1'</span> == grid[i][j]) &#123;</div><div class=\"line\">                    numIslands++;</div><div class=\"line\">                    bfs(grid, i, j);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> numIslands;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">char</span>&gt; &gt;&amp; grid, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"number\">0</span> &gt; i || i &gt;= grid.size() || <span class=\"number\">0</span> &gt; j || j &gt;= grid[<span class=\"number\">0</span>].size() || <span class=\"string\">'0'</span> == grid[i][j])</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\"></div><div class=\"line\">        grid[i][j] = <span class=\"string\">'0'</span>; <span class=\"comment\">// mark the value to avoid duplication</span></div><div class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; dir(&#123;<span class=\"number\">-1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>&#125;); <span class=\"comment\">// c++11/14</span></div><div class=\"line\">        <span class=\"comment\">// int nums[] = &#123;-1, 0, 1, 0, -1&#125;;</span></div><div class=\"line\">        <span class=\"comment\">// vector&lt;int&gt; dir(nums, nums + sizeof(nums) / sizeof(int));</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> idx = <span class=\"number\">0</span>; idx &lt; dir.size() - <span class=\"number\">1</span>; idx++) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> rowIdx = i + dir[idx]; <span class=\"comment\">// row index</span></div><div class=\"line\">            <span class=\"keyword\">int</span> colIdx = j + dir[idx + <span class=\"number\">1</span>]; <span class=\"comment\">// col index</span></div><div class=\"line\">            dfs(grid, rowIdx, colIdx);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p><strong>代码分析：</strong></p>\n<pre><code>1. 递归函数需要注意结束条件，即边界的处理。我们关心的是grid范围内，其值为1的元素\n2. 为避免重复计数，每统计一个grid[i][j]，将其值置为0\n3. 由于孤岛有四个维度，元素grid[i][j]的四个方向的下一个元素坐标分别为：[(i-1, j), (i+1, j), (i, j-1), (i, j+1)]\n4. 由于是字符数组，在dfs迭代过程中，先要判断是否存在空数组情况，即‘[]’.\n</code></pre><h3 id=\"解题思路2：\"><a href=\"#解题思路2：\" class=\"headerlink\" title=\"解题思路2：\"></a>解题思路2：</h3><hr>\n<p>BFS：广度优先遍历（借助队列迭代实现）<br>参考LeetCode Discuss：<br><a href=\"https://discuss.leetcode.com/topic/11589/dfs-and-bfs-in-c\" target=\"_blank\" rel=\"external\">https://discuss.leetcode.com/topic/11589/dfs-and-bfs-in-c</a></p>\n<p><strong>C++代码：</strong><br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span></span></div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">numIslands</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">char</span>&gt; &gt;&amp; grid)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"number\">0</span> == grid.size() || <span class=\"number\">0</span> == grid[<span class=\"number\">0</span>].size())</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">int</span> numIslands = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; grid.size(); i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; grid[<span class=\"number\">0</span>].size(); j++) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"string\">'1'</span> == grid[i][j]) &#123;</div><div class=\"line\">                    numIslands++;</div><div class=\"line\">                    bfs(grid, i, j);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> numIslands;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bfs</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">char</span>&gt; &gt;&amp; grid, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"built_in\">queue</span>&lt;pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; &gt; q;</div><div class=\"line\">        q.push(pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;(i, j));</div><div class=\"line\">        grid[i][j] = <span class=\"string\">'0'</span>; <span class=\"comment\">// mark the value to avoid duplication</span></div><div class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; dir(&#123;<span class=\"number\">-1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>&#125;); <span class=\"comment\">// c++11/14</span></div><div class=\"line\">        <span class=\"comment\">// int nums[] = &#123;-1, 0, 1, 0, -1&#125;;</span></div><div class=\"line\">        <span class=\"comment\">// vector&lt;int&gt; dir(nums, nums + sizeof(nums) / sizeof(int));</span></div><div class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"number\">0</span> &lt; q.size()) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> m = q.front().first; <span class=\"comment\">// row index</span></div><div class=\"line\">            <span class=\"keyword\">int</span> n = q.front().second; <span class=\"comment\">// col index</span></div><div class=\"line\">            q.pop(); <span class=\"comment\">// remove from queue</span></div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> idx = <span class=\"number\">0</span>; idx &lt; dir.size() - <span class=\"number\">1</span>; idx++) &#123;</div><div class=\"line\">                <span class=\"keyword\">int</span> rowIdx = m + dir[idx];</div><div class=\"line\">                <span class=\"keyword\">int</span> colIdx = n + dir[idx + <span class=\"number\">1</span>];</div><div class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"number\">0</span>&lt;=rowIdx &amp;&amp; rowIdx&lt;grid.size() &amp;&amp; <span class=\"number\">0</span>&lt;=colIdx &amp;&amp; colIdx&lt;grid[<span class=\"number\">0</span>].size()</div><div class=\"line\">                    &amp;&amp; <span class=\"string\">'1'</span>==grid[rowIdx][colIdx]) &#123;</div><div class=\"line\">                    q.push(pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;(rowIdx, colIdx));</div><div class=\"line\">                    grid[rowIdx][colIdx] = <span class=\"string\">'0'</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p><strong>代码分析：</strong></p>\n<pre><code>1. BFS的处理需要借助数组实现，每一次将grid范围内其值为1的元素塞进数组（后续元素为当前grid[i][j]四个方向上的邻接元素）\n2. 为避免重复计数，每统计一个grid[i][j]，将其值置为0\n3. 由于孤岛有四个维度，元素grid[i][j]的四个方向的下一个元素坐标分别为：[(i-1, j), (i+1, j), (i, j-1), (i, j+1)]\n4. 由于是字符数组，在dfs迭代过程中，先要判断是否存在空数组情况，即‘[]’.\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"题目描述：\"><a href=\"#题目描述：\" class=\"headerlink\" title=\"题目描述：\"></a><a href=\"https://leetcode.com/problems/number-of-islands/description/\" target=\"_blank\" rel=\"external\">题目描述</a>：</h2><p>Given a 2d grid map of ‘1’s (land) and ‘0’s (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.<br><strong>Example 1:</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">11110</div><div class=\"line\">11010</div><div class=\"line\">11000</div><div class=\"line\">00000</div></pre></td></tr></table></figure></p>\n<p>Answer: 1<br><strong>Example 2:</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">11000</div><div class=\"line\">11000</div><div class=\"line\">00100</div><div class=\"line\">00011</div></pre></td></tr></table></figure></p>\n<p>Answer: 3</p>\n<h2 id=\"题目大意：\"><a href=\"#题目大意：\" class=\"headerlink\" title=\"题目大意：\"></a>题目大意：</h2><p>给定一个由字符‘1’（陆地）和‘0’（水域）组成的二维网格地图，计算岛屿的个数。岛屿被水域环绕，由竖直或者水平方向邻接的陆地构成。你可以假设网格地图的四条边都被水域包围。<br>测试样例见题目描述</p>\n<h3 id=\"解题思路1：\"><a href=\"#解题思路1：\" class=\"headerlink\" title=\"解题思路1：\"></a>解题思路1：</h3><hr>\n<p>DFS：深度优先遍历（递归实现）<br>参考LeetCode Discuss：<br><a href=\"https://discuss.leetcode.com/topic/106261/java-c-clean-code\" target=\"_blank\" rel=\"external\">https://discuss.leetcode.com/topic/106261/java-c-clean-code</a><br><a href=\"https://discuss.leetcode.com/topic/13045/my-accepted-c-solution-may-be-trivial\" target=\"_blank\" rel=\"external\">https://discuss.leetcode.com/topic/13045/my-accepted-c-solution-may-be-trivial</a></p>\n<p><strong>C++代码：</strong><br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span></span></div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">numIslands</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">char</span>&gt; &gt;&amp; grid)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"number\">0</span> == grid.size() || <span class=\"number\">0</span> == grid[<span class=\"number\">0</span>].size())</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">int</span> numIslands = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; grid.size(); i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; grid[<span class=\"number\">0</span>].size(); j++) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"string\">'1'</span> == grid[i][j]) &#123;</div><div class=\"line\">                    numIslands++;</div><div class=\"line\">                    bfs(grid, i, j);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> numIslands;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">char</span>&gt; &gt;&amp; grid, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"number\">0</span> &gt; i || i &gt;= grid.size() || <span class=\"number\">0</span> &gt; j || j &gt;= grid[<span class=\"number\">0</span>].size() || <span class=\"string\">'0'</span> == grid[i][j])</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\"></div><div class=\"line\">        grid[i][j] = <span class=\"string\">'0'</span>; <span class=\"comment\">// mark the value to avoid duplication</span></div><div class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; dir(&#123;<span class=\"number\">-1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>&#125;); <span class=\"comment\">// c++11/14</span></div><div class=\"line\">        <span class=\"comment\">// int nums[] = &#123;-1, 0, 1, 0, -1&#125;;</span></div><div class=\"line\">        <span class=\"comment\">// vector&lt;int&gt; dir(nums, nums + sizeof(nums) / sizeof(int));</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> idx = <span class=\"number\">0</span>; idx &lt; dir.size() - <span class=\"number\">1</span>; idx++) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> rowIdx = i + dir[idx]; <span class=\"comment\">// row index</span></div><div class=\"line\">            <span class=\"keyword\">int</span> colIdx = j + dir[idx + <span class=\"number\">1</span>]; <span class=\"comment\">// col index</span></div><div class=\"line\">            dfs(grid, rowIdx, colIdx);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p><strong>代码分析：</strong></p>\n<pre><code>1. 递归函数需要注意结束条件，即边界的处理。我们关心的是grid范围内，其值为1的元素\n2. 为避免重复计数，每统计一个grid[i][j]，将其值置为0\n3. 由于孤岛有四个维度，元素grid[i][j]的四个方向的下一个元素坐标分别为：[(i-1, j), (i+1, j), (i, j-1), (i, j+1)]\n4. 由于是字符数组，在dfs迭代过程中，先要判断是否存在空数组情况，即‘[]’.\n</code></pre><h3 id=\"解题思路2：\"><a href=\"#解题思路2：\" class=\"headerlink\" title=\"解题思路2：\"></a>解题思路2：</h3><hr>\n<p>BFS：广度优先遍历（借助队列迭代实现）<br>参考LeetCode Discuss：<br><a href=\"https://discuss.leetcode.com/topic/11589/dfs-and-bfs-in-c\" target=\"_blank\" rel=\"external\">https://discuss.leetcode.com/topic/11589/dfs-and-bfs-in-c</a></p>\n<p><strong>C++代码：</strong><br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span></span></div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">numIslands</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">char</span>&gt; &gt;&amp; grid)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"number\">0</span> == grid.size() || <span class=\"number\">0</span> == grid[<span class=\"number\">0</span>].size())</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">int</span> numIslands = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; grid.size(); i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; grid[<span class=\"number\">0</span>].size(); j++) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"string\">'1'</span> == grid[i][j]) &#123;</div><div class=\"line\">                    numIslands++;</div><div class=\"line\">                    bfs(grid, i, j);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> numIslands;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bfs</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">char</span>&gt; &gt;&amp; grid, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"built_in\">queue</span>&lt;pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; &gt; q;</div><div class=\"line\">        q.push(pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;(i, j));</div><div class=\"line\">        grid[i][j] = <span class=\"string\">'0'</span>; <span class=\"comment\">// mark the value to avoid duplication</span></div><div class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; dir(&#123;<span class=\"number\">-1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>&#125;); <span class=\"comment\">// c++11/14</span></div><div class=\"line\">        <span class=\"comment\">// int nums[] = &#123;-1, 0, 1, 0, -1&#125;;</span></div><div class=\"line\">        <span class=\"comment\">// vector&lt;int&gt; dir(nums, nums + sizeof(nums) / sizeof(int));</span></div><div class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"number\">0</span> &lt; q.size()) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> m = q.front().first; <span class=\"comment\">// row index</span></div><div class=\"line\">            <span class=\"keyword\">int</span> n = q.front().second; <span class=\"comment\">// col index</span></div><div class=\"line\">            q.pop(); <span class=\"comment\">// remove from queue</span></div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> idx = <span class=\"number\">0</span>; idx &lt; dir.size() - <span class=\"number\">1</span>; idx++) &#123;</div><div class=\"line\">                <span class=\"keyword\">int</span> rowIdx = m + dir[idx];</div><div class=\"line\">                <span class=\"keyword\">int</span> colIdx = n + dir[idx + <span class=\"number\">1</span>];</div><div class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"number\">0</span>&lt;=rowIdx &amp;&amp; rowIdx&lt;grid.size() &amp;&amp; <span class=\"number\">0</span>&lt;=colIdx &amp;&amp; colIdx&lt;grid[<span class=\"number\">0</span>].size()</div><div class=\"line\">                    &amp;&amp; <span class=\"string\">'1'</span>==grid[rowIdx][colIdx]) &#123;</div><div class=\"line\">                    q.push(pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;(rowIdx, colIdx));</div><div class=\"line\">                    grid[rowIdx][colIdx] = <span class=\"string\">'0'</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p><strong>代码分析：</strong></p>\n<pre><code>1. BFS的处理需要借助数组实现，每一次将grid范围内其值为1的元素塞进数组（后续元素为当前grid[i][j]四个方向上的邻接元素）\n2. 为避免重复计数，每统计一个grid[i][j]，将其值置为0\n3. 由于孤岛有四个维度，元素grid[i][j]的四个方向的下一个元素坐标分别为：[(i-1, j), (i+1, j), (i, j-1), (i, j+1)]\n4. 由于是字符数组，在dfs迭代过程中，先要判断是否存在空数组情况，即‘[]’.\n</code></pre>"},{"title":"Hexo环境搭建个人博客","date":"2017-07-21T09:14:41.000Z","_content":"\n很早之前就计划搭建一个博客，但由于各方面原因（最主要还是懒），一直耽误着。终于几个月前看到同事在弄，自己也开始折腾起来。 一路跌跌撞撞，也算初步搞定。特此把中间踩过的坑记录下来，也算对后来的道友有个交代。\n\n## 一、前期准备\n\n### 服务器购买\n---\n\n我是用的是VPS（虚拟专用服务器）作为网站的服务器，选择了口碑较好的搬瓦工VPS，因为其价格便宜，稳定性强，并且还支持支付宝付款。\n关键的关键是VPS上安装了Shadowsocks以后就可以无忧访问外网了，比隔天就被封杀的VPN靠谱多了。 **:)**\n\n[搬瓦工官网][1]\n注册完后，在Home页面有很多产品供我们选择，我之前选择的是最便宜的那款，2.99美刀一个月，如果觉得性能有瓶颈，可以考虑换个买4.99美刀一个月的，性能提升了一倍(毕竟2.99美刀的内存才256M)。\n每个直达方案通道里面，有具体方案的细节，筒子们可以自己研究下再做决定。\n\n{% qnimg 2017-07-20/2017_07_20_1.png %}\n\n购买完成后，选择`VPS Hosting->Services->My Services`。\n然后可以看到已经购买的VPS。 服务器有了，下面当然就是给你的服务器安装操作系统。 点击KiwiVM Control Panel\n\n{% qnimg 2017-07-20/2017_07_20_2.png %}\n\n选择`Install new OS`，我安装的是`centos-6-x86`，这个根据个人喜好选择。 装完好系统，我们可以看到自己VPS的服务器属性。\n\n{% qnimg 2017-07-20/2017_07_20_3.png %}\n\n然后远程连接到服务器上。 网上有很多串口连接软件，我用的是[Putty][8]。 打开后，输入服务器的IP地址和端口号。\n\n{% qnimg 2017-07-20/2017_07_20_4.png %}\n\n登录成功后，进入熟悉的命令行模式，至此VPS的购买就全部搞定啦！\n\n### 域名注册\n---\n\n对于网站的访问，我们可以通过IP地址直接访问，也可以通过域名来访问。 相比之下，域名更便于记忆。 当然为了此步骤更多是为了显得更专（zhuang）业（bi）。 具体步骤如下：\n域名注册网站：\n\n- **TK**\n- **Namecheap**\n\nTk域名，网络上最容易申请到的免费域名之一，以TK结尾，与COM、NET、CN一样同属顶级域名。 因为是免费域名，很多人用来做垃圾网站，听说百度一般不会收录。 汗！\n经过网上的一番对比，最终还是选择了在Namecheap上注册域名。 购买好域名后，要配置下域名和我们的服务器IP地址的映射关系。 配置好后，可能需要等十来分钟后，才可以被DNS服务器正常解析。\n\n{% qnimg 2017-07-20/2017_07_20_6.png %}\n\n关于NameCheap的映射关系配置，请参考链接: [namecheap域名解析教程2017][2]\nOK，恭喜你，前期工作准备完了！ 开罐可乐庆祝一下!  **:)**\n\n## 二、Hexo环境安装\n\n**(本机Windows部署)**\n---\n\n当初也有很多博客框架的选择摆在我面前,但是我没有犹豫选择了[Hexo][3]。主要就是看中它的迅速快，号称使用`Node.js`让上百个页面在几秒内瞬间完成渲染；同时最关键的原因在于只需要一条命令就可以完成一键部署。 终极原因是因为懒 ～\nHexo的官网上东西已经比较全了，大家动手前，可以先浏览一下官网，讲的还是很详细的关于建站这块。\n闲话不多说，让我们撸起袖子，荡起双桨，二话不说开始干。\n\n\n### 基本思路\n---\n\n在本地生成静态文件，把静态文件部署到VPS上，用Nginx直接做Web服务，由于hexo支持git的部署方式，从而可以实现从本地更新博客，方便快捷。\n\n\n### 安装Node.js\n---\n\n在[Node.js][4]官网下载最新版，一路默认安装。\n\n### 安装Git\n---\n\n下载[Git for windows][5]一路默认next点下去。\nGit这里我们需要注意一下，需要配置一下[环境变量][6]。\n然后我们需要生成SSH密钥，按下面的步骤进行。\n1. 打开`C:\\Users\\<用户名>\\.ssh`文件夹，如果没有就新建\n2. 在空白处单击右键，选择`Git Bash Here`打开终端\n3. 设置git用户名\n```\ngit config --global user.email \"email@example.com\"\ngit config --global user.name \"username\"\n```\n\n### 生成ssh密钥\n---\n\n一路回车生成公钥和密钥，一会要用到公钥`id_rsa.pub`\n`ssh-keygen -t rsa -C \"email@example.com\"`\n\n{% qnimg 2017-07-20/2017_07_20_5.png %}\n\n### 创建网站目录\n---\n\n在你电脑的任意位置创建一个文件夹（例如`C:\\hexo`，下文以此代替），作为网站目录(名字可以任取)。\n\n### 安装Hexo\n---\n\n打开`cmd`(**以管理员权限运行**)，通过`cd`命令进入`hexo`文件夹，输入`node`后执行如下命令(或者压根不用)\n```\nnpm install -g hexo-cli\nhexo init\nnpm install\nhexo d -fg\n```\n\n运行完上述命令后,可以在`C:\\hexo`文件夹下看到有以下的文件目录生成。 你可以看见hexo文件夹下有一个`themes`文件夹，这是可以自定义的，从而改变网站的呈现形式，[Hexo][7]官网也提供了一些可供选择的主题。\n\n{% qnimg 2017-07-20/2017_07_20_7.png %}\n\n接着启动本地hexo server\n`hexo serve(或者hexo s)`\n打开`http://localhost:4000` 即可看到你的站点（当然还没有发布到网络）。 如果没有响应的话，电脑重启一下，再敲入`hexo serve(或者hexo s)`\n启动本地hexo server的命令。\n\n{% qnimg 2017-07-20/2017_07_20_8.png %}\n\n到这里，本地的网站部署和搭建就告一段落。 可以稍微休息下，准备部署VPS了。\n\n## 三、部署Hexo\n**(VPS部署)**\n---\n\n前面已经讲解过VPS的购买和系统安装，此处为`Centos 6`在`root`下的操作，关于连接VPS，Windows 用户请使用[Putty][8]（提示： Putty 中使用粘贴仅需鼠标右键）。\n关于`vi`操作，按下`i`键进入编辑模式，编辑结束后按`esc`键退出，这时按`： `，并输入 `wq` ，即可。\n\n### 安装Git\n---\n\n在Putty终端输入如下命令：\n```\nyum update && apt-get upgrade -y #更新内核\nyum install git-core\n```\n\n### 安装nginx\n---\n\n在Putty终端输入如下命令：\n`yum install nginx -y`\n\n### 新建git用户添加sudo权限\n---\n\n在Putty终端输入如下命令：\n```\nadduser git\nchmod 740 /etc/sudoers #改变权限值用于读写\nvim /etc/sudoers\n```\n\n在vi编辑中找到如下内容：\n```\n## Allow root to run any commands anywhere\nrootALL=(ALL) ALL\n```\n\n在下面添加一行\n`git   ALL=(ALL) ALL`\n保存并退出(`vi`里输入`:wq`，回车执行)后执行\n`chmod 440 /etc/sudoers #改回原来的权限值`\n\n### 创建git仓库，并配置ssh登录\n---\n\n```\nsu git\ncd ~\nmkdir .ssh && cd .ssh\ntouch authorized_keys\nvi authorized_keys // 在这个文件中粘贴进刚刚Winodws下申请的key（在id_rsa.pub文件中）\ncd ~\nmkdir hexo.git && cd hexo.git\ngit init --bare\n```\n(上文中提到`hexo.git或者hexo`都可以替换成你的网站的名字)\n\n{% qnimg 2017-07-20/2017_07_20_9.png %}\n\n测试一下，如果在**git bash**中输入`ssh git@VPS的IP地址`,能够远程登录的话，则表示设置成功了。\n\n### 创建网站目录并赋予git对网站目录的所有权\n---\n\n```\ncd /var/www\nmkdir hexo\nchown git:git -R /var/www/hexo\n```\n(上文中提到`hexo`都可以替换成你的网站的名字)\n\n### 配置git hooks\n---\n\n```\nsu git\ncd /home/git/hexo.git/hooks # 如果没有hooks目录,就mkdir hooks 自己建一个目录\nvim post-receive\n```\n\n输入如下内容后保存退出(`vim下输入`:wq`)\n\n```\n#!/bin/bash -l\nGIT_REPO=/home/git/hexo.git #git仓库\nTMP_GIT_CLONE=/tmp/hexo\nPUBLIC_WWW=/var/www/hexo #网站目录\nrm -rf ${TMP_GIT_CLONE}\ngit clone $GIT_REPO $TMP_GIT_CLONE\nrm -rf ${PUBLIC_WWW}/*\ncp -rf ${TMP_GIT_CLONE}/* ${PUBLIC_WWW}\n```\n(上文中提到`hexo.git或者hexo`都可以替换成你的网站的名字)\n原理就是从`GIT_REPO`仓库中把文件拷贝到`PUBLIC_WWW`目录下发布，中间有个`TMP_GIT_CLONE`用于保存文件。\n然后赋予脚本的执行权限 `chmod +x post-receive`\n同时把上述的三个路径都用`chown git:git -R /路径`更改了owner\n\n### 配置Nginx\n---\n\n`vim /etc/nginx/conf.d/hexo.conf`\n插入如下代码：\n\n```\nserver {\n    listen         80 ;\n    root /var/www/hexo;//这里可以改成你的网站目录地址，我将网站放在/var/www/hexo\n    server_name example.com www.example.com;//这里输入你的域名或IP地址\n    access_log  /var/log/nginx/hexo_access.log;//这里的log文件也可以根据自己网站名字替换\n    error_log   /var/log/nginx/hexo_error.log;//这里的log文件也可以根据自己网站名字替换\n    location ~* ^.+\\.(ico|gif|jpg|jpeg|png)$ {\n            root /var/www/hexo;//网站目录地址\n            access_log   off;\n            expires      1d;\n    }\n    location ~* ^.+\\.(css|js|txt|xml|swf|wav)$ {\n        root /var/www/hexo;//网站目录地址\n        access_log   off;\n        expires      10m;\n    }\n    location / {\n        root /var/www/hexo;//网站目录地址\n        if (-f $request_filename) {\n            rewrite ^/(.*)$  /$1 break;\n        }\n    }\n}\n```\n\n重启Nginx\n`service nginx restart`\n(如果上述操作git用户搞不定，就切换到root用户`su root`)\n\n### 配置hexo配置文件\n---\n\n位于`hexo`文件夹下，`_config.yml`,修改`deploy`选项，改成如下\n```\ndeploy:\n- type: git\n  repo: ssh://git@VPS的IP地址:/home/git/hexo.git#VPS上对应的git仓库(包含git hooks的地址)\n  branch: master\n- type: git\n  repo: ssh://git@github.com/hexo.git#github上对应的保存静态文件的仓库\n  branch: master\n```\n\n接着在hexo文件夹内，按住`shift右击`，选择在此处打开命令窗口（当然你也可以用cd命令），运行`hexo g && hexo d`，如果一切正常，静态文件已经被成功的push到了blog的仓库里，如果出现`appears not to be a git repo`的错误，删除hexo目录下的`.deploy`后再次`hexo g && hexo d`就可以了。\n到这里，博客已经完全建好了。\n\n### 更新博客\n---\n\n使用一款 MarkDown 编辑器写 Blog 。写完后将文件以 `*.md`的格式保存在本地`[网站目录]\\source\\_posts`中。文件编码必须为 **`UTF-8`**，这一点仅 Windows 用户需注意。\n编写完后，只需要在hexo文件夹下执行`hexo g && hexo d`，博客即可更新。\n\n### 备份\n---\n\n由于上面hexo文件夹下执行`hexo g && hexo d`执行之后, 会更新github上你的网站目录的信息, 但是markdown文件并没有保存, 保存的是转换成静态文件`html`, 所以还是需要保存下你的原文件。因此在github上建了一个仓库专门保存博客的原文件。这样更新完博客以后，只要上传一下原文件就可以高枕无忧了。  **:)**\n\n## 四、安装中遇到问题\n---\n\n- 上传操作`hexo d`报错`spawn git ENOENT`，添加[Git环境变量][6]后可以了\n\n- `hexo g` 报错，安装`hexo-delopyer-git`后解决。\n\n- `hexo d` 提交到VPS网站目录里的文件并不是单独的public文件夹，检查hexo文件夹发现存在`.git`这个目录，删除`.git`文件夹即可（他是隐藏的哦）。\n\n- `ssh git@ip`，被拒绝，是远程端口默认为`22`端口，而不是我VPS的`ssh`真正端口。\n  解决方法：在`.ssh`文件夹下（也就是生成公钥的文件夹）创建`config`文件，输入如下内容：\n```\nHost // VPS的IP\nHostName // VPS的IP\nUser git\nPort // SSH端口\nIdentityFile ~/.ssh/id_rsa\n```\n\t{% qnimg 2017-07-20/2017_07_20_10.png %}\n\n- `ssh -T git@github.com`是否连接上`github`\n`git config --list` 查看`git config`配置\n\n- ngix正常配置后，执行 `yum install nginx -y`。 如果失败，可能是源没有配置，在`/etc/yum.repos.d`目录下创建一个源配置文件`nginx.repo, 写入如下代码，然后再执行一次。\n```\n[nginx]\nname=nginx repo\nbaseurl=http://nginx.org/packages/centos/$releasever/$basearch/\ngpgcheck=0\nenabled=1\n\n最后查看版本号，验证完成 `nginx -v`\n```\n\t{% qnimg 2017-07-20/2017_07_20_11.png %}\n\n- 用`yum install git`安装`Git`出现问题：`/bin/bash: git: command not found`\n解决（修改安装命令为）：`yum install git git-svn git-email git-gui gitk -y`\n\n- ssh配置后，ssh连接验证：`ssh: connect to host localhost port 22: Connection refused`\n```\n错误原因：\nsshd 未安装：yum install openssh-server\nsshd 未启动：chkconfig sshd on\n防火墙：chkconfig iptables off(永久性生效，重启后不会复原)\n端口号没有设置为22(或者设置后没有重启：service sshd restart)\n```\n\n- 使用`hero d`报错：`ERROR Deployer not found: git`\n  解决：记得一定要在 blog 目录里 执行 `npm install hexo-deployer-git --save`\n  {% qnimg 2017-07-20/2017_07_20_12.png %}\n\n- 查看`node`和`npm`版本\n```\nnode --version\nnpm --version\n```\n\n- warning: LF will be replaced by CRLF | fatal: CRLF would be replaced by LF\n  解决办法：http://blog.csdn.net/feng88724/article/details/11600375\n  遇到这两个错误，是因为Git的换行符检查功能\n  对于出现一些conflic，可以reset一些，再重新更新\n```\ngit reset --hard FETCH_HEAD\ngit pull origin master\n```\n\n- hexo安装成功，并且正确运行，但是localhost:4000不能访问\n  解决办法：https://yq.aliyun.com/articles/58027\n  遇到这个问题，是因为4000端口被占用了。如果你的电脑上不幸装了福昕阅读，恭喜你！它就是罪魁祸首....\n  胳膊拧不过大腿，对于这种流氓软件，我们别无他法，只能换端口。 :(\n```\n启动hexo s 的时候，用这个命令，换一个端口。\nhexo s -p 3600 // 随便指定一个端口号就好\n```\n\n- 添加多个key到git\n  Step1 添加到github账号： 打开`C:\\Users\\<用户名>\\.ssh`文件夹，拷贝`id_rsa.pub`里的内容，在Github账号`Settings->SSH and GPG keys->New SSH key`\n  Step2 [添加到VPS][9]： 在`C:\\Users\\<用户名>\\.ssh`文件夹下打开`Git Bash Here`, 执行`ssh-copy-id git@vps的IP`\n\n- 运行`hexo g && hexo d`后没有触发**git hooks**解决方案\n说实话这个问题困扰了我三四天了，之前都是`hexo g && hexo d`之后，跑到VPS下的发布目录（`www/hexo/`）去手动download github上的`hexo.git`仓库完成发布的。\n确实不爽，于是翻了好几条网页，终于解决了。方法如下：\n1. 检查你的本地public key有没有add 到github账号，并且`/home/git/.ssh/authorized_keys`里面已经加入了之前Winodws下申请的key\n2. hexo文件夹下，`_config.yml`的配置语句正确如下\n```\ndeploy:\n- type: git\n  repo: ssh://git@VPS的IP地址:/home/git/hexo.git#VPS上对应的git仓库(包含git hooks的地址)\n  branch: master\n- type: git\n  repo: ssh://git@github.com/hexo.git#github上对应的保存静态文件的仓库\n  branch: master\n```\n\n3. 千万记得在本地博客路径`C:\\hexo\\`下一定要用`**Git Bash Here**`执行命令，而不是**Windows的命令行窗口**，否则会一直报“Permission denied, please try again.\"\n   {% qnimg 2017-07-20/2017_07_20_13.png %}\n   运行`ssh -T git@github.com`，是否能正常访问github\n   运行`hexo g && hexo d`，部署并提交代码到github，同时触发git hooks完成发布\n   过程中会弹出一个OpenSSH的对话框要你输入git的密码，输入完毕，点击ok。搞定！\n\n- 本地博客路径`C:\\hexo\\`下有个`.gitignore` 文件，主要用于`git status`忽略一些列出的文件，但是筒子们有木有发现改了该文件之后，其实并没有作用。\n百思不得其解之后，搜到[某攻略][10]才豁然开朗：只改文件你列出的文件或目录在仓库中，需要执行以下命令手动移除。提交一版之后，整个世界就清净了 **:)**\n```\ngit rm -rf --cached .\ngit add .\ngit commit -m \"xxxxx\"\ngit push origin master\n```\n\n- 为 Next 主题文末添加版权等信息\n看到别人博客里的版权信息，觉得有点意思，找了很多教程，效果都不是自己想要的。只能借用下[Next作者的格式和样式][11]。\n**建立基础的HTML代码**\n定位到本地博客文件夹下的`themes\\next\\layout\\_macro\\post.swig`文件，这个和于`layout`下的`post.swig`的区别是前者扶着具体的`post-content`的生成，而后者是调用前者。\n然后补充类似comment第三方的模块的脚本。找到post-body所在的标签，并在其后加上如下代码：然后补充类似comment第三方的模块的脚本。找到post-body所在的标签，并在其后加上如下代码：\n```\n<div>\n {# 表示如果不在索引列表中加入后续的HTML代码 #}\n {% if not is_index %}\n\t<ul class=\"post-copyright\">\n\t  <li class=\"post-copyright-author\">\n\t\t  <strong>本文作者：</strong>{{ theme.author }}\n\t  </li>\n\t  <li class=\"post-copyright-link\">\n\t\t<strong>本文链接：</strong>\n\t\t<a href=\"{{ url_for(page.path) }}\" title=\"{{ page.title }}\">{{ page.permalink }}</a>\n\t  </li>\n\t  <li class=\"post-copyright-license\">\n\t\t<strong>版权声明： </strong>\n\t\t本博客所有文章除特别声明外，均采用 <a href=\"http://creativecommons.org/licenses/by-nc-sa/3.0/cn/\" rel=\"external nofollow\" target=\"_blank\">CC BY-NC-SA 3.0 CN</a> 许可协议。转载请注明出处！\n\t  </li>\n\t</ul>\n {% endif %}\n</div>\n```\n\n\t**增添样式**\n\t定位Next下的`source/css/_custom/custom.styl`,并在里面添加如下样式代码:\n\t```\n\t.post-copyright {\n\t\tmargin: 2em 0 0;\n\t\tpadding: 0.5em 1em;\n\t\tborder-left: 3px solid #ff1700;\n\t\tbackground-color: #f9f9f9;\n\t\tlist-style: none;\n\t}\n\t```\n\n\n## 五、后记\n---\n\n以下是自己搭建过程中查找的相关链接和信息，希望对大家有帮助。\n1. https://dynamicer.com/how-to-deploy-hexo-blogs-with-git-hooks-on-vps/\n2. http://tiktoking.github.io/2016/01/26/hexo/\n3. http://blog.csdn.net/hanhailong726188/article/details/46738929\n4. http://blog.ynxiu.com/2016/hexo-next-theme-optimize.html\n5. https://arcecho.github.io/2017/04/08/Hexo-Next%E4%B8%8B%E6%B7%BB%E5%8A%A0%E7%89%88%E6%9D%83%E5%A3%B0%E6%98%8E%E6%A8%A1%E5%9D%97/\n\n\n## 六、编辑工具\n---\n\n因为Hexo是支持Markdown的文件，而Markdown是一种极简的『标记语言』，将文本转为`HTML`，通常为我大码农所用。 简介好使是关键！以下为一些相关链接，希望对大家有帮助。\n\nMarkdown语法\n1. http://ibruce.info/2013/11/26/markdown/\n2. https://maxiang.io/\n\nMarkdown编辑器\n1. http://www.csdn.net/article/2014-05-05/2819623\n2. https://maxiang.io/\n\n\n[1]: http://banwagong.cn\n[2]: http://xianhuo.org/namecheap-yumingjiexijiaocheng2016.html\n[3]: https://hexo.io/zh-cn/index.html\n[4]: https://nodejs.org/en/download/\n[5]: https://git-scm.com/download/win\n[6]: http://www.brafox.com/post/2015/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/git-%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE.html\n[7]: https://hexo.io/themes/\n[8]: http://the.earth.li/~sgtatham/putty/latest/x86/putty.exe\n[9]: https://askubuntu.com/questions/46424/adding-ssh-keys-to-authorized-keys\n[10]: https://stackoverflow.com/questions/25436312/gitignore-not-working\n[11]: http://notes.iissnan.com/2015/something-about-next/\n\n","source":"_posts/UseHexoToBuildBlog.md","raw":"---\ntitle: Hexo环境搭建个人博客\ndate: 2017-07-21 17:14:41\ncategories: Others\ntags:\n - Hexo\n - Blog\n - GitHub]\n---\n\n很早之前就计划搭建一个博客，但由于各方面原因（最主要还是懒），一直耽误着。终于几个月前看到同事在弄，自己也开始折腾起来。 一路跌跌撞撞，也算初步搞定。特此把中间踩过的坑记录下来，也算对后来的道友有个交代。\n\n## 一、前期准备\n\n### 服务器购买\n---\n\n我是用的是VPS（虚拟专用服务器）作为网站的服务器，选择了口碑较好的搬瓦工VPS，因为其价格便宜，稳定性强，并且还支持支付宝付款。\n关键的关键是VPS上安装了Shadowsocks以后就可以无忧访问外网了，比隔天就被封杀的VPN靠谱多了。 **:)**\n\n[搬瓦工官网][1]\n注册完后，在Home页面有很多产品供我们选择，我之前选择的是最便宜的那款，2.99美刀一个月，如果觉得性能有瓶颈，可以考虑换个买4.99美刀一个月的，性能提升了一倍(毕竟2.99美刀的内存才256M)。\n每个直达方案通道里面，有具体方案的细节，筒子们可以自己研究下再做决定。\n\n{% qnimg 2017-07-20/2017_07_20_1.png %}\n\n购买完成后，选择`VPS Hosting->Services->My Services`。\n然后可以看到已经购买的VPS。 服务器有了，下面当然就是给你的服务器安装操作系统。 点击KiwiVM Control Panel\n\n{% qnimg 2017-07-20/2017_07_20_2.png %}\n\n选择`Install new OS`，我安装的是`centos-6-x86`，这个根据个人喜好选择。 装完好系统，我们可以看到自己VPS的服务器属性。\n\n{% qnimg 2017-07-20/2017_07_20_3.png %}\n\n然后远程连接到服务器上。 网上有很多串口连接软件，我用的是[Putty][8]。 打开后，输入服务器的IP地址和端口号。\n\n{% qnimg 2017-07-20/2017_07_20_4.png %}\n\n登录成功后，进入熟悉的命令行模式，至此VPS的购买就全部搞定啦！\n\n### 域名注册\n---\n\n对于网站的访问，我们可以通过IP地址直接访问，也可以通过域名来访问。 相比之下，域名更便于记忆。 当然为了此步骤更多是为了显得更专（zhuang）业（bi）。 具体步骤如下：\n域名注册网站：\n\n- **TK**\n- **Namecheap**\n\nTk域名，网络上最容易申请到的免费域名之一，以TK结尾，与COM、NET、CN一样同属顶级域名。 因为是免费域名，很多人用来做垃圾网站，听说百度一般不会收录。 汗！\n经过网上的一番对比，最终还是选择了在Namecheap上注册域名。 购买好域名后，要配置下域名和我们的服务器IP地址的映射关系。 配置好后，可能需要等十来分钟后，才可以被DNS服务器正常解析。\n\n{% qnimg 2017-07-20/2017_07_20_6.png %}\n\n关于NameCheap的映射关系配置，请参考链接: [namecheap域名解析教程2017][2]\nOK，恭喜你，前期工作准备完了！ 开罐可乐庆祝一下!  **:)**\n\n## 二、Hexo环境安装\n\n**(本机Windows部署)**\n---\n\n当初也有很多博客框架的选择摆在我面前,但是我没有犹豫选择了[Hexo][3]。主要就是看中它的迅速快，号称使用`Node.js`让上百个页面在几秒内瞬间完成渲染；同时最关键的原因在于只需要一条命令就可以完成一键部署。 终极原因是因为懒 ～\nHexo的官网上东西已经比较全了，大家动手前，可以先浏览一下官网，讲的还是很详细的关于建站这块。\n闲话不多说，让我们撸起袖子，荡起双桨，二话不说开始干。\n\n\n### 基本思路\n---\n\n在本地生成静态文件，把静态文件部署到VPS上，用Nginx直接做Web服务，由于hexo支持git的部署方式，从而可以实现从本地更新博客，方便快捷。\n\n\n### 安装Node.js\n---\n\n在[Node.js][4]官网下载最新版，一路默认安装。\n\n### 安装Git\n---\n\n下载[Git for windows][5]一路默认next点下去。\nGit这里我们需要注意一下，需要配置一下[环境变量][6]。\n然后我们需要生成SSH密钥，按下面的步骤进行。\n1. 打开`C:\\Users\\<用户名>\\.ssh`文件夹，如果没有就新建\n2. 在空白处单击右键，选择`Git Bash Here`打开终端\n3. 设置git用户名\n```\ngit config --global user.email \"email@example.com\"\ngit config --global user.name \"username\"\n```\n\n### 生成ssh密钥\n---\n\n一路回车生成公钥和密钥，一会要用到公钥`id_rsa.pub`\n`ssh-keygen -t rsa -C \"email@example.com\"`\n\n{% qnimg 2017-07-20/2017_07_20_5.png %}\n\n### 创建网站目录\n---\n\n在你电脑的任意位置创建一个文件夹（例如`C:\\hexo`，下文以此代替），作为网站目录(名字可以任取)。\n\n### 安装Hexo\n---\n\n打开`cmd`(**以管理员权限运行**)，通过`cd`命令进入`hexo`文件夹，输入`node`后执行如下命令(或者压根不用)\n```\nnpm install -g hexo-cli\nhexo init\nnpm install\nhexo d -fg\n```\n\n运行完上述命令后,可以在`C:\\hexo`文件夹下看到有以下的文件目录生成。 你可以看见hexo文件夹下有一个`themes`文件夹，这是可以自定义的，从而改变网站的呈现形式，[Hexo][7]官网也提供了一些可供选择的主题。\n\n{% qnimg 2017-07-20/2017_07_20_7.png %}\n\n接着启动本地hexo server\n`hexo serve(或者hexo s)`\n打开`http://localhost:4000` 即可看到你的站点（当然还没有发布到网络）。 如果没有响应的话，电脑重启一下，再敲入`hexo serve(或者hexo s)`\n启动本地hexo server的命令。\n\n{% qnimg 2017-07-20/2017_07_20_8.png %}\n\n到这里，本地的网站部署和搭建就告一段落。 可以稍微休息下，准备部署VPS了。\n\n## 三、部署Hexo\n**(VPS部署)**\n---\n\n前面已经讲解过VPS的购买和系统安装，此处为`Centos 6`在`root`下的操作，关于连接VPS，Windows 用户请使用[Putty][8]（提示： Putty 中使用粘贴仅需鼠标右键）。\n关于`vi`操作，按下`i`键进入编辑模式，编辑结束后按`esc`键退出，这时按`： `，并输入 `wq` ，即可。\n\n### 安装Git\n---\n\n在Putty终端输入如下命令：\n```\nyum update && apt-get upgrade -y #更新内核\nyum install git-core\n```\n\n### 安装nginx\n---\n\n在Putty终端输入如下命令：\n`yum install nginx -y`\n\n### 新建git用户添加sudo权限\n---\n\n在Putty终端输入如下命令：\n```\nadduser git\nchmod 740 /etc/sudoers #改变权限值用于读写\nvim /etc/sudoers\n```\n\n在vi编辑中找到如下内容：\n```\n## Allow root to run any commands anywhere\nrootALL=(ALL) ALL\n```\n\n在下面添加一行\n`git   ALL=(ALL) ALL`\n保存并退出(`vi`里输入`:wq`，回车执行)后执行\n`chmod 440 /etc/sudoers #改回原来的权限值`\n\n### 创建git仓库，并配置ssh登录\n---\n\n```\nsu git\ncd ~\nmkdir .ssh && cd .ssh\ntouch authorized_keys\nvi authorized_keys // 在这个文件中粘贴进刚刚Winodws下申请的key（在id_rsa.pub文件中）\ncd ~\nmkdir hexo.git && cd hexo.git\ngit init --bare\n```\n(上文中提到`hexo.git或者hexo`都可以替换成你的网站的名字)\n\n{% qnimg 2017-07-20/2017_07_20_9.png %}\n\n测试一下，如果在**git bash**中输入`ssh git@VPS的IP地址`,能够远程登录的话，则表示设置成功了。\n\n### 创建网站目录并赋予git对网站目录的所有权\n---\n\n```\ncd /var/www\nmkdir hexo\nchown git:git -R /var/www/hexo\n```\n(上文中提到`hexo`都可以替换成你的网站的名字)\n\n### 配置git hooks\n---\n\n```\nsu git\ncd /home/git/hexo.git/hooks # 如果没有hooks目录,就mkdir hooks 自己建一个目录\nvim post-receive\n```\n\n输入如下内容后保存退出(`vim下输入`:wq`)\n\n```\n#!/bin/bash -l\nGIT_REPO=/home/git/hexo.git #git仓库\nTMP_GIT_CLONE=/tmp/hexo\nPUBLIC_WWW=/var/www/hexo #网站目录\nrm -rf ${TMP_GIT_CLONE}\ngit clone $GIT_REPO $TMP_GIT_CLONE\nrm -rf ${PUBLIC_WWW}/*\ncp -rf ${TMP_GIT_CLONE}/* ${PUBLIC_WWW}\n```\n(上文中提到`hexo.git或者hexo`都可以替换成你的网站的名字)\n原理就是从`GIT_REPO`仓库中把文件拷贝到`PUBLIC_WWW`目录下发布，中间有个`TMP_GIT_CLONE`用于保存文件。\n然后赋予脚本的执行权限 `chmod +x post-receive`\n同时把上述的三个路径都用`chown git:git -R /路径`更改了owner\n\n### 配置Nginx\n---\n\n`vim /etc/nginx/conf.d/hexo.conf`\n插入如下代码：\n\n```\nserver {\n    listen         80 ;\n    root /var/www/hexo;//这里可以改成你的网站目录地址，我将网站放在/var/www/hexo\n    server_name example.com www.example.com;//这里输入你的域名或IP地址\n    access_log  /var/log/nginx/hexo_access.log;//这里的log文件也可以根据自己网站名字替换\n    error_log   /var/log/nginx/hexo_error.log;//这里的log文件也可以根据自己网站名字替换\n    location ~* ^.+\\.(ico|gif|jpg|jpeg|png)$ {\n            root /var/www/hexo;//网站目录地址\n            access_log   off;\n            expires      1d;\n    }\n    location ~* ^.+\\.(css|js|txt|xml|swf|wav)$ {\n        root /var/www/hexo;//网站目录地址\n        access_log   off;\n        expires      10m;\n    }\n    location / {\n        root /var/www/hexo;//网站目录地址\n        if (-f $request_filename) {\n            rewrite ^/(.*)$  /$1 break;\n        }\n    }\n}\n```\n\n重启Nginx\n`service nginx restart`\n(如果上述操作git用户搞不定，就切换到root用户`su root`)\n\n### 配置hexo配置文件\n---\n\n位于`hexo`文件夹下，`_config.yml`,修改`deploy`选项，改成如下\n```\ndeploy:\n- type: git\n  repo: ssh://git@VPS的IP地址:/home/git/hexo.git#VPS上对应的git仓库(包含git hooks的地址)\n  branch: master\n- type: git\n  repo: ssh://git@github.com/hexo.git#github上对应的保存静态文件的仓库\n  branch: master\n```\n\n接着在hexo文件夹内，按住`shift右击`，选择在此处打开命令窗口（当然你也可以用cd命令），运行`hexo g && hexo d`，如果一切正常，静态文件已经被成功的push到了blog的仓库里，如果出现`appears not to be a git repo`的错误，删除hexo目录下的`.deploy`后再次`hexo g && hexo d`就可以了。\n到这里，博客已经完全建好了。\n\n### 更新博客\n---\n\n使用一款 MarkDown 编辑器写 Blog 。写完后将文件以 `*.md`的格式保存在本地`[网站目录]\\source\\_posts`中。文件编码必须为 **`UTF-8`**，这一点仅 Windows 用户需注意。\n编写完后，只需要在hexo文件夹下执行`hexo g && hexo d`，博客即可更新。\n\n### 备份\n---\n\n由于上面hexo文件夹下执行`hexo g && hexo d`执行之后, 会更新github上你的网站目录的信息, 但是markdown文件并没有保存, 保存的是转换成静态文件`html`, 所以还是需要保存下你的原文件。因此在github上建了一个仓库专门保存博客的原文件。这样更新完博客以后，只要上传一下原文件就可以高枕无忧了。  **:)**\n\n## 四、安装中遇到问题\n---\n\n- 上传操作`hexo d`报错`spawn git ENOENT`，添加[Git环境变量][6]后可以了\n\n- `hexo g` 报错，安装`hexo-delopyer-git`后解决。\n\n- `hexo d` 提交到VPS网站目录里的文件并不是单独的public文件夹，检查hexo文件夹发现存在`.git`这个目录，删除`.git`文件夹即可（他是隐藏的哦）。\n\n- `ssh git@ip`，被拒绝，是远程端口默认为`22`端口，而不是我VPS的`ssh`真正端口。\n  解决方法：在`.ssh`文件夹下（也就是生成公钥的文件夹）创建`config`文件，输入如下内容：\n```\nHost // VPS的IP\nHostName // VPS的IP\nUser git\nPort // SSH端口\nIdentityFile ~/.ssh/id_rsa\n```\n\t{% qnimg 2017-07-20/2017_07_20_10.png %}\n\n- `ssh -T git@github.com`是否连接上`github`\n`git config --list` 查看`git config`配置\n\n- ngix正常配置后，执行 `yum install nginx -y`。 如果失败，可能是源没有配置，在`/etc/yum.repos.d`目录下创建一个源配置文件`nginx.repo, 写入如下代码，然后再执行一次。\n```\n[nginx]\nname=nginx repo\nbaseurl=http://nginx.org/packages/centos/$releasever/$basearch/\ngpgcheck=0\nenabled=1\n\n最后查看版本号，验证完成 `nginx -v`\n```\n\t{% qnimg 2017-07-20/2017_07_20_11.png %}\n\n- 用`yum install git`安装`Git`出现问题：`/bin/bash: git: command not found`\n解决（修改安装命令为）：`yum install git git-svn git-email git-gui gitk -y`\n\n- ssh配置后，ssh连接验证：`ssh: connect to host localhost port 22: Connection refused`\n```\n错误原因：\nsshd 未安装：yum install openssh-server\nsshd 未启动：chkconfig sshd on\n防火墙：chkconfig iptables off(永久性生效，重启后不会复原)\n端口号没有设置为22(或者设置后没有重启：service sshd restart)\n```\n\n- 使用`hero d`报错：`ERROR Deployer not found: git`\n  解决：记得一定要在 blog 目录里 执行 `npm install hexo-deployer-git --save`\n  {% qnimg 2017-07-20/2017_07_20_12.png %}\n\n- 查看`node`和`npm`版本\n```\nnode --version\nnpm --version\n```\n\n- warning: LF will be replaced by CRLF | fatal: CRLF would be replaced by LF\n  解决办法：http://blog.csdn.net/feng88724/article/details/11600375\n  遇到这两个错误，是因为Git的换行符检查功能\n  对于出现一些conflic，可以reset一些，再重新更新\n```\ngit reset --hard FETCH_HEAD\ngit pull origin master\n```\n\n- hexo安装成功，并且正确运行，但是localhost:4000不能访问\n  解决办法：https://yq.aliyun.com/articles/58027\n  遇到这个问题，是因为4000端口被占用了。如果你的电脑上不幸装了福昕阅读，恭喜你！它就是罪魁祸首....\n  胳膊拧不过大腿，对于这种流氓软件，我们别无他法，只能换端口。 :(\n```\n启动hexo s 的时候，用这个命令，换一个端口。\nhexo s -p 3600 // 随便指定一个端口号就好\n```\n\n- 添加多个key到git\n  Step1 添加到github账号： 打开`C:\\Users\\<用户名>\\.ssh`文件夹，拷贝`id_rsa.pub`里的内容，在Github账号`Settings->SSH and GPG keys->New SSH key`\n  Step2 [添加到VPS][9]： 在`C:\\Users\\<用户名>\\.ssh`文件夹下打开`Git Bash Here`, 执行`ssh-copy-id git@vps的IP`\n\n- 运行`hexo g && hexo d`后没有触发**git hooks**解决方案\n说实话这个问题困扰了我三四天了，之前都是`hexo g && hexo d`之后，跑到VPS下的发布目录（`www/hexo/`）去手动download github上的`hexo.git`仓库完成发布的。\n确实不爽，于是翻了好几条网页，终于解决了。方法如下：\n1. 检查你的本地public key有没有add 到github账号，并且`/home/git/.ssh/authorized_keys`里面已经加入了之前Winodws下申请的key\n2. hexo文件夹下，`_config.yml`的配置语句正确如下\n```\ndeploy:\n- type: git\n  repo: ssh://git@VPS的IP地址:/home/git/hexo.git#VPS上对应的git仓库(包含git hooks的地址)\n  branch: master\n- type: git\n  repo: ssh://git@github.com/hexo.git#github上对应的保存静态文件的仓库\n  branch: master\n```\n\n3. 千万记得在本地博客路径`C:\\hexo\\`下一定要用`**Git Bash Here**`执行命令，而不是**Windows的命令行窗口**，否则会一直报“Permission denied, please try again.\"\n   {% qnimg 2017-07-20/2017_07_20_13.png %}\n   运行`ssh -T git@github.com`，是否能正常访问github\n   运行`hexo g && hexo d`，部署并提交代码到github，同时触发git hooks完成发布\n   过程中会弹出一个OpenSSH的对话框要你输入git的密码，输入完毕，点击ok。搞定！\n\n- 本地博客路径`C:\\hexo\\`下有个`.gitignore` 文件，主要用于`git status`忽略一些列出的文件，但是筒子们有木有发现改了该文件之后，其实并没有作用。\n百思不得其解之后，搜到[某攻略][10]才豁然开朗：只改文件你列出的文件或目录在仓库中，需要执行以下命令手动移除。提交一版之后，整个世界就清净了 **:)**\n```\ngit rm -rf --cached .\ngit add .\ngit commit -m \"xxxxx\"\ngit push origin master\n```\n\n- 为 Next 主题文末添加版权等信息\n看到别人博客里的版权信息，觉得有点意思，找了很多教程，效果都不是自己想要的。只能借用下[Next作者的格式和样式][11]。\n**建立基础的HTML代码**\n定位到本地博客文件夹下的`themes\\next\\layout\\_macro\\post.swig`文件，这个和于`layout`下的`post.swig`的区别是前者扶着具体的`post-content`的生成，而后者是调用前者。\n然后补充类似comment第三方的模块的脚本。找到post-body所在的标签，并在其后加上如下代码：然后补充类似comment第三方的模块的脚本。找到post-body所在的标签，并在其后加上如下代码：\n```\n<div>\n {# 表示如果不在索引列表中加入后续的HTML代码 #}\n {% if not is_index %}\n\t<ul class=\"post-copyright\">\n\t  <li class=\"post-copyright-author\">\n\t\t  <strong>本文作者：</strong>{{ theme.author }}\n\t  </li>\n\t  <li class=\"post-copyright-link\">\n\t\t<strong>本文链接：</strong>\n\t\t<a href=\"{{ url_for(page.path) }}\" title=\"{{ page.title }}\">{{ page.permalink }}</a>\n\t  </li>\n\t  <li class=\"post-copyright-license\">\n\t\t<strong>版权声明： </strong>\n\t\t本博客所有文章除特别声明外，均采用 <a href=\"http://creativecommons.org/licenses/by-nc-sa/3.0/cn/\" rel=\"external nofollow\" target=\"_blank\">CC BY-NC-SA 3.0 CN</a> 许可协议。转载请注明出处！\n\t  </li>\n\t</ul>\n {% endif %}\n</div>\n```\n\n\t**增添样式**\n\t定位Next下的`source/css/_custom/custom.styl`,并在里面添加如下样式代码:\n\t```\n\t.post-copyright {\n\t\tmargin: 2em 0 0;\n\t\tpadding: 0.5em 1em;\n\t\tborder-left: 3px solid #ff1700;\n\t\tbackground-color: #f9f9f9;\n\t\tlist-style: none;\n\t}\n\t```\n\n\n## 五、后记\n---\n\n以下是自己搭建过程中查找的相关链接和信息，希望对大家有帮助。\n1. https://dynamicer.com/how-to-deploy-hexo-blogs-with-git-hooks-on-vps/\n2. http://tiktoking.github.io/2016/01/26/hexo/\n3. http://blog.csdn.net/hanhailong726188/article/details/46738929\n4. http://blog.ynxiu.com/2016/hexo-next-theme-optimize.html\n5. https://arcecho.github.io/2017/04/08/Hexo-Next%E4%B8%8B%E6%B7%BB%E5%8A%A0%E7%89%88%E6%9D%83%E5%A3%B0%E6%98%8E%E6%A8%A1%E5%9D%97/\n\n\n## 六、编辑工具\n---\n\n因为Hexo是支持Markdown的文件，而Markdown是一种极简的『标记语言』，将文本转为`HTML`，通常为我大码农所用。 简介好使是关键！以下为一些相关链接，希望对大家有帮助。\n\nMarkdown语法\n1. http://ibruce.info/2013/11/26/markdown/\n2. https://maxiang.io/\n\nMarkdown编辑器\n1. http://www.csdn.net/article/2014-05-05/2819623\n2. https://maxiang.io/\n\n\n[1]: http://banwagong.cn\n[2]: http://xianhuo.org/namecheap-yumingjiexijiaocheng2016.html\n[3]: https://hexo.io/zh-cn/index.html\n[4]: https://nodejs.org/en/download/\n[5]: https://git-scm.com/download/win\n[6]: http://www.brafox.com/post/2015/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/git-%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE.html\n[7]: https://hexo.io/themes/\n[8]: http://the.earth.li/~sgtatham/putty/latest/x86/putty.exe\n[9]: https://askubuntu.com/questions/46424/adding-ssh-keys-to-authorized-keys\n[10]: https://stackoverflow.com/questions/25436312/gitignore-not-working\n[11]: http://notes.iissnan.com/2015/something-about-next/\n\n","slug":"UseHexoToBuildBlog","published":1,"updated":"2017-11-15T09:01:34.780Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjadpus9x000lcoxdqm0to1u0","content":"<p>很早之前就计划搭建一个博客，但由于各方面原因（最主要还是懒），一直耽误着。终于几个月前看到同事在弄，自己也开始折腾起来。 一路跌跌撞撞，也算初步搞定。特此把中间踩过的坑记录下来，也算对后来的道友有个交代。</p>\n<h2 id=\"一、前期准备\"><a href=\"#一、前期准备\" class=\"headerlink\" title=\"一、前期准备\"></a>一、前期准备</h2><h3 id=\"服务器购买\"><a href=\"#服务器购买\" class=\"headerlink\" title=\"服务器购买\"></a>服务器购买</h3><hr>\n<p>我是用的是VPS（虚拟专用服务器）作为网站的服务器，选择了口碑较好的搬瓦工VPS，因为其价格便宜，稳定性强，并且还支持支付宝付款。<br>关键的关键是VPS上安装了Shadowsocks以后就可以无忧访问外网了，比隔天就被封杀的VPN靠谱多了。 <strong>:)</strong></p>\n<p><a href=\"http://banwagong.cn\" target=\"_blank\" rel=\"external\">搬瓦工官网</a><br>注册完后，在Home页面有很多产品供我们选择，我之前选择的是最便宜的那款，2.99美刀一个月，如果觉得性能有瓶颈，可以考虑换个买4.99美刀一个月的，性能提升了一倍(毕竟2.99美刀的内存才256M)。<br>每个直达方案通道里面，有具体方案的细节，筒子们可以自己研究下再做决定。</p>\n<img src=\"http://otqlqfy9h.bkt.clouddn.com/images/2017-07-20/2017_07_20_1.png\">\n<p>购买完成后，选择<code>VPS Hosting-&gt;Services-&gt;My Services</code>。<br>然后可以看到已经购买的VPS。 服务器有了，下面当然就是给你的服务器安装操作系统。 点击KiwiVM Control Panel</p>\n<img src=\"http://otqlqfy9h.bkt.clouddn.com/images/2017-07-20/2017_07_20_2.png\">\n<p>选择<code>Install new OS</code>，我安装的是<code>centos-6-x86</code>，这个根据个人喜好选择。 装完好系统，我们可以看到自己VPS的服务器属性。</p>\n<img src=\"http://otqlqfy9h.bkt.clouddn.com/images/2017-07-20/2017_07_20_3.png\">\n<p>然后远程连接到服务器上。 网上有很多串口连接软件，我用的是<a href=\"http://the.earth.li/~sgtatham/putty/latest/x86/putty.exe\" target=\"_blank\" rel=\"external\">Putty</a>。 打开后，输入服务器的IP地址和端口号。</p>\n<img src=\"http://otqlqfy9h.bkt.clouddn.com/images/2017-07-20/2017_07_20_4.png\">\n<p>登录成功后，进入熟悉的命令行模式，至此VPS的购买就全部搞定啦！</p>\n<h3 id=\"域名注册\"><a href=\"#域名注册\" class=\"headerlink\" title=\"域名注册\"></a>域名注册</h3><hr>\n<p>对于网站的访问，我们可以通过IP地址直接访问，也可以通过域名来访问。 相比之下，域名更便于记忆。 当然为了此步骤更多是为了显得更专（zhuang）业（bi）。 具体步骤如下：<br>域名注册网站：</p>\n<ul>\n<li><strong>TK</strong></li>\n<li><strong>Namecheap</strong></li>\n</ul>\n<p>Tk域名，网络上最容易申请到的免费域名之一，以TK结尾，与COM、NET、CN一样同属顶级域名。 因为是免费域名，很多人用来做垃圾网站，听说百度一般不会收录。 汗！<br>经过网上的一番对比，最终还是选择了在Namecheap上注册域名。 购买好域名后，要配置下域名和我们的服务器IP地址的映射关系。 配置好后，可能需要等十来分钟后，才可以被DNS服务器正常解析。</p>\n<img src=\"http://otqlqfy9h.bkt.clouddn.com/images/2017-07-20/2017_07_20_6.png\">\n<p>关于NameCheap的映射关系配置，请参考链接: <a href=\"http://xianhuo.org/namecheap-yumingjiexijiaocheng2016.html\" target=\"_blank\" rel=\"external\">namecheap域名解析教程2017</a><br>OK，恭喜你，前期工作准备完了！ 开罐可乐庆祝一下!  <strong>:)</strong></p>\n<h2 id=\"二、Hexo环境安装\"><a href=\"#二、Hexo环境安装\" class=\"headerlink\" title=\"二、Hexo环境安装\"></a>二、Hexo环境安装</h2><h2 id=\"本机Windows部署\"><a href=\"#本机Windows部署\" class=\"headerlink\" title=\"(本机Windows部署)\"></a><strong>(本机Windows部署)</strong></h2><p>当初也有很多博客框架的选择摆在我面前,但是我没有犹豫选择了<a href=\"https://hexo.io/zh-cn/index.html\" target=\"_blank\" rel=\"external\">Hexo</a>。主要就是看中它的迅速快，号称使用<code>Node.js</code>让上百个页面在几秒内瞬间完成渲染；同时最关键的原因在于只需要一条命令就可以完成一键部署。 终极原因是因为懒 ～<br>Hexo的官网上东西已经比较全了，大家动手前，可以先浏览一下官网，讲的还是很详细的关于建站这块。<br>闲话不多说，让我们撸起袖子，荡起双桨，二话不说开始干。</p>\n<h3 id=\"基本思路\"><a href=\"#基本思路\" class=\"headerlink\" title=\"基本思路\"></a>基本思路</h3><hr>\n<p>在本地生成静态文件，把静态文件部署到VPS上，用Nginx直接做Web服务，由于hexo支持git的部署方式，从而可以实现从本地更新博客，方便快捷。</p>\n<h3 id=\"安装Node-js\"><a href=\"#安装Node-js\" class=\"headerlink\" title=\"安装Node.js\"></a>安装Node.js</h3><hr>\n<p>在<a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"external\">Node.js</a>官网下载最新版，一路默认安装。</p>\n<h3 id=\"安装Git\"><a href=\"#安装Git\" class=\"headerlink\" title=\"安装Git\"></a>安装Git</h3><hr>\n<p>下载<a href=\"https://git-scm.com/download/win\" target=\"_blank\" rel=\"external\">Git for windows</a>一路默认next点下去。<br>Git这里我们需要注意一下，需要配置一下<a href=\"http://www.brafox.com/post/2015/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/git-%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE.html\" target=\"_blank\" rel=\"external\">环境变量</a>。<br>然后我们需要生成SSH密钥，按下面的步骤进行。</p>\n<ol>\n<li>打开<code>C:\\Users\\&lt;用户名&gt;\\.ssh</code>文件夹，如果没有就新建</li>\n<li>在空白处单击右键，选择<code>Git Bash Here</code>打开终端</li>\n<li>设置git用户名<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --global user.email &quot;email@example.com&quot;</div><div class=\"line\">git config --global user.name &quot;username&quot;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"生成ssh密钥\"><a href=\"#生成ssh密钥\" class=\"headerlink\" title=\"生成ssh密钥\"></a>生成ssh密钥</h3><hr>\n<p>一路回车生成公钥和密钥，一会要用到公钥<code>id_rsa.pub</code><br><code>ssh-keygen -t rsa -C &quot;email@example.com&quot;</code></p>\n<img src=\"http://otqlqfy9h.bkt.clouddn.com/images/2017-07-20/2017_07_20_5.png\">\n<h3 id=\"创建网站目录\"><a href=\"#创建网站目录\" class=\"headerlink\" title=\"创建网站目录\"></a>创建网站目录</h3><hr>\n<p>在你电脑的任意位置创建一个文件夹（例如<code>C:\\hexo</code>，下文以此代替），作为网站目录(名字可以任取)。</p>\n<h3 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h3><hr>\n<p>打开<code>cmd</code>(<strong>以管理员权限运行</strong>)，通过<code>cd</code>命令进入<code>hexo</code>文件夹，输入<code>node</code>后执行如下命令(或者压根不用)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g hexo-cli</div><div class=\"line\">hexo init</div><div class=\"line\">npm install</div><div class=\"line\">hexo d -fg</div></pre></td></tr></table></figure></p>\n<p>运行完上述命令后,可以在<code>C:\\hexo</code>文件夹下看到有以下的文件目录生成。 你可以看见hexo文件夹下有一个<code>themes</code>文件夹，这是可以自定义的，从而改变网站的呈现形式，<a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"external\">Hexo</a>官网也提供了一些可供选择的主题。</p>\n<img src=\"http://otqlqfy9h.bkt.clouddn.com/images/2017-07-20/2017_07_20_7.png\">\n<p>接着启动本地hexo server<br><code>hexo serve(或者hexo s)</code><br>打开<code>http://localhost:4000</code> 即可看到你的站点（当然还没有发布到网络）。 如果没有响应的话，电脑重启一下，再敲入<code>hexo serve(或者hexo s)</code><br>启动本地hexo server的命令。</p>\n<img src=\"http://otqlqfy9h.bkt.clouddn.com/images/2017-07-20/2017_07_20_8.png\">\n<p>到这里，本地的网站部署和搭建就告一段落。 可以稍微休息下，准备部署VPS了。</p>\n<h2 id=\"三、部署Hexo\"><a href=\"#三、部署Hexo\" class=\"headerlink\" title=\"三、部署Hexo\"></a>三、部署Hexo</h2><h2 id=\"VPS部署\"><a href=\"#VPS部署\" class=\"headerlink\" title=\"(VPS部署)\"></a><strong>(VPS部署)</strong></h2><p>前面已经讲解过VPS的购买和系统安装，此处为<code>Centos 6</code>在<code>root</code>下的操作，关于连接VPS，Windows 用户请使用<a href=\"http://the.earth.li/~sgtatham/putty/latest/x86/putty.exe\" target=\"_blank\" rel=\"external\">Putty</a>（提示： Putty 中使用粘贴仅需鼠标右键）。<br>关于<code>vi</code>操作，按下<code>i</code>键进入编辑模式，编辑结束后按<code>esc</code>键退出，这时按<code>：</code>，并输入 <code>wq</code> ，即可。</p>\n<h3 id=\"安装Git-1\"><a href=\"#安装Git-1\" class=\"headerlink\" title=\"安装Git\"></a>安装Git</h3><hr>\n<p>在Putty终端输入如下命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum update &amp;&amp; apt-get upgrade -y #更新内核</div><div class=\"line\">yum install git-core</div></pre></td></tr></table></figure></p>\n<h3 id=\"安装nginx\"><a href=\"#安装nginx\" class=\"headerlink\" title=\"安装nginx\"></a>安装nginx</h3><hr>\n<p>在Putty终端输入如下命令：<br><code>yum install nginx -y</code></p>\n<h3 id=\"新建git用户添加sudo权限\"><a href=\"#新建git用户添加sudo权限\" class=\"headerlink\" title=\"新建git用户添加sudo权限\"></a>新建git用户添加sudo权限</h3><hr>\n<p>在Putty终端输入如下命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">adduser git</div><div class=\"line\">chmod 740 /etc/sudoers #改变权限值用于读写</div><div class=\"line\">vim /etc/sudoers</div></pre></td></tr></table></figure></p>\n<p>在vi编辑中找到如下内容：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">## Allow root to run any commands anywhere</div><div class=\"line\">rootALL=(ALL) ALL</div></pre></td></tr></table></figure></p>\n<p>在下面添加一行<br><code>git   ALL=(ALL) ALL</code><br>保存并退出(<code>vi</code>里输入<code>:wq</code>，回车执行)后执行<br><code>chmod 440 /etc/sudoers #改回原来的权限值</code></p>\n<h3 id=\"创建git仓库，并配置ssh登录\"><a href=\"#创建git仓库，并配置ssh登录\" class=\"headerlink\" title=\"创建git仓库，并配置ssh登录\"></a>创建git仓库，并配置ssh登录</h3><hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">su git</div><div class=\"line\">cd ~</div><div class=\"line\">mkdir .ssh &amp;&amp; cd .ssh</div><div class=\"line\">touch authorized_keys</div><div class=\"line\">vi authorized_keys // 在这个文件中粘贴进刚刚Winodws下申请的key（在id_rsa.pub文件中）</div><div class=\"line\">cd ~</div><div class=\"line\">mkdir hexo.git &amp;&amp; cd hexo.git</div><div class=\"line\">git init --bare</div></pre></td></tr></table></figure>\n<p>(上文中提到<code>hexo.git或者hexo</code>都可以替换成你的网站的名字)</p>\n<img src=\"http://otqlqfy9h.bkt.clouddn.com/images/2017-07-20/2017_07_20_9.png\">\n<p>测试一下，如果在<strong>git bash</strong>中输入<code>ssh git@VPS的IP地址</code>,能够远程登录的话，则表示设置成功了。</p>\n<h3 id=\"创建网站目录并赋予git对网站目录的所有权\"><a href=\"#创建网站目录并赋予git对网站目录的所有权\" class=\"headerlink\" title=\"创建网站目录并赋予git对网站目录的所有权\"></a>创建网站目录并赋予git对网站目录的所有权</h3><hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /var/www</div><div class=\"line\">mkdir hexo</div><div class=\"line\">chown git:git -R /var/www/hexo</div></pre></td></tr></table></figure>\n<p>(上文中提到<code>hexo</code>都可以替换成你的网站的名字)</p>\n<h3 id=\"配置git-hooks\"><a href=\"#配置git-hooks\" class=\"headerlink\" title=\"配置git hooks\"></a>配置git hooks</h3><hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">su git</div><div class=\"line\">cd /home/git/hexo.git/hooks # 如果没有hooks目录,就mkdir hooks 自己建一个目录</div><div class=\"line\">vim post-receive</div></pre></td></tr></table></figure>\n<p>输入如下内容后保存退出(<code>vim下输入</code>:wq`)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/bin/bash -l</div><div class=\"line\">GIT_REPO=/home/git/hexo.git #git仓库</div><div class=\"line\">TMP_GIT_CLONE=/tmp/hexo</div><div class=\"line\">PUBLIC_WWW=/var/www/hexo #网站目录</div><div class=\"line\">rm -rf $&#123;TMP_GIT_CLONE&#125;</div><div class=\"line\">git clone $GIT_REPO $TMP_GIT_CLONE</div><div class=\"line\">rm -rf $&#123;PUBLIC_WWW&#125;/*</div><div class=\"line\">cp -rf $&#123;TMP_GIT_CLONE&#125;/* $&#123;PUBLIC_WWW&#125;</div></pre></td></tr></table></figure>\n<p>(上文中提到<code>hexo.git或者hexo</code>都可以替换成你的网站的名字)<br>原理就是从<code>GIT_REPO</code>仓库中把文件拷贝到<code>PUBLIC_WWW</code>目录下发布，中间有个<code>TMP_GIT_CLONE</code>用于保存文件。<br>然后赋予脚本的执行权限 <code>chmod +x post-receive</code><br>同时把上述的三个路径都用<code>chown git:git -R /路径</code>更改了owner</p>\n<h3 id=\"配置Nginx\"><a href=\"#配置Nginx\" class=\"headerlink\" title=\"配置Nginx\"></a>配置Nginx</h3><hr>\n<p><code>vim /etc/nginx/conf.d/hexo.conf</code><br>插入如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">    listen         80 ;</div><div class=\"line\">    root /var/www/hexo;//这里可以改成你的网站目录地址，我将网站放在/var/www/hexo</div><div class=\"line\">    server_name example.com www.example.com;//这里输入你的域名或IP地址</div><div class=\"line\">    access_log  /var/log/nginx/hexo_access.log;//这里的log文件也可以根据自己网站名字替换</div><div class=\"line\">    error_log   /var/log/nginx/hexo_error.log;//这里的log文件也可以根据自己网站名字替换</div><div class=\"line\">    location ~* ^.+\\.(ico|gif|jpg|jpeg|png)$ &#123;</div><div class=\"line\">            root /var/www/hexo;//网站目录地址</div><div class=\"line\">            access_log   off;</div><div class=\"line\">            expires      1d;</div><div class=\"line\">    &#125;</div><div class=\"line\">    location ~* ^.+\\.(css|js|txt|xml|swf|wav)$ &#123;</div><div class=\"line\">        root /var/www/hexo;//网站目录地址</div><div class=\"line\">        access_log   off;</div><div class=\"line\">        expires      10m;</div><div class=\"line\">    &#125;</div><div class=\"line\">    location / &#123;</div><div class=\"line\">        root /var/www/hexo;//网站目录地址</div><div class=\"line\">        if (-f $request_filename) &#123;</div><div class=\"line\">            rewrite ^/(.*)$  /$1 break;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>重启Nginx<br><code>service nginx restart</code><br>(如果上述操作git用户搞不定，就切换到root用户<code>su root</code>)</p>\n<h3 id=\"配置hexo配置文件\"><a href=\"#配置hexo配置文件\" class=\"headerlink\" title=\"配置hexo配置文件\"></a>配置hexo配置文件</h3><hr>\n<p>位于<code>hexo</code>文件夹下，<code>_config.yml</code>,修改<code>deploy</code>选项，改成如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">- type: git</div><div class=\"line\">  repo: ssh://git@VPS的IP地址:/home/git/hexo.git#VPS上对应的git仓库(包含git hooks的地址)</div><div class=\"line\">  branch: master</div><div class=\"line\">- type: git</div><div class=\"line\">  repo: ssh://git@github.com/hexo.git#github上对应的保存静态文件的仓库</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure></p>\n<p>接着在hexo文件夹内，按住<code>shift右击</code>，选择在此处打开命令窗口（当然你也可以用cd命令），运行<code>hexo g &amp;&amp; hexo d</code>，如果一切正常，静态文件已经被成功的push到了blog的仓库里，如果出现<code>appears not to be a git repo</code>的错误，删除hexo目录下的<code>.deploy</code>后再次<code>hexo g &amp;&amp; hexo d</code>就可以了。<br>到这里，博客已经完全建好了。</p>\n<h3 id=\"更新博客\"><a href=\"#更新博客\" class=\"headerlink\" title=\"更新博客\"></a>更新博客</h3><hr>\n<p>使用一款 MarkDown 编辑器写 Blog 。写完后将文件以 <code>*.md</code>的格式保存在本地<code>[网站目录]\\source\\_posts</code>中。文件编码必须为 <strong><code>UTF-8</code></strong>，这一点仅 Windows 用户需注意。<br>编写完后，只需要在hexo文件夹下执行<code>hexo g &amp;&amp; hexo d</code>，博客即可更新。</p>\n<h3 id=\"备份\"><a href=\"#备份\" class=\"headerlink\" title=\"备份\"></a>备份</h3><hr>\n<p>由于上面hexo文件夹下执行<code>hexo g &amp;&amp; hexo d</code>执行之后, 会更新github上你的网站目录的信息, 但是markdown文件并没有保存, 保存的是转换成静态文件<code>html</code>, 所以还是需要保存下你的原文件。因此在github上建了一个仓库专门保存博客的原文件。这样更新完博客以后，只要上传一下原文件就可以高枕无忧了。  <strong>:)</strong></p>\n<h2 id=\"四、安装中遇到问题\"><a href=\"#四、安装中遇到问题\" class=\"headerlink\" title=\"四、安装中遇到问题\"></a>四、安装中遇到问题</h2><hr>\n<ul>\n<li><p>上传操作<code>hexo d</code>报错<code>spawn git ENOENT</code>，添加<a href=\"http://www.brafox.com/post/2015/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/git-%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE.html\" target=\"_blank\" rel=\"external\">Git环境变量</a>后可以了</p>\n</li>\n<li><p><code>hexo g</code> 报错，安装<code>hexo-delopyer-git</code>后解决。</p>\n</li>\n<li><p><code>hexo d</code> 提交到VPS网站目录里的文件并不是单独的public文件夹，检查hexo文件夹发现存在<code>.git</code>这个目录，删除<code>.git</code>文件夹即可（他是隐藏的哦）。</p>\n</li>\n<li><p><code>ssh git@ip</code>，被拒绝，是远程端口默认为<code>22</code>端口，而不是我VPS的<code>ssh</code>真正端口。<br>解决方法：在<code>.ssh</code>文件夹下（也就是生成公钥的文件夹）创建<code>config</code>文件，输入如下内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Host // VPS的IP</div><div class=\"line\">HostName // VPS的IP</div><div class=\"line\">User git</div><div class=\"line\">Port // SSH端口</div><div class=\"line\">IdentityFile ~/.ssh/id_rsa</div></pre></td></tr></table></figure>\n  <img src=\"http://otqlqfy9h.bkt.clouddn.com/images/2017-07-20/2017_07_20_10.png\">\n</li>\n<li><p><code>ssh -T git@github.com</code>是否连接上<code>github</code><br><code>git config --list</code> 查看<code>git config</code>配置</p>\n</li>\n<li><p>ngix正常配置后，执行 <code>yum install nginx -y</code>。 如果失败，可能是源没有配置，在<code>/etc/yum.repos.d</code>目录下创建一个源配置文件`nginx.repo, 写入如下代码，然后再执行一次。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">[nginx]</div><div class=\"line\">name=nginx repo</div><div class=\"line\">baseurl=http://nginx.org/packages/centos/$releasever/$basearch/</div><div class=\"line\">gpgcheck=0</div><div class=\"line\">enabled=1</div><div class=\"line\"></div><div class=\"line\">最后查看版本号，验证完成 `nginx -v`</div></pre></td></tr></table></figure>\n  <img src=\"http://otqlqfy9h.bkt.clouddn.com/images/2017-07-20/2017_07_20_11.png\">\n</li>\n<li><p>用<code>yum install git</code>安装<code>Git</code>出现问题：<code>/bin/bash: git: command not found</code><br>解决（修改安装命令为）：<code>yum install git git-svn git-email git-gui gitk -y</code></p>\n</li>\n<li><p>ssh配置后，ssh连接验证：<code>ssh: connect to host localhost port 22: Connection refused</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">错误原因：</div><div class=\"line\">sshd 未安装：yum install openssh-server</div><div class=\"line\">sshd 未启动：chkconfig sshd on</div><div class=\"line\">防火墙：chkconfig iptables off(永久性生效，重启后不会复原)</div><div class=\"line\">端口号没有设置为22(或者设置后没有重启：service sshd restart)</div></pre></td></tr></table></figure>\n</li>\n<li><p>使用<code>hero d</code>报错：<code>ERROR Deployer not found: git</code><br>解决：记得一定要在 blog 目录里 执行 <code>npm install hexo-deployer-git --save</code></p>\n<img src=\"http://otqlqfy9h.bkt.clouddn.com/images/2017-07-20/2017_07_20_12.png\">\n</li>\n<li><p>查看<code>node</code>和<code>npm</code>版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">node --version</div><div class=\"line\">npm --version</div></pre></td></tr></table></figure>\n</li>\n<li><p>warning: LF will be replaced by CRLF | fatal: CRLF would be replaced by LF<br>解决办法：<a href=\"http://blog.csdn.net/feng88724/article/details/11600375\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/feng88724/article/details/11600375</a><br>遇到这两个错误，是因为Git的换行符检查功能<br>对于出现一些conflic，可以reset一些，再重新更新</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git reset --hard FETCH_HEAD</div><div class=\"line\">git pull origin master</div></pre></td></tr></table></figure>\n</li>\n<li><p>hexo安装成功，并且正确运行，但是localhost:4000不能访问<br>解决办法：<a href=\"https://yq.aliyun.com/articles/58027\" target=\"_blank\" rel=\"external\">https://yq.aliyun.com/articles/58027</a><br>遇到这个问题，是因为4000端口被占用了。如果你的电脑上不幸装了福昕阅读，恭喜你！它就是罪魁祸首….<br>胳膊拧不过大腿，对于这种流氓软件，我们别无他法，只能换端口。 :(</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">启动hexo s 的时候，用这个命令，换一个端口。</div><div class=\"line\">hexo s -p 3600 // 随便指定一个端口号就好</div></pre></td></tr></table></figure>\n</li>\n<li><p>添加多个key到git<br>Step1 添加到github账号： 打开<code>C:\\Users\\&lt;用户名&gt;\\.ssh</code>文件夹，拷贝<code>id_rsa.pub</code>里的内容，在Github账号<code>Settings-&gt;SSH and GPG keys-&gt;New SSH key</code><br>Step2 <a href=\"https://askubuntu.com/questions/46424/adding-ssh-keys-to-authorized-keys\" target=\"_blank\" rel=\"external\">添加到VPS</a>： 在<code>C:\\Users\\&lt;用户名&gt;\\.ssh</code>文件夹下打开<code>Git Bash Here</code>, 执行<code>ssh-copy-id git@vps的IP</code></p>\n</li>\n<li><p>运行<code>hexo g &amp;&amp; hexo d</code>后没有触发<strong>git hooks</strong>解决方案<br>说实话这个问题困扰了我三四天了，之前都是<code>hexo g &amp;&amp; hexo d</code>之后，跑到VPS下的发布目录（<code>www/hexo/</code>）去手动download github上的<code>hexo.git</code>仓库完成发布的。<br>确实不爽，于是翻了好几条网页，终于解决了。方法如下：</p>\n</li>\n</ul>\n<ol>\n<li>检查你的本地public key有没有add 到github账号，并且<code>/home/git/.ssh/authorized_keys</code>里面已经加入了之前Winodws下申请的key</li>\n<li><p>hexo文件夹下，<code>_config.yml</code>的配置语句正确如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">- type: git</div><div class=\"line\">  repo: ssh://git@VPS的IP地址:/home/git/hexo.git#VPS上对应的git仓库(包含git hooks的地址)</div><div class=\"line\">  branch: master</div><div class=\"line\">- type: git</div><div class=\"line\">  repo: ssh://git@github.com/hexo.git#github上对应的保存静态文件的仓库</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure>\n</li>\n<li><p>千万记得在本地博客路径<code>C:\\hexo\\</code>下一定要用<code>**Git Bash Here**</code>执行命令，而不是<strong>Windows的命令行窗口</strong>，否则会一直报“Permission denied, please try again.”</p>\n<img src=\"http://otqlqfy9h.bkt.clouddn.com/images/2017-07-20/2017_07_20_13.png\">\n<p>运行<code>ssh -T git@github.com</code>，是否能正常访问github<br>运行<code>hexo g &amp;&amp; hexo d</code>，部署并提交代码到github，同时触发git hooks完成发布<br>过程中会弹出一个OpenSSH的对话框要你输入git的密码，输入完毕，点击ok。搞定！</p>\n</li>\n</ol>\n<ul>\n<li><p>本地博客路径<code>C:\\hexo\\</code>下有个<code>.gitignore</code> 文件，主要用于<code>git status</code>忽略一些列出的文件，但是筒子们有木有发现改了该文件之后，其实并没有作用。<br>百思不得其解之后，搜到<a href=\"https://stackoverflow.com/questions/25436312/gitignore-not-working\" target=\"_blank\" rel=\"external\">某攻略</a>才豁然开朗：只改文件你列出的文件或目录在仓库中，需要执行以下命令手动移除。提交一版之后，整个世界就清净了 <strong>:)</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">git rm -rf --cached .</div><div class=\"line\">git add .</div><div class=\"line\">git commit -m &quot;xxxxx&quot;</div><div class=\"line\">git push origin master</div></pre></td></tr></table></figure>\n</li>\n<li><p>为 Next 主题文末添加版权等信息<br>看到别人博客里的版权信息，觉得有点意思，找了很多教程，效果都不是自己想要的。只能借用下<a href=\"http://notes.iissnan.com/2015/something-about-next/\" target=\"_blank\" rel=\"external\">Next作者的格式和样式</a>。<br><strong>建立基础的HTML代码</strong><br>定位到本地博客文件夹下的<code>themes\\next\\layout\\_macro\\post.swig</code>文件，这个和于<code>layout</code>下的<code>post.swig</code>的区别是前者扶着具体的<code>post-content</code>的生成，而后者是调用前者。<br>然后补充类似comment第三方的模块的脚本。找到post-body所在的标签，并在其后加上如下代码：然后补充类似comment第三方的模块的脚本。找到post-body所在的标签，并在其后加上如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div&gt;</div><div class=\"line\"> &#123;# 表示如果不在索引列表中加入后续的HTML代码 #&#125;</div><div class=\"line\"> &#123;% if not is_index %&#125;</div><div class=\"line\">\t&lt;ul class=&quot;post-copyright&quot;&gt;</div><div class=\"line\">\t  &lt;li class=&quot;post-copyright-author&quot;&gt;</div><div class=\"line\">\t\t  &lt;strong&gt;本文作者：&lt;/strong&gt;&#123;&#123; theme.author &#125;&#125;</div><div class=\"line\">\t  &lt;/li&gt;</div><div class=\"line\">\t  &lt;li class=&quot;post-copyright-link&quot;&gt;</div><div class=\"line\">\t\t&lt;strong&gt;本文链接：&lt;/strong&gt;</div><div class=\"line\">\t\t&lt;a href=&quot;&#123;&#123; url_for(page.path) &#125;&#125;&quot; title=&quot;&#123;&#123; page.title &#125;&#125;&quot;&gt;&#123;&#123; page.permalink &#125;&#125;&lt;/a&gt;</div><div class=\"line\">\t  &lt;/li&gt;</div><div class=\"line\">\t  &lt;li class=&quot;post-copyright-license&quot;&gt;</div><div class=\"line\">\t\t&lt;strong&gt;版权声明： &lt;/strong&gt;</div><div class=\"line\">\t\t本博客所有文章除特别声明外，均采用 &lt;a href=&quot;http://creativecommons.org/licenses/by-nc-sa/3.0/cn/&quot; rel=&quot;external nofollow&quot; target=&quot;_blank&quot;&gt;CC BY-NC-SA 3.0 CN&lt;/a&gt; 许可协议。转载请注明出处！</div><div class=\"line\">\t  &lt;/li&gt;</div><div class=\"line\">\t&lt;/ul&gt;</div><div class=\"line\"> &#123;% endif %&#125;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>  <strong>增添样式</strong><br>  定位Next下的<code>source/css/_custom/custom.styl</code>,并在里面添加如下样式代码:</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">.post-copyright &#123;</div><div class=\"line\">\tmargin: 2em 0 0;</div><div class=\"line\">\tpadding: 0.5em 1em;</div><div class=\"line\">\tborder-left: 3px solid #ff1700;</div><div class=\"line\">\tbackground-color: #f9f9f9;</div><div class=\"line\">\tlist-style: none;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"五、后记\"><a href=\"#五、后记\" class=\"headerlink\" title=\"五、后记\"></a>五、后记</h2><hr>\n<p>以下是自己搭建过程中查找的相关链接和信息，希望对大家有帮助。</p>\n<ol>\n<li><a href=\"https://dynamicer.com/how-to-deploy-hexo-blogs-with-git-hooks-on-vps/\" target=\"_blank\" rel=\"external\">https://dynamicer.com/how-to-deploy-hexo-blogs-with-git-hooks-on-vps/</a></li>\n<li><a href=\"http://tiktoking.github.io/2016/01/26/hexo/\" target=\"_blank\" rel=\"external\">http://tiktoking.github.io/2016/01/26/hexo/</a></li>\n<li><a href=\"http://blog.csdn.net/hanhailong726188/article/details/46738929\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/hanhailong726188/article/details/46738929</a></li>\n<li><a href=\"http://blog.ynxiu.com/2016/hexo-next-theme-optimize.html\" target=\"_blank\" rel=\"external\">http://blog.ynxiu.com/2016/hexo-next-theme-optimize.html</a></li>\n<li><a href=\"https://arcecho.github.io/2017/04/08/Hexo-Next%E4%B8%8B%E6%B7%BB%E5%8A%A0%E7%89%88%E6%9D%83%E5%A3%B0%E6%98%8E%E6%A8%A1%E5%9D%97/\" target=\"_blank\" rel=\"external\">https://arcecho.github.io/2017/04/08/Hexo-Next%E4%B8%8B%E6%B7%BB%E5%8A%A0%E7%89%88%E6%9D%83%E5%A3%B0%E6%98%8E%E6%A8%A1%E5%9D%97/</a></li>\n</ol>\n<h2 id=\"六、编辑工具\"><a href=\"#六、编辑工具\" class=\"headerlink\" title=\"六、编辑工具\"></a>六、编辑工具</h2><hr>\n<p>因为Hexo是支持Markdown的文件，而Markdown是一种极简的『标记语言』，将文本转为<code>HTML</code>，通常为我大码农所用。 简介好使是关键！以下为一些相关链接，希望对大家有帮助。</p>\n<p>Markdown语法</p>\n<ol>\n<li><a href=\"http://ibruce.info/2013/11/26/markdown/\" target=\"_blank\" rel=\"external\">http://ibruce.info/2013/11/26/markdown/</a></li>\n<li><a href=\"https://maxiang.io/\" target=\"_blank\" rel=\"external\">https://maxiang.io/</a></li>\n</ol>\n<p>Markdown编辑器</p>\n<ol>\n<li><a href=\"http://www.csdn.net/article/2014-05-05/2819623\" target=\"_blank\" rel=\"external\">http://www.csdn.net/article/2014-05-05/2819623</a></li>\n<li><a href=\"https://maxiang.io/\" target=\"_blank\" rel=\"external\">https://maxiang.io/</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>很早之前就计划搭建一个博客，但由于各方面原因（最主要还是懒），一直耽误着。终于几个月前看到同事在弄，自己也开始折腾起来。 一路跌跌撞撞，也算初步搞定。特此把中间踩过的坑记录下来，也算对后来的道友有个交代。</p>\n<h2 id=\"一、前期准备\"><a href=\"#一、前期准备\" class=\"headerlink\" title=\"一、前期准备\"></a>一、前期准备</h2><h3 id=\"服务器购买\"><a href=\"#服务器购买\" class=\"headerlink\" title=\"服务器购买\"></a>服务器购买</h3><hr>\n<p>我是用的是VPS（虚拟专用服务器）作为网站的服务器，选择了口碑较好的搬瓦工VPS，因为其价格便宜，稳定性强，并且还支持支付宝付款。<br>关键的关键是VPS上安装了Shadowsocks以后就可以无忧访问外网了，比隔天就被封杀的VPN靠谱多了。 <strong>:)</strong></p>\n<p><a href=\"http://banwagong.cn\" target=\"_blank\" rel=\"external\">搬瓦工官网</a><br>注册完后，在Home页面有很多产品供我们选择，我之前选择的是最便宜的那款，2.99美刀一个月，如果觉得性能有瓶颈，可以考虑换个买4.99美刀一个月的，性能提升了一倍(毕竟2.99美刀的内存才256M)。<br>每个直达方案通道里面，有具体方案的细节，筒子们可以自己研究下再做决定。</p>\n<img src=\"http://otqlqfy9h.bkt.clouddn.com/images/2017-07-20/2017_07_20_1.png\">\n<p>购买完成后，选择<code>VPS Hosting-&gt;Services-&gt;My Services</code>。<br>然后可以看到已经购买的VPS。 服务器有了，下面当然就是给你的服务器安装操作系统。 点击KiwiVM Control Panel</p>\n<img src=\"http://otqlqfy9h.bkt.clouddn.com/images/2017-07-20/2017_07_20_2.png\">\n<p>选择<code>Install new OS</code>，我安装的是<code>centos-6-x86</code>，这个根据个人喜好选择。 装完好系统，我们可以看到自己VPS的服务器属性。</p>\n<img src=\"http://otqlqfy9h.bkt.clouddn.com/images/2017-07-20/2017_07_20_3.png\">\n<p>然后远程连接到服务器上。 网上有很多串口连接软件，我用的是<a href=\"http://the.earth.li/~sgtatham/putty/latest/x86/putty.exe\" target=\"_blank\" rel=\"external\">Putty</a>。 打开后，输入服务器的IP地址和端口号。</p>\n<img src=\"http://otqlqfy9h.bkt.clouddn.com/images/2017-07-20/2017_07_20_4.png\">\n<p>登录成功后，进入熟悉的命令行模式，至此VPS的购买就全部搞定啦！</p>\n<h3 id=\"域名注册\"><a href=\"#域名注册\" class=\"headerlink\" title=\"域名注册\"></a>域名注册</h3><hr>\n<p>对于网站的访问，我们可以通过IP地址直接访问，也可以通过域名来访问。 相比之下，域名更便于记忆。 当然为了此步骤更多是为了显得更专（zhuang）业（bi）。 具体步骤如下：<br>域名注册网站：</p>\n<ul>\n<li><strong>TK</strong></li>\n<li><strong>Namecheap</strong></li>\n</ul>\n<p>Tk域名，网络上最容易申请到的免费域名之一，以TK结尾，与COM、NET、CN一样同属顶级域名。 因为是免费域名，很多人用来做垃圾网站，听说百度一般不会收录。 汗！<br>经过网上的一番对比，最终还是选择了在Namecheap上注册域名。 购买好域名后，要配置下域名和我们的服务器IP地址的映射关系。 配置好后，可能需要等十来分钟后，才可以被DNS服务器正常解析。</p>\n<img src=\"http://otqlqfy9h.bkt.clouddn.com/images/2017-07-20/2017_07_20_6.png\">\n<p>关于NameCheap的映射关系配置，请参考链接: <a href=\"http://xianhuo.org/namecheap-yumingjiexijiaocheng2016.html\" target=\"_blank\" rel=\"external\">namecheap域名解析教程2017</a><br>OK，恭喜你，前期工作准备完了！ 开罐可乐庆祝一下!  <strong>:)</strong></p>\n<h2 id=\"二、Hexo环境安装\"><a href=\"#二、Hexo环境安装\" class=\"headerlink\" title=\"二、Hexo环境安装\"></a>二、Hexo环境安装</h2><h2 id=\"本机Windows部署\"><a href=\"#本机Windows部署\" class=\"headerlink\" title=\"(本机Windows部署)\"></a><strong>(本机Windows部署)</strong></h2><p>当初也有很多博客框架的选择摆在我面前,但是我没有犹豫选择了<a href=\"https://hexo.io/zh-cn/index.html\" target=\"_blank\" rel=\"external\">Hexo</a>。主要就是看中它的迅速快，号称使用<code>Node.js</code>让上百个页面在几秒内瞬间完成渲染；同时最关键的原因在于只需要一条命令就可以完成一键部署。 终极原因是因为懒 ～<br>Hexo的官网上东西已经比较全了，大家动手前，可以先浏览一下官网，讲的还是很详细的关于建站这块。<br>闲话不多说，让我们撸起袖子，荡起双桨，二话不说开始干。</p>\n<h3 id=\"基本思路\"><a href=\"#基本思路\" class=\"headerlink\" title=\"基本思路\"></a>基本思路</h3><hr>\n<p>在本地生成静态文件，把静态文件部署到VPS上，用Nginx直接做Web服务，由于hexo支持git的部署方式，从而可以实现从本地更新博客，方便快捷。</p>\n<h3 id=\"安装Node-js\"><a href=\"#安装Node-js\" class=\"headerlink\" title=\"安装Node.js\"></a>安装Node.js</h3><hr>\n<p>在<a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"external\">Node.js</a>官网下载最新版，一路默认安装。</p>\n<h3 id=\"安装Git\"><a href=\"#安装Git\" class=\"headerlink\" title=\"安装Git\"></a>安装Git</h3><hr>\n<p>下载<a href=\"https://git-scm.com/download/win\" target=\"_blank\" rel=\"external\">Git for windows</a>一路默认next点下去。<br>Git这里我们需要注意一下，需要配置一下<a href=\"http://www.brafox.com/post/2015/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/git-%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE.html\" target=\"_blank\" rel=\"external\">环境变量</a>。<br>然后我们需要生成SSH密钥，按下面的步骤进行。</p>\n<ol>\n<li>打开<code>C:\\Users\\&lt;用户名&gt;\\.ssh</code>文件夹，如果没有就新建</li>\n<li>在空白处单击右键，选择<code>Git Bash Here</code>打开终端</li>\n<li>设置git用户名<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --global user.email &quot;email@example.com&quot;</div><div class=\"line\">git config --global user.name &quot;username&quot;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"生成ssh密钥\"><a href=\"#生成ssh密钥\" class=\"headerlink\" title=\"生成ssh密钥\"></a>生成ssh密钥</h3><hr>\n<p>一路回车生成公钥和密钥，一会要用到公钥<code>id_rsa.pub</code><br><code>ssh-keygen -t rsa -C &quot;email@example.com&quot;</code></p>\n<img src=\"http://otqlqfy9h.bkt.clouddn.com/images/2017-07-20/2017_07_20_5.png\">\n<h3 id=\"创建网站目录\"><a href=\"#创建网站目录\" class=\"headerlink\" title=\"创建网站目录\"></a>创建网站目录</h3><hr>\n<p>在你电脑的任意位置创建一个文件夹（例如<code>C:\\hexo</code>，下文以此代替），作为网站目录(名字可以任取)。</p>\n<h3 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h3><hr>\n<p>打开<code>cmd</code>(<strong>以管理员权限运行</strong>)，通过<code>cd</code>命令进入<code>hexo</code>文件夹，输入<code>node</code>后执行如下命令(或者压根不用)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g hexo-cli</div><div class=\"line\">hexo init</div><div class=\"line\">npm install</div><div class=\"line\">hexo d -fg</div></pre></td></tr></table></figure></p>\n<p>运行完上述命令后,可以在<code>C:\\hexo</code>文件夹下看到有以下的文件目录生成。 你可以看见hexo文件夹下有一个<code>themes</code>文件夹，这是可以自定义的，从而改变网站的呈现形式，<a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"external\">Hexo</a>官网也提供了一些可供选择的主题。</p>\n<img src=\"http://otqlqfy9h.bkt.clouddn.com/images/2017-07-20/2017_07_20_7.png\">\n<p>接着启动本地hexo server<br><code>hexo serve(或者hexo s)</code><br>打开<code>http://localhost:4000</code> 即可看到你的站点（当然还没有发布到网络）。 如果没有响应的话，电脑重启一下，再敲入<code>hexo serve(或者hexo s)</code><br>启动本地hexo server的命令。</p>\n<img src=\"http://otqlqfy9h.bkt.clouddn.com/images/2017-07-20/2017_07_20_8.png\">\n<p>到这里，本地的网站部署和搭建就告一段落。 可以稍微休息下，准备部署VPS了。</p>\n<h2 id=\"三、部署Hexo\"><a href=\"#三、部署Hexo\" class=\"headerlink\" title=\"三、部署Hexo\"></a>三、部署Hexo</h2><h2 id=\"VPS部署\"><a href=\"#VPS部署\" class=\"headerlink\" title=\"(VPS部署)\"></a><strong>(VPS部署)</strong></h2><p>前面已经讲解过VPS的购买和系统安装，此处为<code>Centos 6</code>在<code>root</code>下的操作，关于连接VPS，Windows 用户请使用<a href=\"http://the.earth.li/~sgtatham/putty/latest/x86/putty.exe\" target=\"_blank\" rel=\"external\">Putty</a>（提示： Putty 中使用粘贴仅需鼠标右键）。<br>关于<code>vi</code>操作，按下<code>i</code>键进入编辑模式，编辑结束后按<code>esc</code>键退出，这时按<code>：</code>，并输入 <code>wq</code> ，即可。</p>\n<h3 id=\"安装Git-1\"><a href=\"#安装Git-1\" class=\"headerlink\" title=\"安装Git\"></a>安装Git</h3><hr>\n<p>在Putty终端输入如下命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum update &amp;&amp; apt-get upgrade -y #更新内核</div><div class=\"line\">yum install git-core</div></pre></td></tr></table></figure></p>\n<h3 id=\"安装nginx\"><a href=\"#安装nginx\" class=\"headerlink\" title=\"安装nginx\"></a>安装nginx</h3><hr>\n<p>在Putty终端输入如下命令：<br><code>yum install nginx -y</code></p>\n<h3 id=\"新建git用户添加sudo权限\"><a href=\"#新建git用户添加sudo权限\" class=\"headerlink\" title=\"新建git用户添加sudo权限\"></a>新建git用户添加sudo权限</h3><hr>\n<p>在Putty终端输入如下命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">adduser git</div><div class=\"line\">chmod 740 /etc/sudoers #改变权限值用于读写</div><div class=\"line\">vim /etc/sudoers</div></pre></td></tr></table></figure></p>\n<p>在vi编辑中找到如下内容：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">## Allow root to run any commands anywhere</div><div class=\"line\">rootALL=(ALL) ALL</div></pre></td></tr></table></figure></p>\n<p>在下面添加一行<br><code>git   ALL=(ALL) ALL</code><br>保存并退出(<code>vi</code>里输入<code>:wq</code>，回车执行)后执行<br><code>chmod 440 /etc/sudoers #改回原来的权限值</code></p>\n<h3 id=\"创建git仓库，并配置ssh登录\"><a href=\"#创建git仓库，并配置ssh登录\" class=\"headerlink\" title=\"创建git仓库，并配置ssh登录\"></a>创建git仓库，并配置ssh登录</h3><hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">su git</div><div class=\"line\">cd ~</div><div class=\"line\">mkdir .ssh &amp;&amp; cd .ssh</div><div class=\"line\">touch authorized_keys</div><div class=\"line\">vi authorized_keys // 在这个文件中粘贴进刚刚Winodws下申请的key（在id_rsa.pub文件中）</div><div class=\"line\">cd ~</div><div class=\"line\">mkdir hexo.git &amp;&amp; cd hexo.git</div><div class=\"line\">git init --bare</div></pre></td></tr></table></figure>\n<p>(上文中提到<code>hexo.git或者hexo</code>都可以替换成你的网站的名字)</p>\n<img src=\"http://otqlqfy9h.bkt.clouddn.com/images/2017-07-20/2017_07_20_9.png\">\n<p>测试一下，如果在<strong>git bash</strong>中输入<code>ssh git@VPS的IP地址</code>,能够远程登录的话，则表示设置成功了。</p>\n<h3 id=\"创建网站目录并赋予git对网站目录的所有权\"><a href=\"#创建网站目录并赋予git对网站目录的所有权\" class=\"headerlink\" title=\"创建网站目录并赋予git对网站目录的所有权\"></a>创建网站目录并赋予git对网站目录的所有权</h3><hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /var/www</div><div class=\"line\">mkdir hexo</div><div class=\"line\">chown git:git -R /var/www/hexo</div></pre></td></tr></table></figure>\n<p>(上文中提到<code>hexo</code>都可以替换成你的网站的名字)</p>\n<h3 id=\"配置git-hooks\"><a href=\"#配置git-hooks\" class=\"headerlink\" title=\"配置git hooks\"></a>配置git hooks</h3><hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">su git</div><div class=\"line\">cd /home/git/hexo.git/hooks # 如果没有hooks目录,就mkdir hooks 自己建一个目录</div><div class=\"line\">vim post-receive</div></pre></td></tr></table></figure>\n<p>输入如下内容后保存退出(<code>vim下输入</code>:wq`)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/bin/bash -l</div><div class=\"line\">GIT_REPO=/home/git/hexo.git #git仓库</div><div class=\"line\">TMP_GIT_CLONE=/tmp/hexo</div><div class=\"line\">PUBLIC_WWW=/var/www/hexo #网站目录</div><div class=\"line\">rm -rf $&#123;TMP_GIT_CLONE&#125;</div><div class=\"line\">git clone $GIT_REPO $TMP_GIT_CLONE</div><div class=\"line\">rm -rf $&#123;PUBLIC_WWW&#125;/*</div><div class=\"line\">cp -rf $&#123;TMP_GIT_CLONE&#125;/* $&#123;PUBLIC_WWW&#125;</div></pre></td></tr></table></figure>\n<p>(上文中提到<code>hexo.git或者hexo</code>都可以替换成你的网站的名字)<br>原理就是从<code>GIT_REPO</code>仓库中把文件拷贝到<code>PUBLIC_WWW</code>目录下发布，中间有个<code>TMP_GIT_CLONE</code>用于保存文件。<br>然后赋予脚本的执行权限 <code>chmod +x post-receive</code><br>同时把上述的三个路径都用<code>chown git:git -R /路径</code>更改了owner</p>\n<h3 id=\"配置Nginx\"><a href=\"#配置Nginx\" class=\"headerlink\" title=\"配置Nginx\"></a>配置Nginx</h3><hr>\n<p><code>vim /etc/nginx/conf.d/hexo.conf</code><br>插入如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">    listen         80 ;</div><div class=\"line\">    root /var/www/hexo;//这里可以改成你的网站目录地址，我将网站放在/var/www/hexo</div><div class=\"line\">    server_name example.com www.example.com;//这里输入你的域名或IP地址</div><div class=\"line\">    access_log  /var/log/nginx/hexo_access.log;//这里的log文件也可以根据自己网站名字替换</div><div class=\"line\">    error_log   /var/log/nginx/hexo_error.log;//这里的log文件也可以根据自己网站名字替换</div><div class=\"line\">    location ~* ^.+\\.(ico|gif|jpg|jpeg|png)$ &#123;</div><div class=\"line\">            root /var/www/hexo;//网站目录地址</div><div class=\"line\">            access_log   off;</div><div class=\"line\">            expires      1d;</div><div class=\"line\">    &#125;</div><div class=\"line\">    location ~* ^.+\\.(css|js|txt|xml|swf|wav)$ &#123;</div><div class=\"line\">        root /var/www/hexo;//网站目录地址</div><div class=\"line\">        access_log   off;</div><div class=\"line\">        expires      10m;</div><div class=\"line\">    &#125;</div><div class=\"line\">    location / &#123;</div><div class=\"line\">        root /var/www/hexo;//网站目录地址</div><div class=\"line\">        if (-f $request_filename) &#123;</div><div class=\"line\">            rewrite ^/(.*)$  /$1 break;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>重启Nginx<br><code>service nginx restart</code><br>(如果上述操作git用户搞不定，就切换到root用户<code>su root</code>)</p>\n<h3 id=\"配置hexo配置文件\"><a href=\"#配置hexo配置文件\" class=\"headerlink\" title=\"配置hexo配置文件\"></a>配置hexo配置文件</h3><hr>\n<p>位于<code>hexo</code>文件夹下，<code>_config.yml</code>,修改<code>deploy</code>选项，改成如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">- type: git</div><div class=\"line\">  repo: ssh://git@VPS的IP地址:/home/git/hexo.git#VPS上对应的git仓库(包含git hooks的地址)</div><div class=\"line\">  branch: master</div><div class=\"line\">- type: git</div><div class=\"line\">  repo: ssh://git@github.com/hexo.git#github上对应的保存静态文件的仓库</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure></p>\n<p>接着在hexo文件夹内，按住<code>shift右击</code>，选择在此处打开命令窗口（当然你也可以用cd命令），运行<code>hexo g &amp;&amp; hexo d</code>，如果一切正常，静态文件已经被成功的push到了blog的仓库里，如果出现<code>appears not to be a git repo</code>的错误，删除hexo目录下的<code>.deploy</code>后再次<code>hexo g &amp;&amp; hexo d</code>就可以了。<br>到这里，博客已经完全建好了。</p>\n<h3 id=\"更新博客\"><a href=\"#更新博客\" class=\"headerlink\" title=\"更新博客\"></a>更新博客</h3><hr>\n<p>使用一款 MarkDown 编辑器写 Blog 。写完后将文件以 <code>*.md</code>的格式保存在本地<code>[网站目录]\\source\\_posts</code>中。文件编码必须为 <strong><code>UTF-8</code></strong>，这一点仅 Windows 用户需注意。<br>编写完后，只需要在hexo文件夹下执行<code>hexo g &amp;&amp; hexo d</code>，博客即可更新。</p>\n<h3 id=\"备份\"><a href=\"#备份\" class=\"headerlink\" title=\"备份\"></a>备份</h3><hr>\n<p>由于上面hexo文件夹下执行<code>hexo g &amp;&amp; hexo d</code>执行之后, 会更新github上你的网站目录的信息, 但是markdown文件并没有保存, 保存的是转换成静态文件<code>html</code>, 所以还是需要保存下你的原文件。因此在github上建了一个仓库专门保存博客的原文件。这样更新完博客以后，只要上传一下原文件就可以高枕无忧了。  <strong>:)</strong></p>\n<h2 id=\"四、安装中遇到问题\"><a href=\"#四、安装中遇到问题\" class=\"headerlink\" title=\"四、安装中遇到问题\"></a>四、安装中遇到问题</h2><hr>\n<ul>\n<li><p>上传操作<code>hexo d</code>报错<code>spawn git ENOENT</code>，添加<a href=\"http://www.brafox.com/post/2015/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/git-%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE.html\" target=\"_blank\" rel=\"external\">Git环境变量</a>后可以了</p>\n</li>\n<li><p><code>hexo g</code> 报错，安装<code>hexo-delopyer-git</code>后解决。</p>\n</li>\n<li><p><code>hexo d</code> 提交到VPS网站目录里的文件并不是单独的public文件夹，检查hexo文件夹发现存在<code>.git</code>这个目录，删除<code>.git</code>文件夹即可（他是隐藏的哦）。</p>\n</li>\n<li><p><code>ssh git@ip</code>，被拒绝，是远程端口默认为<code>22</code>端口，而不是我VPS的<code>ssh</code>真正端口。<br>解决方法：在<code>.ssh</code>文件夹下（也就是生成公钥的文件夹）创建<code>config</code>文件，输入如下内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Host // VPS的IP</div><div class=\"line\">HostName // VPS的IP</div><div class=\"line\">User git</div><div class=\"line\">Port // SSH端口</div><div class=\"line\">IdentityFile ~/.ssh/id_rsa</div></pre></td></tr></table></figure>\n  <img src=\"http://otqlqfy9h.bkt.clouddn.com/images/2017-07-20/2017_07_20_10.png\">\n</li>\n<li><p><code>ssh -T git@github.com</code>是否连接上<code>github</code><br><code>git config --list</code> 查看<code>git config</code>配置</p>\n</li>\n<li><p>ngix正常配置后，执行 <code>yum install nginx -y</code>。 如果失败，可能是源没有配置，在<code>/etc/yum.repos.d</code>目录下创建一个源配置文件`nginx.repo, 写入如下代码，然后再执行一次。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">[nginx]</div><div class=\"line\">name=nginx repo</div><div class=\"line\">baseurl=http://nginx.org/packages/centos/$releasever/$basearch/</div><div class=\"line\">gpgcheck=0</div><div class=\"line\">enabled=1</div><div class=\"line\"></div><div class=\"line\">最后查看版本号，验证完成 `nginx -v`</div></pre></td></tr></table></figure>\n  <img src=\"http://otqlqfy9h.bkt.clouddn.com/images/2017-07-20/2017_07_20_11.png\">\n</li>\n<li><p>用<code>yum install git</code>安装<code>Git</code>出现问题：<code>/bin/bash: git: command not found</code><br>解决（修改安装命令为）：<code>yum install git git-svn git-email git-gui gitk -y</code></p>\n</li>\n<li><p>ssh配置后，ssh连接验证：<code>ssh: connect to host localhost port 22: Connection refused</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">错误原因：</div><div class=\"line\">sshd 未安装：yum install openssh-server</div><div class=\"line\">sshd 未启动：chkconfig sshd on</div><div class=\"line\">防火墙：chkconfig iptables off(永久性生效，重启后不会复原)</div><div class=\"line\">端口号没有设置为22(或者设置后没有重启：service sshd restart)</div></pre></td></tr></table></figure>\n</li>\n<li><p>使用<code>hero d</code>报错：<code>ERROR Deployer not found: git</code><br>解决：记得一定要在 blog 目录里 执行 <code>npm install hexo-deployer-git --save</code></p>\n<img src=\"http://otqlqfy9h.bkt.clouddn.com/images/2017-07-20/2017_07_20_12.png\">\n</li>\n<li><p>查看<code>node</code>和<code>npm</code>版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">node --version</div><div class=\"line\">npm --version</div></pre></td></tr></table></figure>\n</li>\n<li><p>warning: LF will be replaced by CRLF | fatal: CRLF would be replaced by LF<br>解决办法：<a href=\"http://blog.csdn.net/feng88724/article/details/11600375\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/feng88724/article/details/11600375</a><br>遇到这两个错误，是因为Git的换行符检查功能<br>对于出现一些conflic，可以reset一些，再重新更新</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git reset --hard FETCH_HEAD</div><div class=\"line\">git pull origin master</div></pre></td></tr></table></figure>\n</li>\n<li><p>hexo安装成功，并且正确运行，但是localhost:4000不能访问<br>解决办法：<a href=\"https://yq.aliyun.com/articles/58027\" target=\"_blank\" rel=\"external\">https://yq.aliyun.com/articles/58027</a><br>遇到这个问题，是因为4000端口被占用了。如果你的电脑上不幸装了福昕阅读，恭喜你！它就是罪魁祸首….<br>胳膊拧不过大腿，对于这种流氓软件，我们别无他法，只能换端口。 :(</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">启动hexo s 的时候，用这个命令，换一个端口。</div><div class=\"line\">hexo s -p 3600 // 随便指定一个端口号就好</div></pre></td></tr></table></figure>\n</li>\n<li><p>添加多个key到git<br>Step1 添加到github账号： 打开<code>C:\\Users\\&lt;用户名&gt;\\.ssh</code>文件夹，拷贝<code>id_rsa.pub</code>里的内容，在Github账号<code>Settings-&gt;SSH and GPG keys-&gt;New SSH key</code><br>Step2 <a href=\"https://askubuntu.com/questions/46424/adding-ssh-keys-to-authorized-keys\" target=\"_blank\" rel=\"external\">添加到VPS</a>： 在<code>C:\\Users\\&lt;用户名&gt;\\.ssh</code>文件夹下打开<code>Git Bash Here</code>, 执行<code>ssh-copy-id git@vps的IP</code></p>\n</li>\n<li><p>运行<code>hexo g &amp;&amp; hexo d</code>后没有触发<strong>git hooks</strong>解决方案<br>说实话这个问题困扰了我三四天了，之前都是<code>hexo g &amp;&amp; hexo d</code>之后，跑到VPS下的发布目录（<code>www/hexo/</code>）去手动download github上的<code>hexo.git</code>仓库完成发布的。<br>确实不爽，于是翻了好几条网页，终于解决了。方法如下：</p>\n</li>\n</ul>\n<ol>\n<li>检查你的本地public key有没有add 到github账号，并且<code>/home/git/.ssh/authorized_keys</code>里面已经加入了之前Winodws下申请的key</li>\n<li><p>hexo文件夹下，<code>_config.yml</code>的配置语句正确如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">- type: git</div><div class=\"line\">  repo: ssh://git@VPS的IP地址:/home/git/hexo.git#VPS上对应的git仓库(包含git hooks的地址)</div><div class=\"line\">  branch: master</div><div class=\"line\">- type: git</div><div class=\"line\">  repo: ssh://git@github.com/hexo.git#github上对应的保存静态文件的仓库</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure>\n</li>\n<li><p>千万记得在本地博客路径<code>C:\\hexo\\</code>下一定要用<code>**Git Bash Here**</code>执行命令，而不是<strong>Windows的命令行窗口</strong>，否则会一直报“Permission denied, please try again.”</p>\n<img src=\"http://otqlqfy9h.bkt.clouddn.com/images/2017-07-20/2017_07_20_13.png\">\n<p>运行<code>ssh -T git@github.com</code>，是否能正常访问github<br>运行<code>hexo g &amp;&amp; hexo d</code>，部署并提交代码到github，同时触发git hooks完成发布<br>过程中会弹出一个OpenSSH的对话框要你输入git的密码，输入完毕，点击ok。搞定！</p>\n</li>\n</ol>\n<ul>\n<li><p>本地博客路径<code>C:\\hexo\\</code>下有个<code>.gitignore</code> 文件，主要用于<code>git status</code>忽略一些列出的文件，但是筒子们有木有发现改了该文件之后，其实并没有作用。<br>百思不得其解之后，搜到<a href=\"https://stackoverflow.com/questions/25436312/gitignore-not-working\" target=\"_blank\" rel=\"external\">某攻略</a>才豁然开朗：只改文件你列出的文件或目录在仓库中，需要执行以下命令手动移除。提交一版之后，整个世界就清净了 <strong>:)</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">git rm -rf --cached .</div><div class=\"line\">git add .</div><div class=\"line\">git commit -m &quot;xxxxx&quot;</div><div class=\"line\">git push origin master</div></pre></td></tr></table></figure>\n</li>\n<li><p>为 Next 主题文末添加版权等信息<br>看到别人博客里的版权信息，觉得有点意思，找了很多教程，效果都不是自己想要的。只能借用下<a href=\"http://notes.iissnan.com/2015/something-about-next/\" target=\"_blank\" rel=\"external\">Next作者的格式和样式</a>。<br><strong>建立基础的HTML代码</strong><br>定位到本地博客文件夹下的<code>themes\\next\\layout\\_macro\\post.swig</code>文件，这个和于<code>layout</code>下的<code>post.swig</code>的区别是前者扶着具体的<code>post-content</code>的生成，而后者是调用前者。<br>然后补充类似comment第三方的模块的脚本。找到post-body所在的标签，并在其后加上如下代码：然后补充类似comment第三方的模块的脚本。找到post-body所在的标签，并在其后加上如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div&gt;</div><div class=\"line\"> &#123;# 表示如果不在索引列表中加入后续的HTML代码 #&#125;</div><div class=\"line\"> &#123;% if not is_index %&#125;</div><div class=\"line\">\t&lt;ul class=&quot;post-copyright&quot;&gt;</div><div class=\"line\">\t  &lt;li class=&quot;post-copyright-author&quot;&gt;</div><div class=\"line\">\t\t  &lt;strong&gt;本文作者：&lt;/strong&gt;&#123;&#123; theme.author &#125;&#125;</div><div class=\"line\">\t  &lt;/li&gt;</div><div class=\"line\">\t  &lt;li class=&quot;post-copyright-link&quot;&gt;</div><div class=\"line\">\t\t&lt;strong&gt;本文链接：&lt;/strong&gt;</div><div class=\"line\">\t\t&lt;a href=&quot;&#123;&#123; url_for(page.path) &#125;&#125;&quot; title=&quot;&#123;&#123; page.title &#125;&#125;&quot;&gt;&#123;&#123; page.permalink &#125;&#125;&lt;/a&gt;</div><div class=\"line\">\t  &lt;/li&gt;</div><div class=\"line\">\t  &lt;li class=&quot;post-copyright-license&quot;&gt;</div><div class=\"line\">\t\t&lt;strong&gt;版权声明： &lt;/strong&gt;</div><div class=\"line\">\t\t本博客所有文章除特别声明外，均采用 &lt;a href=&quot;http://creativecommons.org/licenses/by-nc-sa/3.0/cn/&quot; rel=&quot;external nofollow&quot; target=&quot;_blank&quot;&gt;CC BY-NC-SA 3.0 CN&lt;/a&gt; 许可协议。转载请注明出处！</div><div class=\"line\">\t  &lt;/li&gt;</div><div class=\"line\">\t&lt;/ul&gt;</div><div class=\"line\"> &#123;% endif %&#125;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>  <strong>增添样式</strong><br>  定位Next下的<code>source/css/_custom/custom.styl</code>,并在里面添加如下样式代码:</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">.post-copyright &#123;</div><div class=\"line\">\tmargin: 2em 0 0;</div><div class=\"line\">\tpadding: 0.5em 1em;</div><div class=\"line\">\tborder-left: 3px solid #ff1700;</div><div class=\"line\">\tbackground-color: #f9f9f9;</div><div class=\"line\">\tlist-style: none;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"五、后记\"><a href=\"#五、后记\" class=\"headerlink\" title=\"五、后记\"></a>五、后记</h2><hr>\n<p>以下是自己搭建过程中查找的相关链接和信息，希望对大家有帮助。</p>\n<ol>\n<li><a href=\"https://dynamicer.com/how-to-deploy-hexo-blogs-with-git-hooks-on-vps/\" target=\"_blank\" rel=\"external\">https://dynamicer.com/how-to-deploy-hexo-blogs-with-git-hooks-on-vps/</a></li>\n<li><a href=\"http://tiktoking.github.io/2016/01/26/hexo/\" target=\"_blank\" rel=\"external\">http://tiktoking.github.io/2016/01/26/hexo/</a></li>\n<li><a href=\"http://blog.csdn.net/hanhailong726188/article/details/46738929\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/hanhailong726188/article/details/46738929</a></li>\n<li><a href=\"http://blog.ynxiu.com/2016/hexo-next-theme-optimize.html\" target=\"_blank\" rel=\"external\">http://blog.ynxiu.com/2016/hexo-next-theme-optimize.html</a></li>\n<li><a href=\"https://arcecho.github.io/2017/04/08/Hexo-Next%E4%B8%8B%E6%B7%BB%E5%8A%A0%E7%89%88%E6%9D%83%E5%A3%B0%E6%98%8E%E6%A8%A1%E5%9D%97/\" target=\"_blank\" rel=\"external\">https://arcecho.github.io/2017/04/08/Hexo-Next%E4%B8%8B%E6%B7%BB%E5%8A%A0%E7%89%88%E6%9D%83%E5%A3%B0%E6%98%8E%E6%A8%A1%E5%9D%97/</a></li>\n</ol>\n<h2 id=\"六、编辑工具\"><a href=\"#六、编辑工具\" class=\"headerlink\" title=\"六、编辑工具\"></a>六、编辑工具</h2><hr>\n<p>因为Hexo是支持Markdown的文件，而Markdown是一种极简的『标记语言』，将文本转为<code>HTML</code>，通常为我大码农所用。 简介好使是关键！以下为一些相关链接，希望对大家有帮助。</p>\n<p>Markdown语法</p>\n<ol>\n<li><a href=\"http://ibruce.info/2013/11/26/markdown/\" target=\"_blank\" rel=\"external\">http://ibruce.info/2013/11/26/markdown/</a></li>\n<li><a href=\"https://maxiang.io/\" target=\"_blank\" rel=\"external\">https://maxiang.io/</a></li>\n</ol>\n<p>Markdown编辑器</p>\n<ol>\n<li><a href=\"http://www.csdn.net/article/2014-05-05/2819623\" target=\"_blank\" rel=\"external\">http://www.csdn.net/article/2014-05-05/2819623</a></li>\n<li><a href=\"https://maxiang.io/\" target=\"_blank\" rel=\"external\">https://maxiang.io/</a></li>\n</ol>\n"},{"title":"使用七牛为Hexo存储图片","date":"2017-08-02T09:53:29.000Z","_content":"\n搭建完博客之后一直使用本地图片（相对路径），这样不是很方便，毕竟事关逼格。网上搜索了一把，貌似七牛云做图床评价挺高。说干就干，咱也尝试着使用七牛作为博客的图床了。\n\n## 一、七牛是什么\n---\n\n[七牛][1] 是一个云存储服务商，注册并实名认证之后，你将免费享有 10GB 存储空间，每月 10GB 下载流量、100 万次 GET 请求、 10 万次 `PUT/DELETE` 请求。这对于一个博客来说，完全足够了。\n{% qnimg 2017-08-02/2017_08_02_1.png %}\n\n## 二、为什么选用七牛\n---\n\n**与直接部署到站点相比：**\n- 访问速度更快 （特别是对比部署到github的情况）。\n- 对个人用户而言空间和流量都十分阔绰。 Gitcafe有 512Mb 的总空间限制，Github虽没有找到类似的说明，但是在其上托管过多媒体资源也不是太合适的做法。而在七牛，你甚至可以通过邀请好友来增加每月下载流量（我的[邀请链接][3]），每成功邀请一名朋友将增加5GB的下载流量，最高上限可达40GB。\n- 如果你爱折腾，还可以玩出更多花样3：\n- 防盗链；\n\t对图片、音视频等在线处理，不必自己做重复工作。通过调用接口，七牛可以帮你：加水印、自定义裁剪区域、旋转、调整图片质量、转换格式；\n\t分析下载量等详细数据，挖掘用户行为。\n\n**与其他上传站点相比：**\n- 更稳定：七牛毕竟是老牌服务商，数据的安全性和稳定性都较有保证。如果上传到什么小网站，哪天发现图片都打不开了才是人间惨剧~\n- 更灵活：配合 hexo-qiniu-sync 插件4，就算是七牛以后更改了空间域名，也不用一篇一篇地去改外链地址，只要在配置文件中修改外链前缀即可。\n- 更方便：配合 hexo-qiniu-sync 插件，不必”上传→复制链接→引用外链“，直接按照本地路径引用，然后键入一条命令同步到七牛就好。会自动识别哪些是新增、修改的文件需要上传，哪些是原有的文件不需改动，十分方便。\n\n**当然，虽然七牛有很多优点，但是有一些不足：**\n- 在线文件管理不支持目录。\n- 本地删除文件，云端不能同步删除文件。\n尽管仍有欠缺，私以为七牛依旧是现在个人博客最佳的资源储存服务。\n\n## 三、七牛存储空间的设置\n---\n\n1. [申请七牛账号][4]\n2. 选择**对象存储**创建存储空间\n\t{% qnimg 2017-08-02/2017_08_02_2.png %}\n\t配置相关参数\n\t{% qnimg 2017-08-02/2017_08_02_3.png %}\n3. 点击页面右上角头像→进入”个人中心“→选择”密钥管理“→复制当前使用中的`AK`和`SK`(待会设置插件时会用到)。\n    {% qnimg 2017-08-02/2017_08_02_4.png %}\n\n\n## 四、设置 hexo-qiniu-sync 插件\n---\n\n前人栽树，后人乘凉。有了插件[**hexo-qiniu-sync**][5]，可以不用手动上传文件到七牛，插件会自动帮你将本地目录的文件同步到七牛之前设定的存储空间下。\n### 安装插件 \n在hexo主目录下运行以下命令进行安装\n```\nnpm install hexo-qiniu-sync --save\n```\n\n### 添加插件配置信息\n在hexo主目录下找到配置文件 `_config.yml`, 加入以下配置信息：\n```\n#七牛云存储设置\nqiniu:\n  offline: false\n  sync: true\n  bucket: bucket_name\n  secret_file: sec/qn.json or C:\n  access_key: AccessKey\n  secret_key: SecretKey\n  dirPrefix: static\n  urlPrefix: http://bucket_name.qiniudn.com/static\n  up_host: http://upload.qiniu.com\n  local_dir: static\n  update_exist: true\n  image: \n    folder: images\n    extend: \n  js:\n    folder: js\n  css:\n    folder: css\n  audio:\n    folder: audio\n```\n\n**几个注意点:**\n- **bucket** ：修改为你刚才申请的七牛空间名称\n- **access_key 、 secret_key** : 上传密钥`AccessKey、SecretKey`。即3 第3步复制的AK和SK。\n- **urlPrefix** : 七牛空间地址的前缀。 **重要！必填！** \n  因为现在七牛已经取消了二级域名，外链前缀类似设置中的 http://7xqb0u.com1.z0.glb.clouddn.com ，插件不能根据 bucket 自动生成外链前缀了。你可以进入自己创建的空间在域名设置中看到自己的七牛测试域名，也可以查看一个已上传的文件外链地址，确认前缀无误。这个参数的设置是保证解析成网页文件时，外链地址正确的关键之一！\n\t{% qnimg 2017-08-02/2017_08_02_5.png %}\n- 不要在plugins下面添加hexo-qiniu-sync的配置项，否则会导致错误，[详见][6] \n```\n# 错误示例\nplugins:\n  - hexo-qiniu-sync\n```\n配置参数说明：\n- **offline 参数：**\n如果要使用同步到七牛空间的静态资源，请设置为 false。如果只想浏览在本地的静态资源文件，则设置为 true。\n- **secret_file 参数： **\n可有可无，貌似有了这个之后上面的两个参数就不需要配置了。这个路径是需要你自己建立一个json的文件存储上面的秘钥，然后把文件的路径写在这里就好\n- **sync 参数：**\n如果你想关掉七牛同步，将此参数设置为false即可，不过一般用不到修改这个参数。\n- **dirPrefix 参数：**\n将资源上传到七牛空间内这个目录下(说是目录会容易理解点)，默认为 `static` 目录。\n可设置为空。该参数会影响外链的地址，如果设置为非空值，例如默认值 `static` ，则 `urlPrefix` 为保持一致需加上目录后缀 `/static` ，改为 `http://bucket_name.qiniudn.com/static` 。\n(外链地址http://bucket_name.qiniudn.com，替换成自己地址)\n- **urlPrefix 参数：**\n七牛空间地址的前缀，会按默认格式自动生成地址，所以此参数可省略。\n默认格式为 `http://bucket_name.qiniudn.com/static` ，如果你的七牛空间使用自定义域名或域名不是此格式的，请配置此参数。\n当你设置了 `dirPrefix` 参数后，如`static`。则此`url`地址必须加上目录后缀 `/static` ， 即`http://bucket_name.qiniudn.com/static`，否则静态资源将无法访问。\n如果没有设置 `dirPrefix` 参数，url地址不必加上目录后缀， 即`http://bucket_name.qiniudn.com`。\n(外链地址http://bucket_name.qiniudn.com，替换成自己地址)\n- **local_dir 参数：**\n只填写一个目录名称即可，建立在hexo博客的主目录，不需要使用子目录。\n当你在配置中填写好文件夹后，运行hexo时，会自动建立对应的目录。\n如果你了解hexo文件夹的关系，担心这样会导致离线模式不能查看到图片，我可以告诉你你不需要担心这个问题。\n在你以离线模式运行时，会自动使用软连接/联接方式帮你建立文件夹的引用，可以让你的离线浏览节省一倍的空间。\n- **update_exist 参数：**\n如果你的静态文件会进行修改或替换，并需要更新七牛空间上原先上传的文件，则设置为 true 。\n是否更新空间上已上传的文件，是按照对比文件大小是否相同或者本地文件在上传到七牛空间之后进行过修改的规则进行判断的。\n- **image/js/css ：**\n子参数folder为不同静态资源种类的目录名称，一般不需要改动\n- **image : extend 参数：**\n这是个特殊参数，是文章内使用 qnimg 标签引用图片的默认图片处理操作。请参考 七牛开发者中心-图片处理。\n可以使用 基本图片处理（imageView2）、高级图片处理（imageMogr2）、图片水印处理（watermark） 这三个图片处理接口，多个接口内容之间用 | 间隔。\n例如 `?imageView2/2/w/500` 即生成宽度最多500px的缩略图。\n\n以下是我的配置文件\n{% qnimg 2017-08-02/2017_08_02_6.png %}\n\n这样你在 `local_dir` 的`image命名`的文件夹中添加一张图片，之后运行`hexo（如hexo s）`，图片就可以在你的七牛存储空间的内容管理中看见了。\n你会看到图片的外链URL就是`http://your_site/your_static(你的目录-dirPrefix参数的配置)/images/yourimage.png`。就是`域名+自定义的目录名+images（配置文件中image中folder指定的文件）+ 图片名`\n{% qnimg 2017-08-02/2017_08_02_7.png %}\n\n\n## 五、引用七牛资源\n---\n\n### 引用图片\n图片的引用是最典型的情况。让我们来看最简单的情况：如果你想引用储存在 `local_dir/images` 下的图片 `demo.jpg` ，只需在文章中插入：\n```\n{% qnimg demo.jpg %}\n```\n生成站点时将被解析为：\n```\n<img src=\"http://7xqb0u.com1.z0.glb.clouddn.com/images/demo.jpg\">\n```\n这里，我们总结一下生成的图片外链地址规则。我们把引用实例概括为：\n```\n{% qnimg ImgFile %}\n```\n则生成的图片外链地址规则为`urlPrefix + / + image.folder + / + ImgFile`。\n因此，要想正确的引用外链，一定要注意每一个步骤的设置。如果最后外链不能正常显示，首先对比一下网站博客引用的地址和七牛的外链地址是否一致，如果不一致，则对照外链地址的生成规律，检查文件存放路径、 urlPrefix 、 dirPrefix 、 image.folder 设置是否正确。\n\n### 图片引用的高阶版\n高级用法的通用模版：\n```\n{% qnimg imageFile [attr1:value1] ['attr2:value21 value22 ...'] [extend:... | normal:yes] %}\n```\n[] 表示可选项，按需添加，也可以不写\n| 表示二选一\nextend:... 图片处理参数，表示对图片进行某种特定处理5，多个处理之间用 | 间隔。\nnormal:yes 表示使用原图，忽略 _config.yml 文件中的 image.extend 设置\n实例 图片的本地路径为 cdn/images/test/demo.png ：\n```\n{% qnimg test/demo.png title:标题 alt:说明 'class:class1 class2' extend:?imageView2/2/w/600 %}\n```\n解析为：\n```\n<img title=\"标题\" alt=\"说明\" class=\"class1 class2\" src=\"http://7xqb0u.com1.z0.glb.clouddn.com/images/test/demo.png?imageView2/2/w/600\">\n```\n其中 ?imageView2/2/w/500 代表生成宽度最多500px的缩略图5。如果经常使用某种图片效果，可以在其七牛创建处理样式，以后直接将 extend 参数设置为 分隔符 + 样式名 就好。例如设置的分隔符为 - ，样式名为 new ，则 extend 参数为 -new 。\n\n### 引用CSS和JS\n只是引用的标签名不同：\n```\n{% qnjs jsFile attr1:value1 attr2:value2 'attr3:value31 value32 value3n' %}\n{% qncss cssFile attr1:value1 attr2:value2 'attr3:value31 value32 value3n' %}\n```\n\n**注意**\n在添加图片的时候，放在images文件夹下的图片，是可以创建子文件夹的。所以，为了方便以及同时兼容之前使用本地图片插件的方式，每一篇文章或者一个功能对应的图片最好放在一个子文件夹下，这样在日志文章中对图片进行引用的时候就可以直接设置成文件夹名/图片名.png的格式。这里建议文件夹名与文章名相同，便于管理\n\n\n## 六、同步到七牛\n---\n\n将文件上传到七牛云有两种方式 `hexo s` 和 `hexo qiniu sync|sync2` 的两个命令工具:\n```\nqiniu sync plugin for hexo\nUsage: hexo qiniu  <argument>\nDescription:\nhexo qiniu static files sync plugin\nArguments:\n  info | i    Displays plugin version, aurthor or GitHub links\n  sync | s    Sync your static files to qiniu.\n  sync2 | s2  Sync your static files to qiniu.(And uploaded update files)\n```\n\n\n## 七、后记\n---\n\n以下是自己搭建过程中查找的相关链接和信息，希望对大家有帮助。\n1. https://github.com/gyk001/hexo-qiniu-sync\n2. http://www.ixirong.com/2016/10/31/how-to-use-hexo-qiniu-sync-plugin/\n3. http://yuchen-lea.github.io/2016-01-21-use-qiniu-store-file-for-hexo/\n4. http://error408.com/2016/08/02/Hexo%E4%B8%83%E7%89%9B%E5%9B%BE%E5%BA%8A%E4%BD%BF%E7%94%A8/\n\n\n[1]: https://www.qiniu.com/\n[2]: https://zh.wikipedia.org/wiki/%E5%85%A7%E5%AE%B9%E5%82%B3%E9%81%9E%E7%B6%B2%E8%B7%AF\n[3]: https://portal.qiniu.com/signup?code=3lg4nzgggsggi\n[4]: https://portal.qiniu.com/create\n[5]: https://github.com/gyk001/hexo-qiniu-sync\n[6]: https://github.com/gyk001/hexo-qiniu-sync/issues/41#issuecomment-279229378\n","source":"_posts/UseQiniudnToStorePic.md","raw":"---\ntitle: 使用七牛为Hexo存储图片\ndate: 2017-08-02 17:53:29\ncategories: Others\ntags:\n - Hexo\n - Qiniu\n---\n\n搭建完博客之后一直使用本地图片（相对路径），这样不是很方便，毕竟事关逼格。网上搜索了一把，貌似七牛云做图床评价挺高。说干就干，咱也尝试着使用七牛作为博客的图床了。\n\n## 一、七牛是什么\n---\n\n[七牛][1] 是一个云存储服务商，注册并实名认证之后，你将免费享有 10GB 存储空间，每月 10GB 下载流量、100 万次 GET 请求、 10 万次 `PUT/DELETE` 请求。这对于一个博客来说，完全足够了。\n{% qnimg 2017-08-02/2017_08_02_1.png %}\n\n## 二、为什么选用七牛\n---\n\n**与直接部署到站点相比：**\n- 访问速度更快 （特别是对比部署到github的情况）。\n- 对个人用户而言空间和流量都十分阔绰。 Gitcafe有 512Mb 的总空间限制，Github虽没有找到类似的说明，但是在其上托管过多媒体资源也不是太合适的做法。而在七牛，你甚至可以通过邀请好友来增加每月下载流量（我的[邀请链接][3]），每成功邀请一名朋友将增加5GB的下载流量，最高上限可达40GB。\n- 如果你爱折腾，还可以玩出更多花样3：\n- 防盗链；\n\t对图片、音视频等在线处理，不必自己做重复工作。通过调用接口，七牛可以帮你：加水印、自定义裁剪区域、旋转、调整图片质量、转换格式；\n\t分析下载量等详细数据，挖掘用户行为。\n\n**与其他上传站点相比：**\n- 更稳定：七牛毕竟是老牌服务商，数据的安全性和稳定性都较有保证。如果上传到什么小网站，哪天发现图片都打不开了才是人间惨剧~\n- 更灵活：配合 hexo-qiniu-sync 插件4，就算是七牛以后更改了空间域名，也不用一篇一篇地去改外链地址，只要在配置文件中修改外链前缀即可。\n- 更方便：配合 hexo-qiniu-sync 插件，不必”上传→复制链接→引用外链“，直接按照本地路径引用，然后键入一条命令同步到七牛就好。会自动识别哪些是新增、修改的文件需要上传，哪些是原有的文件不需改动，十分方便。\n\n**当然，虽然七牛有很多优点，但是有一些不足：**\n- 在线文件管理不支持目录。\n- 本地删除文件，云端不能同步删除文件。\n尽管仍有欠缺，私以为七牛依旧是现在个人博客最佳的资源储存服务。\n\n## 三、七牛存储空间的设置\n---\n\n1. [申请七牛账号][4]\n2. 选择**对象存储**创建存储空间\n\t{% qnimg 2017-08-02/2017_08_02_2.png %}\n\t配置相关参数\n\t{% qnimg 2017-08-02/2017_08_02_3.png %}\n3. 点击页面右上角头像→进入”个人中心“→选择”密钥管理“→复制当前使用中的`AK`和`SK`(待会设置插件时会用到)。\n    {% qnimg 2017-08-02/2017_08_02_4.png %}\n\n\n## 四、设置 hexo-qiniu-sync 插件\n---\n\n前人栽树，后人乘凉。有了插件[**hexo-qiniu-sync**][5]，可以不用手动上传文件到七牛，插件会自动帮你将本地目录的文件同步到七牛之前设定的存储空间下。\n### 安装插件 \n在hexo主目录下运行以下命令进行安装\n```\nnpm install hexo-qiniu-sync --save\n```\n\n### 添加插件配置信息\n在hexo主目录下找到配置文件 `_config.yml`, 加入以下配置信息：\n```\n#七牛云存储设置\nqiniu:\n  offline: false\n  sync: true\n  bucket: bucket_name\n  secret_file: sec/qn.json or C:\n  access_key: AccessKey\n  secret_key: SecretKey\n  dirPrefix: static\n  urlPrefix: http://bucket_name.qiniudn.com/static\n  up_host: http://upload.qiniu.com\n  local_dir: static\n  update_exist: true\n  image: \n    folder: images\n    extend: \n  js:\n    folder: js\n  css:\n    folder: css\n  audio:\n    folder: audio\n```\n\n**几个注意点:**\n- **bucket** ：修改为你刚才申请的七牛空间名称\n- **access_key 、 secret_key** : 上传密钥`AccessKey、SecretKey`。即3 第3步复制的AK和SK。\n- **urlPrefix** : 七牛空间地址的前缀。 **重要！必填！** \n  因为现在七牛已经取消了二级域名，外链前缀类似设置中的 http://7xqb0u.com1.z0.glb.clouddn.com ，插件不能根据 bucket 自动生成外链前缀了。你可以进入自己创建的空间在域名设置中看到自己的七牛测试域名，也可以查看一个已上传的文件外链地址，确认前缀无误。这个参数的设置是保证解析成网页文件时，外链地址正确的关键之一！\n\t{% qnimg 2017-08-02/2017_08_02_5.png %}\n- 不要在plugins下面添加hexo-qiniu-sync的配置项，否则会导致错误，[详见][6] \n```\n# 错误示例\nplugins:\n  - hexo-qiniu-sync\n```\n配置参数说明：\n- **offline 参数：**\n如果要使用同步到七牛空间的静态资源，请设置为 false。如果只想浏览在本地的静态资源文件，则设置为 true。\n- **secret_file 参数： **\n可有可无，貌似有了这个之后上面的两个参数就不需要配置了。这个路径是需要你自己建立一个json的文件存储上面的秘钥，然后把文件的路径写在这里就好\n- **sync 参数：**\n如果你想关掉七牛同步，将此参数设置为false即可，不过一般用不到修改这个参数。\n- **dirPrefix 参数：**\n将资源上传到七牛空间内这个目录下(说是目录会容易理解点)，默认为 `static` 目录。\n可设置为空。该参数会影响外链的地址，如果设置为非空值，例如默认值 `static` ，则 `urlPrefix` 为保持一致需加上目录后缀 `/static` ，改为 `http://bucket_name.qiniudn.com/static` 。\n(外链地址http://bucket_name.qiniudn.com，替换成自己地址)\n- **urlPrefix 参数：**\n七牛空间地址的前缀，会按默认格式自动生成地址，所以此参数可省略。\n默认格式为 `http://bucket_name.qiniudn.com/static` ，如果你的七牛空间使用自定义域名或域名不是此格式的，请配置此参数。\n当你设置了 `dirPrefix` 参数后，如`static`。则此`url`地址必须加上目录后缀 `/static` ， 即`http://bucket_name.qiniudn.com/static`，否则静态资源将无法访问。\n如果没有设置 `dirPrefix` 参数，url地址不必加上目录后缀， 即`http://bucket_name.qiniudn.com`。\n(外链地址http://bucket_name.qiniudn.com，替换成自己地址)\n- **local_dir 参数：**\n只填写一个目录名称即可，建立在hexo博客的主目录，不需要使用子目录。\n当你在配置中填写好文件夹后，运行hexo时，会自动建立对应的目录。\n如果你了解hexo文件夹的关系，担心这样会导致离线模式不能查看到图片，我可以告诉你你不需要担心这个问题。\n在你以离线模式运行时，会自动使用软连接/联接方式帮你建立文件夹的引用，可以让你的离线浏览节省一倍的空间。\n- **update_exist 参数：**\n如果你的静态文件会进行修改或替换，并需要更新七牛空间上原先上传的文件，则设置为 true 。\n是否更新空间上已上传的文件，是按照对比文件大小是否相同或者本地文件在上传到七牛空间之后进行过修改的规则进行判断的。\n- **image/js/css ：**\n子参数folder为不同静态资源种类的目录名称，一般不需要改动\n- **image : extend 参数：**\n这是个特殊参数，是文章内使用 qnimg 标签引用图片的默认图片处理操作。请参考 七牛开发者中心-图片处理。\n可以使用 基本图片处理（imageView2）、高级图片处理（imageMogr2）、图片水印处理（watermark） 这三个图片处理接口，多个接口内容之间用 | 间隔。\n例如 `?imageView2/2/w/500` 即生成宽度最多500px的缩略图。\n\n以下是我的配置文件\n{% qnimg 2017-08-02/2017_08_02_6.png %}\n\n这样你在 `local_dir` 的`image命名`的文件夹中添加一张图片，之后运行`hexo（如hexo s）`，图片就可以在你的七牛存储空间的内容管理中看见了。\n你会看到图片的外链URL就是`http://your_site/your_static(你的目录-dirPrefix参数的配置)/images/yourimage.png`。就是`域名+自定义的目录名+images（配置文件中image中folder指定的文件）+ 图片名`\n{% qnimg 2017-08-02/2017_08_02_7.png %}\n\n\n## 五、引用七牛资源\n---\n\n### 引用图片\n图片的引用是最典型的情况。让我们来看最简单的情况：如果你想引用储存在 `local_dir/images` 下的图片 `demo.jpg` ，只需在文章中插入：\n```\n{% qnimg demo.jpg %}\n```\n生成站点时将被解析为：\n```\n<img src=\"http://7xqb0u.com1.z0.glb.clouddn.com/images/demo.jpg\">\n```\n这里，我们总结一下生成的图片外链地址规则。我们把引用实例概括为：\n```\n{% qnimg ImgFile %}\n```\n则生成的图片外链地址规则为`urlPrefix + / + image.folder + / + ImgFile`。\n因此，要想正确的引用外链，一定要注意每一个步骤的设置。如果最后外链不能正常显示，首先对比一下网站博客引用的地址和七牛的外链地址是否一致，如果不一致，则对照外链地址的生成规律，检查文件存放路径、 urlPrefix 、 dirPrefix 、 image.folder 设置是否正确。\n\n### 图片引用的高阶版\n高级用法的通用模版：\n```\n{% qnimg imageFile [attr1:value1] ['attr2:value21 value22 ...'] [extend:... | normal:yes] %}\n```\n[] 表示可选项，按需添加，也可以不写\n| 表示二选一\nextend:... 图片处理参数，表示对图片进行某种特定处理5，多个处理之间用 | 间隔。\nnormal:yes 表示使用原图，忽略 _config.yml 文件中的 image.extend 设置\n实例 图片的本地路径为 cdn/images/test/demo.png ：\n```\n{% qnimg test/demo.png title:标题 alt:说明 'class:class1 class2' extend:?imageView2/2/w/600 %}\n```\n解析为：\n```\n<img title=\"标题\" alt=\"说明\" class=\"class1 class2\" src=\"http://7xqb0u.com1.z0.glb.clouddn.com/images/test/demo.png?imageView2/2/w/600\">\n```\n其中 ?imageView2/2/w/500 代表生成宽度最多500px的缩略图5。如果经常使用某种图片效果，可以在其七牛创建处理样式，以后直接将 extend 参数设置为 分隔符 + 样式名 就好。例如设置的分隔符为 - ，样式名为 new ，则 extend 参数为 -new 。\n\n### 引用CSS和JS\n只是引用的标签名不同：\n```\n{% qnjs jsFile attr1:value1 attr2:value2 'attr3:value31 value32 value3n' %}\n{% qncss cssFile attr1:value1 attr2:value2 'attr3:value31 value32 value3n' %}\n```\n\n**注意**\n在添加图片的时候，放在images文件夹下的图片，是可以创建子文件夹的。所以，为了方便以及同时兼容之前使用本地图片插件的方式，每一篇文章或者一个功能对应的图片最好放在一个子文件夹下，这样在日志文章中对图片进行引用的时候就可以直接设置成文件夹名/图片名.png的格式。这里建议文件夹名与文章名相同，便于管理\n\n\n## 六、同步到七牛\n---\n\n将文件上传到七牛云有两种方式 `hexo s` 和 `hexo qiniu sync|sync2` 的两个命令工具:\n```\nqiniu sync plugin for hexo\nUsage: hexo qiniu  <argument>\nDescription:\nhexo qiniu static files sync plugin\nArguments:\n  info | i    Displays plugin version, aurthor or GitHub links\n  sync | s    Sync your static files to qiniu.\n  sync2 | s2  Sync your static files to qiniu.(And uploaded update files)\n```\n\n\n## 七、后记\n---\n\n以下是自己搭建过程中查找的相关链接和信息，希望对大家有帮助。\n1. https://github.com/gyk001/hexo-qiniu-sync\n2. http://www.ixirong.com/2016/10/31/how-to-use-hexo-qiniu-sync-plugin/\n3. http://yuchen-lea.github.io/2016-01-21-use-qiniu-store-file-for-hexo/\n4. http://error408.com/2016/08/02/Hexo%E4%B8%83%E7%89%9B%E5%9B%BE%E5%BA%8A%E4%BD%BF%E7%94%A8/\n\n\n[1]: https://www.qiniu.com/\n[2]: https://zh.wikipedia.org/wiki/%E5%85%A7%E5%AE%B9%E5%82%B3%E9%81%9E%E7%B6%B2%E8%B7%AF\n[3]: https://portal.qiniu.com/signup?code=3lg4nzgggsggi\n[4]: https://portal.qiniu.com/create\n[5]: https://github.com/gyk001/hexo-qiniu-sync\n[6]: https://github.com/gyk001/hexo-qiniu-sync/issues/41#issuecomment-279229378\n","slug":"UseQiniudnToStorePic","published":1,"updated":"2017-08-04T04:19:31.911Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjadpus9y000ocoxdo3jvc99r","content":"<p>搭建完博客之后一直使用本地图片（相对路径），这样不是很方便，毕竟事关逼格。网上搜索了一把，貌似七牛云做图床评价挺高。说干就干，咱也尝试着使用七牛作为博客的图床了。</p>\n<h2 id=\"一、七牛是什么\"><a href=\"#一、七牛是什么\" class=\"headerlink\" title=\"一、七牛是什么\"></a>一、七牛是什么</h2><hr>\n<p><a href=\"https://www.qiniu.com/\" target=\"_blank\" rel=\"external\">七牛</a> 是一个云存储服务商，注册并实名认证之后，你将免费享有 10GB 存储空间，每月 10GB 下载流量、100 万次 GET 请求、 10 万次 <code>PUT/DELETE</code> 请求。这对于一个博客来说，完全足够了。<br><img src=\"http://otqlqfy9h.bkt.clouddn.com/images/2017-08-02/2017_08_02_1.png\"></p>\n<h2 id=\"二、为什么选用七牛\"><a href=\"#二、为什么选用七牛\" class=\"headerlink\" title=\"二、为什么选用七牛\"></a>二、为什么选用七牛</h2><hr>\n<p><strong>与直接部署到站点相比：</strong></p>\n<ul>\n<li>访问速度更快 （特别是对比部署到github的情况）。</li>\n<li>对个人用户而言空间和流量都十分阔绰。 Gitcafe有 512Mb 的总空间限制，Github虽没有找到类似的说明，但是在其上托管过多媒体资源也不是太合适的做法。而在七牛，你甚至可以通过邀请好友来增加每月下载流量（我的<a href=\"https://portal.qiniu.com/signup?code=3lg4nzgggsggi\" target=\"_blank\" rel=\"external\">邀请链接</a>），每成功邀请一名朋友将增加5GB的下载流量，最高上限可达40GB。</li>\n<li>如果你爱折腾，还可以玩出更多花样3：</li>\n<li>防盗链；<br>  对图片、音视频等在线处理，不必自己做重复工作。通过调用接口，七牛可以帮你：加水印、自定义裁剪区域、旋转、调整图片质量、转换格式；<br>  分析下载量等详细数据，挖掘用户行为。</li>\n</ul>\n<p><strong>与其他上传站点相比：</strong></p>\n<ul>\n<li>更稳定：七牛毕竟是老牌服务商，数据的安全性和稳定性都较有保证。如果上传到什么小网站，哪天发现图片都打不开了才是人间惨剧~</li>\n<li>更灵活：配合 hexo-qiniu-sync 插件4，就算是七牛以后更改了空间域名，也不用一篇一篇地去改外链地址，只要在配置文件中修改外链前缀即可。</li>\n<li>更方便：配合 hexo-qiniu-sync 插件，不必”上传→复制链接→引用外链“，直接按照本地路径引用，然后键入一条命令同步到七牛就好。会自动识别哪些是新增、修改的文件需要上传，哪些是原有的文件不需改动，十分方便。</li>\n</ul>\n<p><strong>当然，虽然七牛有很多优点，但是有一些不足：</strong></p>\n<ul>\n<li>在线文件管理不支持目录。</li>\n<li>本地删除文件，云端不能同步删除文件。<br>尽管仍有欠缺，私以为七牛依旧是现在个人博客最佳的资源储存服务。</li>\n</ul>\n<h2 id=\"三、七牛存储空间的设置\"><a href=\"#三、七牛存储空间的设置\" class=\"headerlink\" title=\"三、七牛存储空间的设置\"></a>三、七牛存储空间的设置</h2><hr>\n<ol>\n<li><a href=\"https://portal.qiniu.com/create\" target=\"_blank\" rel=\"external\">申请七牛账号</a></li>\n<li>选择<strong>对象存储</strong>创建存储空间 <img src=\"http://otqlqfy9h.bkt.clouddn.com/images/2017-08-02/2017_08_02_2.png\">\n 配置相关参数 <img src=\"http://otqlqfy9h.bkt.clouddn.com/images/2017-08-02/2017_08_02_3.png\"></li>\n<li>点击页面右上角头像→进入”个人中心“→选择”密钥管理“→复制当前使用中的<code>AK</code>和<code>SK</code>(待会设置插件时会用到)。 <img src=\"http://otqlqfy9h.bkt.clouddn.com/images/2017-08-02/2017_08_02_4.png\">\n</li>\n</ol>\n<h2 id=\"四、设置-hexo-qiniu-sync-插件\"><a href=\"#四、设置-hexo-qiniu-sync-插件\" class=\"headerlink\" title=\"四、设置 hexo-qiniu-sync 插件\"></a>四、设置 hexo-qiniu-sync 插件</h2><hr>\n<p>前人栽树，后人乘凉。有了插件<a href=\"https://github.com/gyk001/hexo-qiniu-sync\" target=\"_blank\" rel=\"external\"><strong>hexo-qiniu-sync</strong></a>，可以不用手动上传文件到七牛，插件会自动帮你将本地目录的文件同步到七牛之前设定的存储空间下。</p>\n<h3 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h3><p>在hexo主目录下运行以下命令进行安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-qiniu-sync --save</div></pre></td></tr></table></figure></p>\n<h3 id=\"添加插件配置信息\"><a href=\"#添加插件配置信息\" class=\"headerlink\" title=\"添加插件配置信息\"></a>添加插件配置信息</h3><p>在hexo主目录下找到配置文件 <code>_config.yml</code>, 加入以下配置信息：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">#七牛云存储设置</div><div class=\"line\">qiniu:</div><div class=\"line\">  offline: false</div><div class=\"line\">  sync: true</div><div class=\"line\">  bucket: bucket_name</div><div class=\"line\">  secret_file: sec/qn.json or C:</div><div class=\"line\">  access_key: AccessKey</div><div class=\"line\">  secret_key: SecretKey</div><div class=\"line\">  dirPrefix: static</div><div class=\"line\">  urlPrefix: http://bucket_name.qiniudn.com/static</div><div class=\"line\">  up_host: http://upload.qiniu.com</div><div class=\"line\">  local_dir: static</div><div class=\"line\">  update_exist: true</div><div class=\"line\">  image: </div><div class=\"line\">    folder: images</div><div class=\"line\">    extend: </div><div class=\"line\">  js:</div><div class=\"line\">    folder: js</div><div class=\"line\">  css:</div><div class=\"line\">    folder: css</div><div class=\"line\">  audio:</div><div class=\"line\">    folder: audio</div></pre></td></tr></table></figure></p>\n<p><strong>几个注意点:</strong></p>\n<ul>\n<li><strong>bucket</strong> ：修改为你刚才申请的七牛空间名称</li>\n<li><strong>access_key 、 secret_key</strong> : 上传密钥<code>AccessKey、SecretKey</code>。即3 第3步复制的AK和SK。</li>\n<li><strong>urlPrefix</strong> : 七牛空间地址的前缀。 <strong>重要！必填！</strong><br>因为现在七牛已经取消了二级域名，外链前缀类似设置中的 <a href=\"http://7xqb0u.com1.z0.glb.clouddn.com\" target=\"_blank\" rel=\"external\">http://7xqb0u.com1.z0.glb.clouddn.com</a> ，插件不能根据 bucket 自动生成外链前缀了。你可以进入自己创建的空间在域名设置中看到自己的七牛测试域名，也可以查看一个已上传的文件外链地址，确认前缀无误。这个参数的设置是保证解析成网页文件时，外链地址正确的关键之一！  <img src=\"http://otqlqfy9h.bkt.clouddn.com/images/2017-08-02/2017_08_02_5.png\"></li>\n<li>不要在plugins下面添加hexo-qiniu-sync的配置项，否则会导致错误，<a href=\"https://github.com/gyk001/hexo-qiniu-sync/issues/41#issuecomment-279229378\" target=\"_blank\" rel=\"external\">详见</a> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 错误示例</div><div class=\"line\">plugins:</div><div class=\"line\">  - hexo-qiniu-sync</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>配置参数说明：</p>\n<ul>\n<li><strong>offline 参数：</strong><br>如果要使用同步到七牛空间的静态资源，请设置为 false。如果只想浏览在本地的静态资源文件，则设置为 true。</li>\n<li><strong>secret_file 参数： </strong><br>可有可无，貌似有了这个之后上面的两个参数就不需要配置了。这个路径是需要你自己建立一个json的文件存储上面的秘钥，然后把文件的路径写在这里就好</li>\n<li><strong>sync 参数：</strong><br>如果你想关掉七牛同步，将此参数设置为false即可，不过一般用不到修改这个参数。</li>\n<li><strong>dirPrefix 参数：</strong><br>将资源上传到七牛空间内这个目录下(说是目录会容易理解点)，默认为 <code>static</code> 目录。<br>可设置为空。该参数会影响外链的地址，如果设置为非空值，例如默认值 <code>static</code> ，则 <code>urlPrefix</code> 为保持一致需加上目录后缀 <code>/static</code> ，改为 <code>http://bucket_name.qiniudn.com/static</code> 。<br>(外链地址<a href=\"http://bucket_name.qiniudn.com，替换成自己地址\" target=\"_blank\" rel=\"external\">http://bucket_name.qiniudn.com，替换成自己地址</a>)</li>\n<li><strong>urlPrefix 参数：</strong><br>七牛空间地址的前缀，会按默认格式自动生成地址，所以此参数可省略。<br>默认格式为 <code>http://bucket_name.qiniudn.com/static</code> ，如果你的七牛空间使用自定义域名或域名不是此格式的，请配置此参数。<br>当你设置了 <code>dirPrefix</code> 参数后，如<code>static</code>。则此<code>url</code>地址必须加上目录后缀 <code>/static</code> ， 即<code>http://bucket_name.qiniudn.com/static</code>，否则静态资源将无法访问。<br>如果没有设置 <code>dirPrefix</code> 参数，url地址不必加上目录后缀， 即<code>http://bucket_name.qiniudn.com</code>。<br>(外链地址<a href=\"http://bucket_name.qiniudn.com，替换成自己地址\" target=\"_blank\" rel=\"external\">http://bucket_name.qiniudn.com，替换成自己地址</a>)</li>\n<li><strong>local_dir 参数：</strong><br>只填写一个目录名称即可，建立在hexo博客的主目录，不需要使用子目录。<br>当你在配置中填写好文件夹后，运行hexo时，会自动建立对应的目录。<br>如果你了解hexo文件夹的关系，担心这样会导致离线模式不能查看到图片，我可以告诉你你不需要担心这个问题。<br>在你以离线模式运行时，会自动使用软连接/联接方式帮你建立文件夹的引用，可以让你的离线浏览节省一倍的空间。</li>\n<li><strong>update_exist 参数：</strong><br>如果你的静态文件会进行修改或替换，并需要更新七牛空间上原先上传的文件，则设置为 true 。<br>是否更新空间上已上传的文件，是按照对比文件大小是否相同或者本地文件在上传到七牛空间之后进行过修改的规则进行判断的。</li>\n<li><strong>image/js/css ：</strong><br>子参数folder为不同静态资源种类的目录名称，一般不需要改动</li>\n<li><strong>image : extend 参数：</strong><br>这是个特殊参数，是文章内使用 qnimg 标签引用图片的默认图片处理操作。请参考 七牛开发者中心-图片处理。<br>可以使用 基本图片处理（imageView2）、高级图片处理（imageMogr2）、图片水印处理（watermark） 这三个图片处理接口，多个接口内容之间用 | 间隔。<br>例如 <code>?imageView2/2/w/500</code> 即生成宽度最多500px的缩略图。</li>\n</ul>\n<p>以下是我的配置文件<br><img src=\"http://otqlqfy9h.bkt.clouddn.com/images/2017-08-02/2017_08_02_6.png\"></p>\n<p>这样你在 <code>local_dir</code> 的<code>image命名</code>的文件夹中添加一张图片，之后运行<code>hexo（如hexo s）</code>，图片就可以在你的七牛存储空间的内容管理中看见了。<br>你会看到图片的外链URL就是<code>http://your_site/your_static(你的目录-dirPrefix参数的配置)/images/yourimage.png</code>。就是<code>域名+自定义的目录名+images（配置文件中image中folder指定的文件）+ 图片名</code><br><img src=\"http://otqlqfy9h.bkt.clouddn.com/images/2017-08-02/2017_08_02_7.png\"></p>\n<h2 id=\"五、引用七牛资源\"><a href=\"#五、引用七牛资源\" class=\"headerlink\" title=\"五、引用七牛资源\"></a>五、引用七牛资源</h2><hr>\n<h3 id=\"引用图片\"><a href=\"#引用图片\" class=\"headerlink\" title=\"引用图片\"></a>引用图片</h3><p>图片的引用是最典型的情况。让我们来看最简单的情况：如果你想引用储存在 <code>local_dir/images</code> 下的图片 <code>demo.jpg</code> ，只需在文章中插入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;% qnimg demo.jpg %&#125;</div></pre></td></tr></table></figure></p>\n<p>生成站点时将被解析为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;img src=&quot;http://7xqb0u.com1.z0.glb.clouddn.com/images/demo.jpg&quot;&gt;</div></pre></td></tr></table></figure></p>\n<p>这里，我们总结一下生成的图片外链地址规则。我们把引用实例概括为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;% qnimg ImgFile %&#125;</div></pre></td></tr></table></figure></p>\n<p>则生成的图片外链地址规则为<code>urlPrefix + / + image.folder + / + ImgFile</code>。<br>因此，要想正确的引用外链，一定要注意每一个步骤的设置。如果最后外链不能正常显示，首先对比一下网站博客引用的地址和七牛的外链地址是否一致，如果不一致，则对照外链地址的生成规律，检查文件存放路径、 urlPrefix 、 dirPrefix 、 image.folder 设置是否正确。</p>\n<h3 id=\"图片引用的高阶版\"><a href=\"#图片引用的高阶版\" class=\"headerlink\" title=\"图片引用的高阶版\"></a>图片引用的高阶版</h3><p>高级用法的通用模版：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;% qnimg imageFile [attr1:value1] [&apos;attr2:value21 value22 ...&apos;] [extend:... | normal:yes] %&#125;</div></pre></td></tr></table></figure></p>\n<p>[] 表示可选项，按需添加，也可以不写<br>| 表示二选一<br>extend:… 图片处理参数，表示对图片进行某种特定处理5，多个处理之间用 | 间隔。<br>normal:yes 表示使用原图，忽略 _config.yml 文件中的 image.extend 设置<br>实例 图片的本地路径为 cdn/images/test/demo.png ：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;% qnimg test/demo.png title:标题 alt:说明 &apos;class:class1 class2&apos; extend:?imageView2/2/w/600 %&#125;</div></pre></td></tr></table></figure></p>\n<p>解析为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;img title=&quot;标题&quot; alt=&quot;说明&quot; class=&quot;class1 class2&quot; src=&quot;http://7xqb0u.com1.z0.glb.clouddn.com/images/test/demo.png?imageView2/2/w/600&quot;&gt;</div></pre></td></tr></table></figure></p>\n<p>其中 ?imageView2/2/w/500 代表生成宽度最多500px的缩略图5。如果经常使用某种图片效果，可以在其七牛创建处理样式，以后直接将 extend 参数设置为 分隔符 + 样式名 就好。例如设置的分隔符为 - ，样式名为 new ，则 extend 参数为 -new 。</p>\n<h3 id=\"引用CSS和JS\"><a href=\"#引用CSS和JS\" class=\"headerlink\" title=\"引用CSS和JS\"></a>引用CSS和JS</h3><p>只是引用的标签名不同：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;% qnjs jsFile attr1:value1 attr2:value2 &apos;attr3:value31 value32 value3n&apos; %&#125;</div><div class=\"line\">&#123;% qncss cssFile attr1:value1 attr2:value2 &apos;attr3:value31 value32 value3n&apos; %&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>注意</strong><br>在添加图片的时候，放在images文件夹下的图片，是可以创建子文件夹的。所以，为了方便以及同时兼容之前使用本地图片插件的方式，每一篇文章或者一个功能对应的图片最好放在一个子文件夹下，这样在日志文章中对图片进行引用的时候就可以直接设置成文件夹名/图片名.png的格式。这里建议文件夹名与文章名相同，便于管理</p>\n<h2 id=\"六、同步到七牛\"><a href=\"#六、同步到七牛\" class=\"headerlink\" title=\"六、同步到七牛\"></a>六、同步到七牛</h2><hr>\n<p>将文件上传到七牛云有两种方式 <code>hexo s</code> 和 <code>hexo qiniu sync|sync2</code> 的两个命令工具:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">qiniu sync plugin for hexo</div><div class=\"line\">Usage: hexo qiniu  &lt;argument&gt;</div><div class=\"line\">Description:</div><div class=\"line\">hexo qiniu static files sync plugin</div><div class=\"line\">Arguments:</div><div class=\"line\">  info | i    Displays plugin version, aurthor or GitHub links</div><div class=\"line\">  sync | s    Sync your static files to qiniu.</div><div class=\"line\">  sync2 | s2  Sync your static files to qiniu.(And uploaded update files)</div></pre></td></tr></table></figure></p>\n<h2 id=\"七、后记\"><a href=\"#七、后记\" class=\"headerlink\" title=\"七、后记\"></a>七、后记</h2><hr>\n<p>以下是自己搭建过程中查找的相关链接和信息，希望对大家有帮助。</p>\n<ol>\n<li><a href=\"https://github.com/gyk001/hexo-qiniu-sync\" target=\"_blank\" rel=\"external\">https://github.com/gyk001/hexo-qiniu-sync</a></li>\n<li><a href=\"http://www.ixirong.com/2016/10/31/how-to-use-hexo-qiniu-sync-plugin/\" target=\"_blank\" rel=\"external\">http://www.ixirong.com/2016/10/31/how-to-use-hexo-qiniu-sync-plugin/</a></li>\n<li><a href=\"http://yuchen-lea.github.io/2016-01-21-use-qiniu-store-file-for-hexo/\" target=\"_blank\" rel=\"external\">http://yuchen-lea.github.io/2016-01-21-use-qiniu-store-file-for-hexo/</a></li>\n<li><a href=\"http://error408.com/2016/08/02/Hexo%E4%B8%83%E7%89%9B%E5%9B%BE%E5%BA%8A%E4%BD%BF%E7%94%A8/\" target=\"_blank\" rel=\"external\">http://error408.com/2016/08/02/Hexo%E4%B8%83%E7%89%9B%E5%9B%BE%E5%BA%8A%E4%BD%BF%E7%94%A8/</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>搭建完博客之后一直使用本地图片（相对路径），这样不是很方便，毕竟事关逼格。网上搜索了一把，貌似七牛云做图床评价挺高。说干就干，咱也尝试着使用七牛作为博客的图床了。</p>\n<h2 id=\"一、七牛是什么\"><a href=\"#一、七牛是什么\" class=\"headerlink\" title=\"一、七牛是什么\"></a>一、七牛是什么</h2><hr>\n<p><a href=\"https://www.qiniu.com/\" target=\"_blank\" rel=\"external\">七牛</a> 是一个云存储服务商，注册并实名认证之后，你将免费享有 10GB 存储空间，每月 10GB 下载流量、100 万次 GET 请求、 10 万次 <code>PUT/DELETE</code> 请求。这对于一个博客来说，完全足够了。<br><img src=\"http://otqlqfy9h.bkt.clouddn.com/images/2017-08-02/2017_08_02_1.png\"></p>\n<h2 id=\"二、为什么选用七牛\"><a href=\"#二、为什么选用七牛\" class=\"headerlink\" title=\"二、为什么选用七牛\"></a>二、为什么选用七牛</h2><hr>\n<p><strong>与直接部署到站点相比：</strong></p>\n<ul>\n<li>访问速度更快 （特别是对比部署到github的情况）。</li>\n<li>对个人用户而言空间和流量都十分阔绰。 Gitcafe有 512Mb 的总空间限制，Github虽没有找到类似的说明，但是在其上托管过多媒体资源也不是太合适的做法。而在七牛，你甚至可以通过邀请好友来增加每月下载流量（我的<a href=\"https://portal.qiniu.com/signup?code=3lg4nzgggsggi\" target=\"_blank\" rel=\"external\">邀请链接</a>），每成功邀请一名朋友将增加5GB的下载流量，最高上限可达40GB。</li>\n<li>如果你爱折腾，还可以玩出更多花样3：</li>\n<li>防盗链；<br>  对图片、音视频等在线处理，不必自己做重复工作。通过调用接口，七牛可以帮你：加水印、自定义裁剪区域、旋转、调整图片质量、转换格式；<br>  分析下载量等详细数据，挖掘用户行为。</li>\n</ul>\n<p><strong>与其他上传站点相比：</strong></p>\n<ul>\n<li>更稳定：七牛毕竟是老牌服务商，数据的安全性和稳定性都较有保证。如果上传到什么小网站，哪天发现图片都打不开了才是人间惨剧~</li>\n<li>更灵活：配合 hexo-qiniu-sync 插件4，就算是七牛以后更改了空间域名，也不用一篇一篇地去改外链地址，只要在配置文件中修改外链前缀即可。</li>\n<li>更方便：配合 hexo-qiniu-sync 插件，不必”上传→复制链接→引用外链“，直接按照本地路径引用，然后键入一条命令同步到七牛就好。会自动识别哪些是新增、修改的文件需要上传，哪些是原有的文件不需改动，十分方便。</li>\n</ul>\n<p><strong>当然，虽然七牛有很多优点，但是有一些不足：</strong></p>\n<ul>\n<li>在线文件管理不支持目录。</li>\n<li>本地删除文件，云端不能同步删除文件。<br>尽管仍有欠缺，私以为七牛依旧是现在个人博客最佳的资源储存服务。</li>\n</ul>\n<h2 id=\"三、七牛存储空间的设置\"><a href=\"#三、七牛存储空间的设置\" class=\"headerlink\" title=\"三、七牛存储空间的设置\"></a>三、七牛存储空间的设置</h2><hr>\n<ol>\n<li><a href=\"https://portal.qiniu.com/create\" target=\"_blank\" rel=\"external\">申请七牛账号</a></li>\n<li>选择<strong>对象存储</strong>创建存储空间 <img src=\"http://otqlqfy9h.bkt.clouddn.com/images/2017-08-02/2017_08_02_2.png\">\n 配置相关参数 <img src=\"http://otqlqfy9h.bkt.clouddn.com/images/2017-08-02/2017_08_02_3.png\"></li>\n<li>点击页面右上角头像→进入”个人中心“→选择”密钥管理“→复制当前使用中的<code>AK</code>和<code>SK</code>(待会设置插件时会用到)。 <img src=\"http://otqlqfy9h.bkt.clouddn.com/images/2017-08-02/2017_08_02_4.png\">\n</li>\n</ol>\n<h2 id=\"四、设置-hexo-qiniu-sync-插件\"><a href=\"#四、设置-hexo-qiniu-sync-插件\" class=\"headerlink\" title=\"四、设置 hexo-qiniu-sync 插件\"></a>四、设置 hexo-qiniu-sync 插件</h2><hr>\n<p>前人栽树，后人乘凉。有了插件<a href=\"https://github.com/gyk001/hexo-qiniu-sync\" target=\"_blank\" rel=\"external\"><strong>hexo-qiniu-sync</strong></a>，可以不用手动上传文件到七牛，插件会自动帮你将本地目录的文件同步到七牛之前设定的存储空间下。</p>\n<h3 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h3><p>在hexo主目录下运行以下命令进行安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-qiniu-sync --save</div></pre></td></tr></table></figure></p>\n<h3 id=\"添加插件配置信息\"><a href=\"#添加插件配置信息\" class=\"headerlink\" title=\"添加插件配置信息\"></a>添加插件配置信息</h3><p>在hexo主目录下找到配置文件 <code>_config.yml</code>, 加入以下配置信息：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">#七牛云存储设置</div><div class=\"line\">qiniu:</div><div class=\"line\">  offline: false</div><div class=\"line\">  sync: true</div><div class=\"line\">  bucket: bucket_name</div><div class=\"line\">  secret_file: sec/qn.json or C:</div><div class=\"line\">  access_key: AccessKey</div><div class=\"line\">  secret_key: SecretKey</div><div class=\"line\">  dirPrefix: static</div><div class=\"line\">  urlPrefix: http://bucket_name.qiniudn.com/static</div><div class=\"line\">  up_host: http://upload.qiniu.com</div><div class=\"line\">  local_dir: static</div><div class=\"line\">  update_exist: true</div><div class=\"line\">  image: </div><div class=\"line\">    folder: images</div><div class=\"line\">    extend: </div><div class=\"line\">  js:</div><div class=\"line\">    folder: js</div><div class=\"line\">  css:</div><div class=\"line\">    folder: css</div><div class=\"line\">  audio:</div><div class=\"line\">    folder: audio</div></pre></td></tr></table></figure></p>\n<p><strong>几个注意点:</strong></p>\n<ul>\n<li><strong>bucket</strong> ：修改为你刚才申请的七牛空间名称</li>\n<li><strong>access_key 、 secret_key</strong> : 上传密钥<code>AccessKey、SecretKey</code>。即3 第3步复制的AK和SK。</li>\n<li><strong>urlPrefix</strong> : 七牛空间地址的前缀。 <strong>重要！必填！</strong><br>因为现在七牛已经取消了二级域名，外链前缀类似设置中的 <a href=\"http://7xqb0u.com1.z0.glb.clouddn.com\" target=\"_blank\" rel=\"external\">http://7xqb0u.com1.z0.glb.clouddn.com</a> ，插件不能根据 bucket 自动生成外链前缀了。你可以进入自己创建的空间在域名设置中看到自己的七牛测试域名，也可以查看一个已上传的文件外链地址，确认前缀无误。这个参数的设置是保证解析成网页文件时，外链地址正确的关键之一！  <img src=\"http://otqlqfy9h.bkt.clouddn.com/images/2017-08-02/2017_08_02_5.png\"></li>\n<li>不要在plugins下面添加hexo-qiniu-sync的配置项，否则会导致错误，<a href=\"https://github.com/gyk001/hexo-qiniu-sync/issues/41#issuecomment-279229378\" target=\"_blank\" rel=\"external\">详见</a> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 错误示例</div><div class=\"line\">plugins:</div><div class=\"line\">  - hexo-qiniu-sync</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>配置参数说明：</p>\n<ul>\n<li><strong>offline 参数：</strong><br>如果要使用同步到七牛空间的静态资源，请设置为 false。如果只想浏览在本地的静态资源文件，则设置为 true。</li>\n<li><strong>secret_file 参数： </strong><br>可有可无，貌似有了这个之后上面的两个参数就不需要配置了。这个路径是需要你自己建立一个json的文件存储上面的秘钥，然后把文件的路径写在这里就好</li>\n<li><strong>sync 参数：</strong><br>如果你想关掉七牛同步，将此参数设置为false即可，不过一般用不到修改这个参数。</li>\n<li><strong>dirPrefix 参数：</strong><br>将资源上传到七牛空间内这个目录下(说是目录会容易理解点)，默认为 <code>static</code> 目录。<br>可设置为空。该参数会影响外链的地址，如果设置为非空值，例如默认值 <code>static</code> ，则 <code>urlPrefix</code> 为保持一致需加上目录后缀 <code>/static</code> ，改为 <code>http://bucket_name.qiniudn.com/static</code> 。<br>(外链地址<a href=\"http://bucket_name.qiniudn.com，替换成自己地址\" target=\"_blank\" rel=\"external\">http://bucket_name.qiniudn.com，替换成自己地址</a>)</li>\n<li><strong>urlPrefix 参数：</strong><br>七牛空间地址的前缀，会按默认格式自动生成地址，所以此参数可省略。<br>默认格式为 <code>http://bucket_name.qiniudn.com/static</code> ，如果你的七牛空间使用自定义域名或域名不是此格式的，请配置此参数。<br>当你设置了 <code>dirPrefix</code> 参数后，如<code>static</code>。则此<code>url</code>地址必须加上目录后缀 <code>/static</code> ， 即<code>http://bucket_name.qiniudn.com/static</code>，否则静态资源将无法访问。<br>如果没有设置 <code>dirPrefix</code> 参数，url地址不必加上目录后缀， 即<code>http://bucket_name.qiniudn.com</code>。<br>(外链地址<a href=\"http://bucket_name.qiniudn.com，替换成自己地址\" target=\"_blank\" rel=\"external\">http://bucket_name.qiniudn.com，替换成自己地址</a>)</li>\n<li><strong>local_dir 参数：</strong><br>只填写一个目录名称即可，建立在hexo博客的主目录，不需要使用子目录。<br>当你在配置中填写好文件夹后，运行hexo时，会自动建立对应的目录。<br>如果你了解hexo文件夹的关系，担心这样会导致离线模式不能查看到图片，我可以告诉你你不需要担心这个问题。<br>在你以离线模式运行时，会自动使用软连接/联接方式帮你建立文件夹的引用，可以让你的离线浏览节省一倍的空间。</li>\n<li><strong>update_exist 参数：</strong><br>如果你的静态文件会进行修改或替换，并需要更新七牛空间上原先上传的文件，则设置为 true 。<br>是否更新空间上已上传的文件，是按照对比文件大小是否相同或者本地文件在上传到七牛空间之后进行过修改的规则进行判断的。</li>\n<li><strong>image/js/css ：</strong><br>子参数folder为不同静态资源种类的目录名称，一般不需要改动</li>\n<li><strong>image : extend 参数：</strong><br>这是个特殊参数，是文章内使用 qnimg 标签引用图片的默认图片处理操作。请参考 七牛开发者中心-图片处理。<br>可以使用 基本图片处理（imageView2）、高级图片处理（imageMogr2）、图片水印处理（watermark） 这三个图片处理接口，多个接口内容之间用 | 间隔。<br>例如 <code>?imageView2/2/w/500</code> 即生成宽度最多500px的缩略图。</li>\n</ul>\n<p>以下是我的配置文件<br><img src=\"http://otqlqfy9h.bkt.clouddn.com/images/2017-08-02/2017_08_02_6.png\"></p>\n<p>这样你在 <code>local_dir</code> 的<code>image命名</code>的文件夹中添加一张图片，之后运行<code>hexo（如hexo s）</code>，图片就可以在你的七牛存储空间的内容管理中看见了。<br>你会看到图片的外链URL就是<code>http://your_site/your_static(你的目录-dirPrefix参数的配置)/images/yourimage.png</code>。就是<code>域名+自定义的目录名+images（配置文件中image中folder指定的文件）+ 图片名</code><br><img src=\"http://otqlqfy9h.bkt.clouddn.com/images/2017-08-02/2017_08_02_7.png\"></p>\n<h2 id=\"五、引用七牛资源\"><a href=\"#五、引用七牛资源\" class=\"headerlink\" title=\"五、引用七牛资源\"></a>五、引用七牛资源</h2><hr>\n<h3 id=\"引用图片\"><a href=\"#引用图片\" class=\"headerlink\" title=\"引用图片\"></a>引用图片</h3><p>图片的引用是最典型的情况。让我们来看最简单的情况：如果你想引用储存在 <code>local_dir/images</code> 下的图片 <code>demo.jpg</code> ，只需在文章中插入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;% qnimg demo.jpg %&#125;</div></pre></td></tr></table></figure></p>\n<p>生成站点时将被解析为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;img src=&quot;http://7xqb0u.com1.z0.glb.clouddn.com/images/demo.jpg&quot;&gt;</div></pre></td></tr></table></figure></p>\n<p>这里，我们总结一下生成的图片外链地址规则。我们把引用实例概括为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;% qnimg ImgFile %&#125;</div></pre></td></tr></table></figure></p>\n<p>则生成的图片外链地址规则为<code>urlPrefix + / + image.folder + / + ImgFile</code>。<br>因此，要想正确的引用外链，一定要注意每一个步骤的设置。如果最后外链不能正常显示，首先对比一下网站博客引用的地址和七牛的外链地址是否一致，如果不一致，则对照外链地址的生成规律，检查文件存放路径、 urlPrefix 、 dirPrefix 、 image.folder 设置是否正确。</p>\n<h3 id=\"图片引用的高阶版\"><a href=\"#图片引用的高阶版\" class=\"headerlink\" title=\"图片引用的高阶版\"></a>图片引用的高阶版</h3><p>高级用法的通用模版：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;% qnimg imageFile [attr1:value1] [&apos;attr2:value21 value22 ...&apos;] [extend:... | normal:yes] %&#125;</div></pre></td></tr></table></figure></p>\n<p>[] 表示可选项，按需添加，也可以不写<br>| 表示二选一<br>extend:… 图片处理参数，表示对图片进行某种特定处理5，多个处理之间用 | 间隔。<br>normal:yes 表示使用原图，忽略 _config.yml 文件中的 image.extend 设置<br>实例 图片的本地路径为 cdn/images/test/demo.png ：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;% qnimg test/demo.png title:标题 alt:说明 &apos;class:class1 class2&apos; extend:?imageView2/2/w/600 %&#125;</div></pre></td></tr></table></figure></p>\n<p>解析为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;img title=&quot;标题&quot; alt=&quot;说明&quot; class=&quot;class1 class2&quot; src=&quot;http://7xqb0u.com1.z0.glb.clouddn.com/images/test/demo.png?imageView2/2/w/600&quot;&gt;</div></pre></td></tr></table></figure></p>\n<p>其中 ?imageView2/2/w/500 代表生成宽度最多500px的缩略图5。如果经常使用某种图片效果，可以在其七牛创建处理样式，以后直接将 extend 参数设置为 分隔符 + 样式名 就好。例如设置的分隔符为 - ，样式名为 new ，则 extend 参数为 -new 。</p>\n<h3 id=\"引用CSS和JS\"><a href=\"#引用CSS和JS\" class=\"headerlink\" title=\"引用CSS和JS\"></a>引用CSS和JS</h3><p>只是引用的标签名不同：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;% qnjs jsFile attr1:value1 attr2:value2 &apos;attr3:value31 value32 value3n&apos; %&#125;</div><div class=\"line\">&#123;% qncss cssFile attr1:value1 attr2:value2 &apos;attr3:value31 value32 value3n&apos; %&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>注意</strong><br>在添加图片的时候，放在images文件夹下的图片，是可以创建子文件夹的。所以，为了方便以及同时兼容之前使用本地图片插件的方式，每一篇文章或者一个功能对应的图片最好放在一个子文件夹下，这样在日志文章中对图片进行引用的时候就可以直接设置成文件夹名/图片名.png的格式。这里建议文件夹名与文章名相同，便于管理</p>\n<h2 id=\"六、同步到七牛\"><a href=\"#六、同步到七牛\" class=\"headerlink\" title=\"六、同步到七牛\"></a>六、同步到七牛</h2><hr>\n<p>将文件上传到七牛云有两种方式 <code>hexo s</code> 和 <code>hexo qiniu sync|sync2</code> 的两个命令工具:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">qiniu sync plugin for hexo</div><div class=\"line\">Usage: hexo qiniu  &lt;argument&gt;</div><div class=\"line\">Description:</div><div class=\"line\">hexo qiniu static files sync plugin</div><div class=\"line\">Arguments:</div><div class=\"line\">  info | i    Displays plugin version, aurthor or GitHub links</div><div class=\"line\">  sync | s    Sync your static files to qiniu.</div><div class=\"line\">  sync2 | s2  Sync your static files to qiniu.(And uploaded update files)</div></pre></td></tr></table></figure></p>\n<h2 id=\"七、后记\"><a href=\"#七、后记\" class=\"headerlink\" title=\"七、后记\"></a>七、后记</h2><hr>\n<p>以下是自己搭建过程中查找的相关链接和信息，希望对大家有帮助。</p>\n<ol>\n<li><a href=\"https://github.com/gyk001/hexo-qiniu-sync\" target=\"_blank\" rel=\"external\">https://github.com/gyk001/hexo-qiniu-sync</a></li>\n<li><a href=\"http://www.ixirong.com/2016/10/31/how-to-use-hexo-qiniu-sync-plugin/\" target=\"_blank\" rel=\"external\">http://www.ixirong.com/2016/10/31/how-to-use-hexo-qiniu-sync-plugin/</a></li>\n<li><a href=\"http://yuchen-lea.github.io/2016-01-21-use-qiniu-store-file-for-hexo/\" target=\"_blank\" rel=\"external\">http://yuchen-lea.github.io/2016-01-21-use-qiniu-store-file-for-hexo/</a></li>\n<li><a href=\"http://error408.com/2016/08/02/Hexo%E4%B8%83%E7%89%9B%E5%9B%BE%E5%BA%8A%E4%BD%BF%E7%94%A8/\" target=\"_blank\" rel=\"external\">http://error408.com/2016/08/02/Hexo%E4%B8%83%E7%89%9B%E5%9B%BE%E5%BA%8A%E4%BD%BF%E7%94%A8/</a></li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjadpus8y0000coxd2furoc11","category_id":"cjadpus9f0004coxd47w0bx79","_id":"cjadpus9s000ccoxdjxnhp5y5"},{"post_id":"cjadpus9r000bcoxdp3zivdre","category_id":"cjadpus9q0009coxdeya29tco","_id":"cjadpus9v000hcoxdz0ee41vc"},{"post_id":"cjadpus9j0006coxdifc3icay","category_id":"cjadpus9q0009coxdeya29tco","_id":"cjadpus9x000kcoxde6k88zmo"},{"post_id":"cjadpus9s000dcoxdufafh3hd","category_id":"cjadpus9q0009coxdeya29tco","_id":"cjadpus9y000ncoxdvof3dqmm"},{"post_id":"cjadpus9u000gcoxdde8qzlkq","category_id":"cjadpus9q0009coxdeya29tco","_id":"cjadpus9z000qcoxdzsvt0mvz"},{"post_id":"cjadpus9l0007coxd9rrv240q","category_id":"cjadpus9q0009coxdeya29tco","_id":"cjadpusa0000tcoxda5jepl6m"},{"post_id":"cjadpus9v000icoxd7lu35zfy","category_id":"cjadpus9q0009coxdeya29tco","_id":"cjadpusa0000ucoxdmc8utwnr"},{"post_id":"cjadpus9x000lcoxdqm0to1u0","category_id":"cjadpus9f0004coxd47w0bx79","_id":"cjadpusa1000wcoxdih13ahb1"},{"post_id":"cjadpus9y000ocoxdo3jvc99r","category_id":"cjadpus9f0004coxd47w0bx79","_id":"cjadpusa1000xcoxdfos3xeq7"}],"PostTag":[{"post_id":"cjadpus8y0000coxd2furoc11","tag_id":"cjadpus9i0005coxdin5fcczg","_id":"cjadpus9y000mcoxdhcdi5b7p"},{"post_id":"cjadpus8y0000coxd2furoc11","tag_id":"cjadpus9q000acoxdgqh26j3r","_id":"cjadpus9z000pcoxdiuyfmtok"},{"post_id":"cjadpus8y0000coxd2furoc11","tag_id":"cjadpus9t000fcoxd2uqkvpfw","_id":"cjadpusa0000scoxdkolamxya"},{"post_id":"cjadpus9j0006coxdifc3icay","tag_id":"cjadpus9w000jcoxd7bzlvyur","_id":"cjadpusa30011coxdu8yngy8v"},{"post_id":"cjadpus9j0006coxdifc3icay","tag_id":"cjadpus9z000rcoxd94dmmm39","_id":"cjadpusa30012coxdqewzk9gq"},{"post_id":"cjadpus9j0006coxdifc3icay","tag_id":"cjadpusa1000vcoxd3wkggqdj","_id":"cjadpusa40014coxd8hw2mzu8"},{"post_id":"cjadpus9j0006coxdifc3icay","tag_id":"cjadpusa1000ycoxdycsgj6kr","_id":"cjadpusa40015coxd874pcjq7"},{"post_id":"cjadpus9j0006coxdifc3icay","tag_id":"cjadpusa1000zcoxdzkmcg4wh","_id":"cjadpusa50017coxd5intmdc6"},{"post_id":"cjadpus9l0007coxd9rrv240q","tag_id":"cjadpus9w000jcoxd7bzlvyur","_id":"cjadpusa8001acoxdcdc0gyrw"},{"post_id":"cjadpus9l0007coxd9rrv240q","tag_id":"cjadpus9z000rcoxd94dmmm39","_id":"cjadpusa9001bcoxdbxyxkbxb"},{"post_id":"cjadpus9l0007coxd9rrv240q","tag_id":"cjadpusa1000vcoxd3wkggqdj","_id":"cjadpusa9001dcoxdl02nnooj"},{"post_id":"cjadpus9l0007coxd9rrv240q","tag_id":"cjadpusa1000ycoxdycsgj6kr","_id":"cjadpusaa001ecoxd8qltisej"},{"post_id":"cjadpus9m0008coxdwwtrdav6","tag_id":"cjadpus9w000jcoxd7bzlvyur","_id":"cjadpusad001kcoxdokt6q87w"},{"post_id":"cjadpus9m0008coxdwwtrdav6","tag_id":"cjadpus9z000rcoxd94dmmm39","_id":"cjadpusad001lcoxdbuun6c06"},{"post_id":"cjadpus9m0008coxdwwtrdav6","tag_id":"cjadpusa1000vcoxd3wkggqdj","_id":"cjadpusad001ncoxdr2vrffyr"},{"post_id":"cjadpus9m0008coxdwwtrdav6","tag_id":"cjadpusa1000ycoxdycsgj6kr","_id":"cjadpusae001ocoxd6lt87w5e"},{"post_id":"cjadpus9m0008coxdwwtrdav6","tag_id":"cjadpusac001hcoxdvhizfj52","_id":"cjadpusae001qcoxdiszufi5y"},{"post_id":"cjadpus9m0008coxdwwtrdav6","tag_id":"cjadpusac001icoxdwq4t8ve5","_id":"cjadpusaf001rcoxd4pyhzsrx"},{"post_id":"cjadpus9r000bcoxdp3zivdre","tag_id":"cjadpus9w000jcoxd7bzlvyur","_id":"cjadpusag001wcoxd4y0zvrw1"},{"post_id":"cjadpus9r000bcoxdp3zivdre","tag_id":"cjadpus9z000rcoxd94dmmm39","_id":"cjadpusag001xcoxd3r8zloms"},{"post_id":"cjadpus9r000bcoxdp3zivdre","tag_id":"cjadpusa1000vcoxd3wkggqdj","_id":"cjadpusah001zcoxdhambaguf"},{"post_id":"cjadpus9r000bcoxdp3zivdre","tag_id":"cjadpusa1000ycoxdycsgj6kr","_id":"cjadpusah0020coxdqg1cs0dd"},{"post_id":"cjadpus9r000bcoxdp3zivdre","tag_id":"cjadpusaf001tcoxdeb7qd7gn","_id":"cjadpusah0022coxd7w62eyz1"},{"post_id":"cjadpus9r000bcoxdp3zivdre","tag_id":"cjadpusaf001ucoxddx7lawr0","_id":"cjadpusah0023coxdw0i5f4uo"},{"post_id":"cjadpus9s000dcoxdufafh3hd","tag_id":"cjadpus9w000jcoxd7bzlvyur","_id":"cjadpusaj002acoxd90kbnqd9"},{"post_id":"cjadpus9s000dcoxdufafh3hd","tag_id":"cjadpus9z000rcoxd94dmmm39","_id":"cjadpusaj002bcoxdcv9xgnl6"},{"post_id":"cjadpus9s000dcoxdufafh3hd","tag_id":"cjadpusa1000vcoxd3wkggqdj","_id":"cjadpusak002dcoxdrh4wl0i7"},{"post_id":"cjadpus9s000dcoxdufafh3hd","tag_id":"cjadpusa1000ycoxdycsgj6kr","_id":"cjadpusak002ecoxd48l93n04"},{"post_id":"cjadpus9s000dcoxdufafh3hd","tag_id":"cjadpusai0025coxdzimu1357","_id":"cjadpusak002gcoxdcmuau2hr"},{"post_id":"cjadpus9s000dcoxdufafh3hd","tag_id":"cjadpusai0026coxds5038gxc","_id":"cjadpusak002hcoxdmokdxsdv"},{"post_id":"cjadpus9s000dcoxdufafh3hd","tag_id":"cjadpusai0027coxddpkfhpx2","_id":"cjadpusak002jcoxdljjw539k"},{"post_id":"cjadpus9s000dcoxdufafh3hd","tag_id":"cjadpusaj0028coxdt85iitrd","_id":"cjadpusal002kcoxdh3nsrgnl"},{"post_id":"cjadpus9u000gcoxdde8qzlkq","tag_id":"cjadpus9w000jcoxd7bzlvyur","_id":"cjadpusam002ocoxd239sen76"},{"post_id":"cjadpus9u000gcoxdde8qzlkq","tag_id":"cjadpus9z000rcoxd94dmmm39","_id":"cjadpusam002pcoxd9n22n4y6"},{"post_id":"cjadpus9u000gcoxdde8qzlkq","tag_id":"cjadpusa1000vcoxd3wkggqdj","_id":"cjadpusan002rcoxdxru93rpk"},{"post_id":"cjadpus9u000gcoxdde8qzlkq","tag_id":"cjadpusa1000ycoxdycsgj6kr","_id":"cjadpusan002scoxd74iq6hwq"},{"post_id":"cjadpus9u000gcoxdde8qzlkq","tag_id":"cjadpusac001hcoxdvhizfj52","_id":"cjadpusao002ucoxd8elpomwl"},{"post_id":"cjadpus9u000gcoxdde8qzlkq","tag_id":"cjadpusac001icoxdwq4t8ve5","_id":"cjadpusao002vcoxdxm36tcse"},{"post_id":"cjadpus9v000icoxd7lu35zfy","tag_id":"cjadpus9w000jcoxd7bzlvyur","_id":"cjadpusaq0030coxd2er67rsd"},{"post_id":"cjadpus9v000icoxd7lu35zfy","tag_id":"cjadpus9z000rcoxd94dmmm39","_id":"cjadpusaq0031coxdggsmpyyr"},{"post_id":"cjadpus9v000icoxd7lu35zfy","tag_id":"cjadpusa1000vcoxd3wkggqdj","_id":"cjadpusaq0033coxdppvh6ey4"},{"post_id":"cjadpus9v000icoxd7lu35zfy","tag_id":"cjadpusa1000ycoxdycsgj6kr","_id":"cjadpusar0034coxdeuqb17ok"},{"post_id":"cjadpus9v000icoxd7lu35zfy","tag_id":"cjadpusac001hcoxdvhizfj52","_id":"cjadpusar0036coxdqeo3iwn8"},{"post_id":"cjadpus9v000icoxd7lu35zfy","tag_id":"cjadpusac001icoxdwq4t8ve5","_id":"cjadpusar0037coxd91il02wt"},{"post_id":"cjadpus9x000lcoxdqm0to1u0","tag_id":"cjadpus9q000acoxdgqh26j3r","_id":"cjadpusar0038coxdabijxmyj"},{"post_id":"cjadpus9x000lcoxdqm0to1u0","tag_id":"cjadpusaq002zcoxde4f85tkk","_id":"cjadpusar0039coxdtll4wfdz"},{"post_id":"cjadpus9x000lcoxdqm0to1u0","tag_id":"cjadpusaq0032coxd4vhjckig","_id":"cjadpusar003acoxdz6iesem3"},{"post_id":"cjadpus9y000ocoxdo3jvc99r","tag_id":"cjadpus9q000acoxdgqh26j3r","_id":"cjadpusar003bcoxd08xmq0hu"},{"post_id":"cjadpus9y000ocoxdo3jvc99r","tag_id":"cjadpusar0035coxdqkn5ro45","_id":"cjadpusar003ccoxd1sxmfsln"}],"Tag":[{"name":"Next","_id":"cjadpus9i0005coxdin5fcczg"},{"name":"Hexo","_id":"cjadpus9q000acoxdgqh26j3r"},{"name":"Gitment","_id":"cjadpus9t000fcoxd2uqkvpfw"},{"name":"LeetCode","_id":"cjadpus9w000jcoxd7bzlvyur"},{"name":"Algorithms","_id":"cjadpus9z000rcoxd94dmmm39"},{"name":"Data Structure","_id":"cjadpusa1000vcoxd3wkggqdj"},{"name":"Array","_id":"cjadpusa1000ycoxdycsgj6kr"},{"name":"Kadane's Algorithm","_id":"cjadpusa1000zcoxdzkmcg4wh"},{"name":"BFS","_id":"cjadpusac001hcoxdvhizfj52"},{"name":"DFS","_id":"cjadpusac001icoxdwq4t8ve5"},{"name":"DP","_id":"cjadpusaf001tcoxdeb7qd7gn"},{"name":"Dynamic Programming","_id":"cjadpusaf001ucoxddx7lawr0"},{"name":"Sort","_id":"cjadpusai0025coxdzimu1357"},{"name":"HashTable","_id":"cjadpusai0026coxds5038gxc"},{"name":"Majority Element","_id":"cjadpusai0027coxddpkfhpx2"},{"name":"Moore’s voting algorithm","_id":"cjadpusaj0028coxdt85iitrd"},{"name":"Blog","_id":"cjadpusaq002zcoxde4f85tkk"},{"name":"GitHub]","_id":"cjadpusaq0032coxd4vhjckig"},{"name":"Qiniu","_id":"cjadpusar0035coxdqkn5ro45"}]}}